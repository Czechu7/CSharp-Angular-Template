{
    "pipes": [],
    "interfaces": [
        {
            "name": "ExampleCrudForm",
            "id": "interface-ExampleCrudForm-78b0dd8aca49907e2262a6578c4f26db3832ea210b15fa80c634c3bef7b950f8105851cb38641ea77150a04cd79585d3c21c5f8cfc27e0d725c36884eb657b6f",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n\r\nexport interface ExampleCrudForm {\r\n  id: FormControl<string>;\r\n  name: FormControl<string>;\r\n  count: FormControl<number>;\r\n  price: FormControl<number>;\r\n  isZiemniak: FormControl<boolean>;\r\n  arrivalDate: FormControl<Date>;\r\n}\r\n",
            "properties": [
                {
                    "name": "arrivalDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<Date>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "isZiemniak",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<number>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAccordionPanelItem",
            "id": "interface-IAccordionPanelItem-7e68aa10edc9c3a33da694ee263703bfcbb306a9d6045758178388b12737abdc17e98ebc79519d26b8f7304410c6a73b846200e6830343d6eabe70c616c8cd36",
            "file": "src/app/shared/types/accordion.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\n\r\nexport interface IAccordionPanelItem {\r\n  value: string;\r\n  header: string;\r\n  contentTemplate: TemplateRef<unknown>;\r\n}\r\n\r\nexport interface IAccordionProps {\r\n  panels: IAccordionPanelItem[];\r\n  activeItems: string[];\r\n  allowMultiple: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "contentTemplate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TemplateRef<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAccordionProps",
            "id": "interface-IAccordionProps-7e68aa10edc9c3a33da694ee263703bfcbb306a9d6045758178388b12737abdc17e98ebc79519d26b8f7304410c6a73b846200e6830343d6eabe70c616c8cd36",
            "file": "src/app/shared/types/accordion.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { TemplateRef } from '@angular/core';\r\n\r\nexport interface IAccordionPanelItem {\r\n  value: string;\r\n  header: string;\r\n  contentTemplate: TemplateRef<unknown>;\r\n}\r\n\r\nexport interface IAccordionProps {\r\n  panels: IAccordionPanelItem[];\r\n  activeItems: string[];\r\n  allowMultiple: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "activeItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "allowMultiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "panels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccordionPanelItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAltchaProps",
            "id": "interface-IAltchaProps-0ca83f89baf090f0ede0268331444f2dfc55c8816d0dd8af52d42f0a18c43bea0e5c5f998b0142e1c13c44308b6305e0e0d85a13e2379f23d4e19ab2e6c67cfe",
            "file": "src/app/shared/types/altcha.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAltchaProps {\r\n  challengeurl?: string;\r\n  debug?: boolean;\r\n  test?: boolean;\r\n  value?: string;\r\n  style?: Record<string, string>;\r\n  styleClass?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "challengeurl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "debug",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "test",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAltchaStatus",
            "id": "interface-IAltchaStatus-7ebc940f6f7bae3ca20a72397f7ecc6ec6e8bd099934af78777ba7a2b2a38f45fb79223bf693a898da2d24669f962578884074ac46ebe76486e2ced43de927c1",
            "file": "src/app/shared/models/altcha.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IAltchaStatus {\r\n  state: 'unverified' | 'verifying' | 'verified' | 'error';\r\n  payload: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "payload",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "state",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "\"unverified\" | \"verifying\" | \"verified\" | \"error\"",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAuthRefreshTokensRequestDto",
            "id": "interface-IAuthRefreshTokensRequestDto-110dd943c0a8c7cc549b76cb7f3aafef625054e81ca48086569cd308429609b7a15f8a83f0d7848a86d8fd1906a463571d26d572287239a76a4ea016981a85a4",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAccessToken } from '../tokens.model';\r\n\r\nexport interface ILoginDto {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface IRegisterDto extends ILoginDto {\r\n  confirmPassword: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n}\r\n\r\nexport interface IAuthTokensResponseDto {\r\n  accessToken: IAccessToken;\r\n  refreshToken: string;\r\n  expiresAt: string;\r\n}\r\n\r\nexport interface IAuthRefreshTokensRequestDto {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface IRevokeTokenRequestDto {\r\n  refreshToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAuthTokensResponseDto",
            "id": "interface-IAuthTokensResponseDto-110dd943c0a8c7cc549b76cb7f3aafef625054e81ca48086569cd308429609b7a15f8a83f0d7848a86d8fd1906a463571d26d572287239a76a4ea016981a85a4",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAccessToken } from '../tokens.model';\r\n\r\nexport interface ILoginDto {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface IRegisterDto extends ILoginDto {\r\n  confirmPassword: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n}\r\n\r\nexport interface IAuthTokensResponseDto {\r\n  accessToken: IAccessToken;\r\n  refreshToken: string;\r\n  expiresAt: string;\r\n}\r\n\r\nexport interface IAuthRefreshTokensRequestDto {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface IRevokeTokenRequestDto {\r\n  refreshToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccessToken",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "expiresAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IBaseResponse",
            "id": "interface-IBaseResponse-d091359c03c56736d61b29b46ade31a5935a31e75cb3980ec4910764525e32def76a004d7b119a5242b2e93870ef883f528379021dd573aef76029a73acf9e84",
            "file": "src/app/core/_models/base-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBaseResponseWithoutData {\r\n  success: boolean;\r\n  statusCode: number;\r\n  message: string;\r\n  errors?: string[];\r\n}\r\n\r\nexport interface IBaseResponse<T> extends IBaseResponseWithoutData {\r\n  data: T;\r\n  pagination?: IPagination;\r\n}\r\n\r\ninterface IPagination {\r\n  pageSize: number;\r\n  pageNumber: number;\r\n  totalCount: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPagination",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "IBaseResponseWithoutData"
            ]
        },
        {
            "name": "IBaseResponseWithoutData",
            "id": "interface-IBaseResponseWithoutData-d091359c03c56736d61b29b46ade31a5935a31e75cb3980ec4910764525e32def76a004d7b119a5242b2e93870ef883f528379021dd573aef76029a73acf9e84",
            "file": "src/app/core/_models/base-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBaseResponseWithoutData {\r\n  success: boolean;\r\n  statusCode: number;\r\n  message: string;\r\n  errors?: string[];\r\n}\r\n\r\nexport interface IBaseResponse<T> extends IBaseResponseWithoutData {\r\n  data: T;\r\n  pagination?: IPagination;\r\n}\r\n\r\ninterface IPagination {\r\n  pageSize: number;\r\n  pageNumber: number;\r\n  totalCount: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "statusCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IButtonProps",
            "id": "interface-IButtonProps-6cca4dfee6ff230b5a5fc0daa541ef56dbb1f1864fc533ced3642ef4356cc01c78058b094ff7deb531627c0536970c65f80c96904a0ce52a76328b49a9ebc060",
            "file": "src/app/shared/types/button.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type IButtonIconPosition = 'left' | 'right' | 'top' | 'bottom';\r\n\r\nexport type IButtonSeverity =\r\n  | 'primary'\r\n  | 'secondary'\r\n  | 'success'\r\n  | 'info'\r\n  | 'warn'\r\n  | 'help'\r\n  | 'danger'\r\n  | 'contrast';\r\n\r\nexport type IButtonVariant = 'text' | 'outlined';\r\n\r\nexport type IButtonSize = 'small' | 'large';\r\n\r\nexport type IButtonBadgeSeverity = 'info' | 'success' | 'warn' | 'danger' | 'contrast';\r\n\r\nexport interface IButtonProps {\r\n  label?: string;\r\n  icon?: string;\r\n  iconPos?: IButtonIconPosition;\r\n  badge?: string;\r\n  badgeSeverity?: IButtonBadgeSeverity;\r\n  severity?: IButtonSeverity;\r\n  raised?: boolean;\r\n  rounded?: boolean;\r\n  loading?: boolean;\r\n  disabled?: boolean;\r\n  variant?: IButtonVariant;\r\n  size?: IButtonSize;\r\n  styleClass?: string;\r\n  ariaLabel?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "badgeSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IButtonBadgeSeverity",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "iconPos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IButtonIconPosition",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "raised",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "rounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IButtonSeverity",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IButtonSize",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IButtonVariant",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IChartDataset",
            "id": "interface-IChartDataset-9db37680aa6b35486fdb889d32461359c591bde548094f986aef0552643d1da03c9f95f0ca7becbf5543f9a80484686eec31229c8e9547701a009c09734beead",
            "file": "src/app/shared/types/donut-chart.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IChartDataset {\r\n  data: number[];\r\n  backgroundColor: string[];\r\n  hoverBackgroundColor?: string[];\r\n  label?: string;\r\n}\r\n\r\nexport interface IDonutChartData {\r\n  labels: string[];\r\n  datasets: IChartDataset[];\r\n}\r\n\r\nexport interface IDonutChartOptions {\r\n  cutout?: string;\r\n  plugins?: {\r\n    legend?: {\r\n      labels?: {\r\n        color?: string;\r\n      };\r\n      position?: 'top' | 'bottom' | 'left' | 'right';\r\n    };\r\n    title?: {\r\n      display?: boolean;\r\n      text?: string;\r\n      color?: string;\r\n      font?: {\r\n        size?: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nexport interface IDonutChartProps {\r\n  data: IDonutChartData;\r\n  options: IDonutChartOptions;\r\n  width: string;\r\n  height: string;\r\n  responsive: boolean;\r\n  chartClass: string;\r\n  chartStyle: Record<string, string>;\r\n  ariaLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "hoverBackgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ICheckboxProps",
            "id": "interface-ICheckboxProps-4a38c7876479ed3efc17bedbccaec8add643fa391775fb54e5a8f2e3a2f966b4bbdaf1664346280154d776762a23b543ec39c22cd40b6b1fe5d188c0837c3f04",
            "file": "src/app/shared/types/checkbox.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface ICheckboxProps {\r\n  label?: string;\r\n  inputId?: string;\r\n  name?: string;\r\n  required?: boolean;\r\n  formControl: FormControl;\r\n  value?: boolean;\r\n  invalid?: boolean;\r\n  errorMessage?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IConfirmModalProps",
            "id": "interface-IConfirmModalProps-a5b63b5671f0df9180ebe000d908586322761f33c5e2f38a52de96860858fbc18088c8a2697ca59c268cefd245de11fc85f58d6e13cdac1718bd59a6ca7f9b2e",
            "file": "src/app/shared/types/modal.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IConfirmModalProps {\r\n  header: string;\r\n  visible: boolean;\r\n  message: string;\r\n  yesLabel: string;\r\n  noLabel: string;\r\n  onYes: () => void;\r\n  onNo: () => void;\r\n}\r\n\r\nexport interface IInfoModalProps {\r\n  header: string;\r\n  visible: boolean;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "noLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "onNo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "onYes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "yesLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IContextMenuAction",
            "id": "interface-IContextMenuAction-8d8ca68975d68095c01c327fae16f976e9171c334c06a26d0617369a2a18985ce5dc9785d672b6ea87589dafce41bf2842df89c2e0635afd4bfc8f4fed414bbc",
            "file": "src/app/shared/types/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\r\nimport { MenuItem } from 'primeng/api';\r\n\r\nexport type Position = 'top' | 'bottom' | 'both';\r\n\r\nexport interface ITableColumn {\r\n  field: string;\r\n  header: string;\r\n}\r\n\r\nexport interface ITableActionButton {\r\n  icon: string;\r\n  severity?: string;\r\n  ariaLabel: string;\r\n  action: string;\r\n}\r\n\r\nexport interface IContextMenuAction {\r\n  originalEvent: Event;\r\n  item: MenuItem;\r\n}\r\n\r\nexport interface ITableProps<T> {\r\n  cols: ITableColumn[];\r\n  data: T[];\r\n  headerTitle?: string;\r\n  footerTitle?: string;\r\n  showGridlines?: boolean;\r\n  stripedRows?: boolean;\r\n  rowsPerPage?: number;\r\n  rowsPerPageOptions?: number[];\r\n  enablePaginator?: boolean;\r\n  enableResizableColumns?: boolean;\r\n  minWidth?: string;\r\n  showActions: boolean;\r\n  showSearchBar: boolean;\r\n  showActionButtons: boolean;\r\n  defaultSortField: string;\r\n  defaultSortOrder: number;\r\n  loading: boolean;\r\n  totalRecords: number;\r\n  paginatorPosition: Position;\r\n  contextMenuItems: MenuItem[];\r\n  actionButtons: ITableActionButton[];\r\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\r\n  onActionEvent: EventEmitter<{ action: string; item: T }>;\r\n  onRefreshEvent: EventEmitter<void>;\r\n  onContextMenuActionEvent: EventEmitter<{ action: Event; item: T }>;\r\n}\r\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Event",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IContextMenuEvent",
            "id": "interface-IContextMenuEvent-49e07701994ec0fde9d08473aceb4105142b409e4016e6ceeeefe83ebbd680d7d9c6ae6fc095336411573df2e2fb3e53ed20fcaa912daf5e012ca2998fbc28c9",
            "file": "src/app/shared/types/context-menu.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MenuItem } from 'primeng/api';\r\n\r\nexport interface IContextMenuProps {\r\n  items: MenuItem[];\r\n  global?: boolean;\r\n  appendTo?: string | HTMLElement;\r\n  autoZIndex?: boolean;\r\n  baseZIndex?: number;\r\n  styleClass?: string;\r\n  style?: Record<string, string>;\r\n  triggerEvent?: string;\r\n}\r\n\r\nexport interface IContextMenuEvent {\r\n  originalEvent: MouseEvent;\r\n  item: MenuItem;\r\n}\r\n",
            "properties": [
                {
                    "name": "item",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MouseEvent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IContextMenuProps",
            "id": "interface-IContextMenuProps-49e07701994ec0fde9d08473aceb4105142b409e4016e6ceeeefe83ebbd680d7d9c6ae6fc095336411573df2e2fb3e53ed20fcaa912daf5e012ca2998fbc28c9",
            "file": "src/app/shared/types/context-menu.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MenuItem } from 'primeng/api';\r\n\r\nexport interface IContextMenuProps {\r\n  items: MenuItem[];\r\n  global?: boolean;\r\n  appendTo?: string | HTMLElement;\r\n  autoZIndex?: boolean;\r\n  baseZIndex?: number;\r\n  styleClass?: string;\r\n  style?: Record<string, string>;\r\n  triggerEvent?: string;\r\n}\r\n\r\nexport interface IContextMenuEvent {\r\n  originalEvent: MouseEvent;\r\n  item: MenuItem;\r\n}\r\n",
            "properties": [
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | HTMLElement",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "autoZIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "baseZIndex",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "global",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "triggerEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDecodedToken",
            "id": "interface-IDecodedToken-3897f77802883139db1a5e6d5b49626554be9bee999aa61b00fa75b6de8964fccf4fc3a207857f4bb052e59619c759e36703e6b5181946090ebab953ed232316",
            "file": "src/app/core/_models/decoded-token.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDecodedToken {\r\n  sub: string;\r\n  unique_name: string;\r\n  email: string;\r\n  security_stamp: string;\r\n  role: string;\r\n  nbf: number;\r\n  exp: number;\r\n  iat: number;\r\n  iss: string;\r\n  aud: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "aud",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "exp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "iat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "iss",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "nbf",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "security_stamp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "unique_name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDonutChartData",
            "id": "interface-IDonutChartData-9db37680aa6b35486fdb889d32461359c591bde548094f986aef0552643d1da03c9f95f0ca7becbf5543f9a80484686eec31229c8e9547701a009c09734beead",
            "file": "src/app/shared/types/donut-chart.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IChartDataset {\r\n  data: number[];\r\n  backgroundColor: string[];\r\n  hoverBackgroundColor?: string[];\r\n  label?: string;\r\n}\r\n\r\nexport interface IDonutChartData {\r\n  labels: string[];\r\n  datasets: IChartDataset[];\r\n}\r\n\r\nexport interface IDonutChartOptions {\r\n  cutout?: string;\r\n  plugins?: {\r\n    legend?: {\r\n      labels?: {\r\n        color?: string;\r\n      };\r\n      position?: 'top' | 'bottom' | 'left' | 'right';\r\n    };\r\n    title?: {\r\n      display?: boolean;\r\n      text?: string;\r\n      color?: string;\r\n      font?: {\r\n        size?: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nexport interface IDonutChartProps {\r\n  data: IDonutChartData;\r\n  options: IDonutChartOptions;\r\n  width: string;\r\n  height: string;\r\n  responsive: boolean;\r\n  chartClass: string;\r\n  chartStyle: Record<string, string>;\r\n  ariaLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "datasets",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IChartDataset[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "labels",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDonutChartOptions",
            "id": "interface-IDonutChartOptions-9db37680aa6b35486fdb889d32461359c591bde548094f986aef0552643d1da03c9f95f0ca7becbf5543f9a80484686eec31229c8e9547701a009c09734beead",
            "file": "src/app/shared/types/donut-chart.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IChartDataset {\r\n  data: number[];\r\n  backgroundColor: string[];\r\n  hoverBackgroundColor?: string[];\r\n  label?: string;\r\n}\r\n\r\nexport interface IDonutChartData {\r\n  labels: string[];\r\n  datasets: IChartDataset[];\r\n}\r\n\r\nexport interface IDonutChartOptions {\r\n  cutout?: string;\r\n  plugins?: {\r\n    legend?: {\r\n      labels?: {\r\n        color?: string;\r\n      };\r\n      position?: 'top' | 'bottom' | 'left' | 'right';\r\n    };\r\n    title?: {\r\n      display?: boolean;\r\n      text?: string;\r\n      color?: string;\r\n      font?: {\r\n        size?: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nexport interface IDonutChartProps {\r\n  data: IDonutChartData;\r\n  options: IDonutChartOptions;\r\n  width: string;\r\n  height: string;\r\n  responsive: boolean;\r\n  chartClass: string;\r\n  chartStyle: Record<string, string>;\r\n  ariaLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "cutout",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "plugins",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "literal type",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDonutChartProps",
            "id": "interface-IDonutChartProps-9db37680aa6b35486fdb889d32461359c591bde548094f986aef0552643d1da03c9f95f0ca7becbf5543f9a80484686eec31229c8e9547701a009c09734beead",
            "file": "src/app/shared/types/donut-chart.type.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IChartDataset {\r\n  data: number[];\r\n  backgroundColor: string[];\r\n  hoverBackgroundColor?: string[];\r\n  label?: string;\r\n}\r\n\r\nexport interface IDonutChartData {\r\n  labels: string[];\r\n  datasets: IChartDataset[];\r\n}\r\n\r\nexport interface IDonutChartOptions {\r\n  cutout?: string;\r\n  plugins?: {\r\n    legend?: {\r\n      labels?: {\r\n        color?: string;\r\n      };\r\n      position?: 'top' | 'bottom' | 'left' | 'right';\r\n    };\r\n    title?: {\r\n      display?: boolean;\r\n      text?: string;\r\n      color?: string;\r\n      font?: {\r\n        size?: number;\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\nexport interface IDonutChartProps {\r\n  data: IDonutChartData;\r\n  options: IDonutChartOptions;\r\n  width: string;\r\n  height: string;\r\n  responsive: boolean;\r\n  chartClass: string;\r\n  chartStyle: Record<string, string>;\r\n  ariaLabel: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "chartClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "chartStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDonutChartData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDonutChartOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "responsive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IEditorProps",
            "id": "interface-IEditorProps-0d9b5cbd036a3791b3a27899ff20503f5b583c0606da036d1000edde4eb478efb9fa1dadea258ed48de107cb0cbd0dbaede306747bb6928c1c96bbe7db818765",
            "file": "src/app/shared/types/editor.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IEditorProps {\r\n  style?: Record<string, string>;\r\n  styleClass?: string;\r\n  placeholder?: string;\r\n  formats?: string[];\r\n  modules?: Record<string, unknown>;\r\n  readOnly?: boolean;\r\n}\r\n\r\nexport interface ITextChangeEvent {\r\n  htmlValue: string;\r\n  textValue: string;\r\n  delta: unknown;\r\n  source: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "formats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | >",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFile",
            "id": "interface-IFile-763c282a2a5d07593973eb007a828e56b5dfb9db5e3ca4ea6eccecfe22aa2b5cdd0dc53dd73add60e64fe34e47515aeb0ec0024805661eb181b9c73d16c1ffce",
            "file": "src/app/core/_models/file.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFile {\r\n  id: string;\r\n  fileName: string;\r\n  originalFileName: string;\r\n  contentType: string;\r\n  size: number;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface IFileList {\r\n  files: IFile[];\r\n}\r\n",
            "properties": [
                {
                    "name": "contentType",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "createdAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "originalFileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileEditRequestDto",
            "id": "interface-IFileEditRequestDto-2ffccc63d239826539f2e42f84483c6b46e3d25af813fc467d0e021daa5dddc518f8413146571bf6af3520ac53a1289f3dbab7edefb1a0c56628d44a99f32222",
            "file": "src/app/core/_models/DTOs/fileDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IFile } from '../file.model';\r\n\r\nexport interface IFileListResponseDto {\r\n  content: IFile[];\r\n  pageable: IPageableFileResponseDto;\r\n}\r\n\r\ninterface IPageableFileResponseDto {\r\n  totalElements: number;\r\n  pageNumber: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n  hasNext: boolean;\r\n  hasPrevious: boolean;\r\n}\r\n\r\nexport interface IFileEditRequestDto {\r\n  fileName: string;\r\n}\r\n\r\nexport interface IFileStatsDto {\r\n  totalSizeBytes: number;\r\n  totalSizeGB: number;\r\n  maxSizeGB: number;\r\n  minSizeGB: number;\r\n  usagePercentages: number;\r\n  totalFiles: number;\r\n  hasAvailableStorage: boolean;\r\n  availableSizeBytes: number;\r\n  availableSizeGB: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "fileName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileItem",
            "id": "interface-IFileItem-f23a8bcfdf9dc7b6063bede4651d731f053121bdfc3d80d72fd820314d474126d42d5c548aa735bae220bb9de82a42548372754323a6d66e68f8cac2b66c0b68",
            "file": "src/app/shared/types/file-type.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\r\n\r\nexport type Position = 'top' | 'bottom' | 'both';\r\n\r\nexport interface IFileItem {\r\n  id?: string;\r\n  name: string;\r\n  type: string;\r\n  size: number;\r\n  lastModified: Date;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IFileTableProps {\r\n  files: IFileItem[];\r\n  enablePagination: boolean;\r\n  rowsPerPage: number;\r\n  showActions: boolean;\r\n  showSearchBar: boolean;\r\n  showActionButtons: boolean;\r\n  defaultSortField: string;\r\n  defaultSortOrder: number;\r\n  loading: boolean;\r\n  totalRecords: number;\r\n  paginatorPosition: Position;\r\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\r\n  fileAction: EventEmitter<{ action: string; file: IFileItem }>;\r\n}\r\n",
            "properties": [
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "lastModified",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileList",
            "id": "interface-IFileList-763c282a2a5d07593973eb007a828e56b5dfb9db5e3ca4ea6eccecfe22aa2b5cdd0dc53dd73add60e64fe34e47515aeb0ec0024805661eb181b9c73d16c1ffce",
            "file": "src/app/core/_models/file.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IFile {\r\n  id: string;\r\n  fileName: string;\r\n  originalFileName: string;\r\n  contentType: string;\r\n  size: number;\r\n  createdAt: string;\r\n}\r\n\r\nexport interface IFileList {\r\n  files: IFile[];\r\n}\r\n",
            "properties": [
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFile[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileListResponseDto",
            "id": "interface-IFileListResponseDto-2ffccc63d239826539f2e42f84483c6b46e3d25af813fc467d0e021daa5dddc518f8413146571bf6af3520ac53a1289f3dbab7edefb1a0c56628d44a99f32222",
            "file": "src/app/core/_models/DTOs/fileDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IFile } from '../file.model';\r\n\r\nexport interface IFileListResponseDto {\r\n  content: IFile[];\r\n  pageable: IPageableFileResponseDto;\r\n}\r\n\r\ninterface IPageableFileResponseDto {\r\n  totalElements: number;\r\n  pageNumber: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n  hasNext: boolean;\r\n  hasPrevious: boolean;\r\n}\r\n\r\nexport interface IFileEditRequestDto {\r\n  fileName: string;\r\n}\r\n\r\nexport interface IFileStatsDto {\r\n  totalSizeBytes: number;\r\n  totalSizeGB: number;\r\n  maxSizeGB: number;\r\n  minSizeGB: number;\r\n  usagePercentages: number;\r\n  totalFiles: number;\r\n  hasAvailableStorage: boolean;\r\n  availableSizeBytes: number;\r\n  availableSizeGB: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "content",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFile[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pageable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPageableFileResponseDto",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileStatsDto",
            "id": "interface-IFileStatsDto-2ffccc63d239826539f2e42f84483c6b46e3d25af813fc467d0e021daa5dddc518f8413146571bf6af3520ac53a1289f3dbab7edefb1a0c56628d44a99f32222",
            "file": "src/app/core/_models/DTOs/fileDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IFile } from '../file.model';\r\n\r\nexport interface IFileListResponseDto {\r\n  content: IFile[];\r\n  pageable: IPageableFileResponseDto;\r\n}\r\n\r\ninterface IPageableFileResponseDto {\r\n  totalElements: number;\r\n  pageNumber: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n  hasNext: boolean;\r\n  hasPrevious: boolean;\r\n}\r\n\r\nexport interface IFileEditRequestDto {\r\n  fileName: string;\r\n}\r\n\r\nexport interface IFileStatsDto {\r\n  totalSizeBytes: number;\r\n  totalSizeGB: number;\r\n  maxSizeGB: number;\r\n  minSizeGB: number;\r\n  usagePercentages: number;\r\n  totalFiles: number;\r\n  hasAvailableStorage: boolean;\r\n  availableSizeBytes: number;\r\n  availableSizeGB: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "availableSizeBytes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "availableSizeGB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "hasAvailableStorage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "maxSizeGB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "minSizeGB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "totalFiles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "totalSizeBytes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "totalSizeGB",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "usagePercentages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileTableProps",
            "id": "interface-IFileTableProps-f23a8bcfdf9dc7b6063bede4651d731f053121bdfc3d80d72fd820314d474126d42d5c548aa735bae220bb9de82a42548372754323a6d66e68f8cac2b66c0b68",
            "file": "src/app/shared/types/file-type.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\r\n\r\nexport type Position = 'top' | 'bottom' | 'both';\r\n\r\nexport interface IFileItem {\r\n  id?: string;\r\n  name: string;\r\n  type: string;\r\n  size: number;\r\n  lastModified: Date;\r\n  icon?: string;\r\n}\r\n\r\nexport interface IFileTableProps {\r\n  files: IFileItem[];\r\n  enablePagination: boolean;\r\n  rowsPerPage: number;\r\n  showActions: boolean;\r\n  showSearchBar: boolean;\r\n  showActionButtons: boolean;\r\n  defaultSortField: string;\r\n  defaultSortOrder: number;\r\n  loading: boolean;\r\n  totalRecords: number;\r\n  paginatorPosition: Position;\r\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\r\n  fileAction: EventEmitter<{ action: string; file: IFileItem }>;\r\n}\r\n",
            "properties": [
                {
                    "name": "defaultSortField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "defaultSortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "enablePagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "fileAction",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFileItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "onPageChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "paginatorPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Position",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "rowsPerPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "showActionButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "showActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "showSearchBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileUploadProps",
            "id": "interface-IFileUploadProps-92be2621784adf3f654d328aca6ce0724ea299ff6937de8cf0d5c00a3755041a98ad0f90bb4dd5181e5fd9d8510e5f3df6c2bf5eb53ef531baeab821fecfdaca",
            "file": "src/app/shared/types/fileUploader.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpEvent } from '@angular/common/http';\r\n\r\nexport type IFileUploadMode = 'basic' | 'advanced';\r\n\r\nexport interface IFileUploadProps {\r\n  url: string;\r\n  multiple: boolean;\r\n  accept: string;\r\n  maxFileSize: number;\r\n  mode: IFileUploadMode;\r\n  emptyMessage: string;\r\n  name: string;\r\n  auto?: boolean;\r\n  showCancelButton?: boolean;\r\n  showUploadButton?: boolean;\r\n  chooseLabel: string;\r\n  uploadLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nexport interface IUploadEvent {\r\n  originalEvent: HttpEvent<unknown>;\r\n  files: File[];\r\n}\r\n",
            "properties": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "auto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "cancelLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "chooseLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "emptyMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "maxFileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFileUploadMode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "showCancelButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "showUploadButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "uploadLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFooterProps",
            "id": "interface-IFooterProps-206d4f552d7f8d3a0ec6eaddb0e03c289a66e66df7b951ff317618d790de4588d1b1130ac111da46e30b89ff46401f36285a06861d67995b580c53b37544313f",
            "file": "src/app/shared/types/footer.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IMenuItem } from './navbar.types';\r\n\r\nexport interface IFooterProps {\r\n  logo?: string;\r\n  title?: string;\r\n  links?: IMenuItem[];\r\n  socialLinks?: IMenuItem[];\r\n  customClass?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "socialLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IImageProps",
            "id": "interface-IImageProps-b1fc8733e2c2b6e151d6b1a3ea19c9c71fdd8e1a8fefa89dc4e17a1d4bcabc21907d9f8add71ef5b91e706485ec00c20cae1971ad9d35be3b810fa7fa6393f4c",
            "file": "src/app/shared/types/image.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IImageProps {\r\n  src: string;\r\n  alt?: string;\r\n  width?: string;\r\n  height?: string;\r\n  preview?: boolean;\r\n  imageClass?: string;\r\n  imageStyle?: Record<string, string>;\r\n  appendTo?: string | HTMLElement;\r\n}\r\n",
            "properties": [
                {
                    "name": "alt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "appendTo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string | HTMLElement",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "imageClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "imageStyle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "preview",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "src",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IInfoModalProps",
            "id": "interface-IInfoModalProps-a5b63b5671f0df9180ebe000d908586322761f33c5e2f38a52de96860858fbc18088c8a2697ca59c268cefd245de11fc85f58d6e13cdac1718bd59a6ca7f9b2e",
            "file": "src/app/shared/types/modal.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IConfirmModalProps {\r\n  header: string;\r\n  visible: boolean;\r\n  message: string;\r\n  yesLabel: string;\r\n  noLabel: string;\r\n  onYes: () => void;\r\n  onNo: () => void;\r\n}\r\n\r\nexport interface IInfoModalProps {\r\n  header: string;\r\n  visible: boolean;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IInputProps",
            "id": "interface-IInputProps-167bee3c41b64d11565e2298092d3cf13d7c8e440607b38dc65b0f72d5856491a6857d06805fc14b57b49ef24dcce2a78b3e45be70b12be0f2ada97cb096cf6a",
            "file": "src/app/shared/types/input.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { IAutocompletePersonalInfo } from './auto-complete.types';\r\n\r\nexport type IInputTypes = 'text' | 'number' | 'email' | 'password' | 'tel' | 'url';\r\n\r\nexport type IInputIcons =\r\n  | 'user'\r\n  | 'map'\r\n  | 'clock'\r\n  | 'star'\r\n  | 'check'\r\n  | 'times'\r\n  | 'shopping-cart'\r\n  | 'search';\r\n\r\nexport interface IInputProps {\r\n  label?: string;\r\n  placeholder?: string;\r\n  type?: IInputTypes;\r\n  required?: boolean;\r\n  errorMessage?: string;\r\n  prefixIcon?: IInputIcons;\r\n  prefixText?: string;\r\n  suffixIcon?: IInputIcons;\r\n  suffixText?: string;\r\n  inavlid?: boolean;\r\n  autocomplete: IAutocompletePersonalInfo;\r\n  formControl: FormControl;\r\n}\r\n",
            "properties": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAutocompletePersonalInfo",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "inavlid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "prefixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IInputIcons",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "prefixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IInputIcons",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "suffixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IInputTypes",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IKarmelki",
            "id": "interface-IKarmelki-c59700bc20c6fe82b0e66ba4b2e70b6524c6aae30c8d9b3518daf2fad2c6a63bab838e4938d8440278abbc59833a1d9f66902ec541422c010c23385683630e8f",
            "file": "src/app/core/_models/karmelki.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IKarmelki {\r\n  id?: string;\r\n  name: string;\r\n  count: number;\r\n  price: number;\r\n  isZiemniak: boolean;\r\n  arrivalDate: Date;\r\n}\r\n\r\nexport interface IKarmelkiResponse {\r\n  items: IKarmelki[];\r\n  totalCount: number;\r\n  pageNumber: number;\r\n  pageSize: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "arrivalDate",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Date",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "count",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "isZiemniak",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "price",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IKarmelkiResponse",
            "id": "interface-IKarmelkiResponse-c59700bc20c6fe82b0e66ba4b2e70b6524c6aae30c8d9b3518daf2fad2c6a63bab838e4938d8440278abbc59833a1d9f66902ec541422c010c23385683630e8f",
            "file": "src/app/core/_models/karmelki.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IKarmelki {\r\n  id?: string;\r\n  name: string;\r\n  count: number;\r\n  price: number;\r\n  isZiemniak: boolean;\r\n  arrivalDate: Date;\r\n}\r\n\r\nexport interface IKarmelkiResponse {\r\n  items: IKarmelki[];\r\n  totalCount: number;\r\n  pageNumber: number;\r\n  pageSize: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IKarmelki[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "Ilang",
            "id": "interface-Ilang-c1b049671bbd3931ab470907932cfe41f6a65a91f82ac5749f6c9019f06b3ff867915474bc951a83a269934ddcf735f5f2180cb0580954e26461db7dbf4d6da2",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuItem {\r\n  label: string;\r\n  icon?: string;\r\n  routerLink?: string;\r\n  url?: string;\r\n  target?: string;\r\n  command?: () => void;\r\n  queryParams?: Record<string, string>;\r\n  items?: IMenuItem[];\r\n  visible?: boolean;\r\n  disabled?: boolean;\r\n  expanded?: boolean;\r\n}\r\nexport interface IUser {\r\n  name: string;\r\n  avatar?: string;\r\n  id?: string;\r\n  role?: string;\r\n}\r\n\r\nexport interface Ilang {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nexport type ILangs = Ilang[];\r\n\r\nexport interface INavbarProps {\r\n  title: string;\r\n  logo?: string;\r\n  commonMenuItems: IMenuItem[];\r\n  authMenuItems: IMenuItem[];\r\n  nonAuthMenuItems: IMenuItem[];\r\n  sticky?: boolean;\r\n  customClass?: string;\r\n  showSwitchTheme?: boolean;\r\n  showSwitchLang?: boolean;\r\n  langs: ILangs;\r\n  isAuthenticated?: boolean;\r\n  user?: IUser;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ILanguage",
            "id": "interface-ILanguage-98d6a3d7ecee0f2113e0f7a9e26f769ae44fb56f221c01efaff0582d2b7637e2cee8c6ce16802d04b8e7f6331fdd2f055273ffa02fe6b90f32080f663035767e",
            "file": "src/app/core/_models/language.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILanguage {\r\n  label: string;\r\n  value: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ILoginDto",
            "id": "interface-ILoginDto-110dd943c0a8c7cc549b76cb7f3aafef625054e81ca48086569cd308429609b7a15f8a83f0d7848a86d8fd1906a463571d26d572287239a76a4ea016981a85a4",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAccessToken } from '../tokens.model';\r\n\r\nexport interface ILoginDto {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface IRegisterDto extends ILoginDto {\r\n  confirmPassword: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n}\r\n\r\nexport interface IAuthTokensResponseDto {\r\n  accessToken: IAccessToken;\r\n  refreshToken: string;\r\n  expiresAt: string;\r\n}\r\n\r\nexport interface IAuthRefreshTokensRequestDto {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface IRevokeTokenRequestDto {\r\n  refreshToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IMenuItem",
            "id": "interface-IMenuItem-c1b049671bbd3931ab470907932cfe41f6a65a91f82ac5749f6c9019f06b3ff867915474bc951a83a269934ddcf735f5f2180cb0580954e26461db7dbf4d6da2",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuItem {\r\n  label: string;\r\n  icon?: string;\r\n  routerLink?: string;\r\n  url?: string;\r\n  target?: string;\r\n  command?: () => void;\r\n  queryParams?: Record<string, string>;\r\n  items?: IMenuItem[];\r\n  visible?: boolean;\r\n  disabled?: boolean;\r\n  expanded?: boolean;\r\n}\r\nexport interface IUser {\r\n  name: string;\r\n  avatar?: string;\r\n  id?: string;\r\n  role?: string;\r\n}\r\n\r\nexport interface Ilang {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nexport type ILangs = Ilang[];\r\n\r\nexport interface INavbarProps {\r\n  title: string;\r\n  logo?: string;\r\n  commonMenuItems: IMenuItem[];\r\n  authMenuItems: IMenuItem[];\r\n  nonAuthMenuItems: IMenuItem[];\r\n  sticky?: boolean;\r\n  customClass?: string;\r\n  showSwitchTheme?: boolean;\r\n  showSwitchLang?: boolean;\r\n  langs: ILangs;\r\n  isAuthenticated?: boolean;\r\n  user?: IUser;\r\n}\r\n",
            "properties": [
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "INavbarProps",
            "id": "interface-INavbarProps-c1b049671bbd3931ab470907932cfe41f6a65a91f82ac5749f6c9019f06b3ff867915474bc951a83a269934ddcf735f5f2180cb0580954e26461db7dbf4d6da2",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuItem {\r\n  label: string;\r\n  icon?: string;\r\n  routerLink?: string;\r\n  url?: string;\r\n  target?: string;\r\n  command?: () => void;\r\n  queryParams?: Record<string, string>;\r\n  items?: IMenuItem[];\r\n  visible?: boolean;\r\n  disabled?: boolean;\r\n  expanded?: boolean;\r\n}\r\nexport interface IUser {\r\n  name: string;\r\n  avatar?: string;\r\n  id?: string;\r\n  role?: string;\r\n}\r\n\r\nexport interface Ilang {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nexport type ILangs = Ilang[];\r\n\r\nexport interface INavbarProps {\r\n  title: string;\r\n  logo?: string;\r\n  commonMenuItems: IMenuItem[];\r\n  authMenuItems: IMenuItem[];\r\n  nonAuthMenuItems: IMenuItem[];\r\n  sticky?: boolean;\r\n  customClass?: string;\r\n  showSwitchTheme?: boolean;\r\n  showSwitchLang?: boolean;\r\n  langs: ILangs;\r\n  isAuthenticated?: boolean;\r\n  user?: IUser;\r\n}\r\n",
            "properties": [
                {
                    "name": "authMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "commonMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "isAuthenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "langs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILangs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "nonAuthMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "showSwitchLang",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "showSwitchTheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "sticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IUser",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 40
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPageableFileResponseDto",
            "id": "interface-IPageableFileResponseDto-2ffccc63d239826539f2e42f84483c6b46e3d25af813fc467d0e021daa5dddc518f8413146571bf6af3520ac53a1289f3dbab7edefb1a0c56628d44a99f32222",
            "file": "src/app/core/_models/DTOs/fileDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IFile } from '../file.model';\r\n\r\nexport interface IFileListResponseDto {\r\n  content: IFile[];\r\n  pageable: IPageableFileResponseDto;\r\n}\r\n\r\ninterface IPageableFileResponseDto {\r\n  totalElements: number;\r\n  pageNumber: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n  hasNext: boolean;\r\n  hasPrevious: boolean;\r\n}\r\n\r\nexport interface IFileEditRequestDto {\r\n  fileName: string;\r\n}\r\n\r\nexport interface IFileStatsDto {\r\n  totalSizeBytes: number;\r\n  totalSizeGB: number;\r\n  maxSizeGB: number;\r\n  minSizeGB: number;\r\n  usagePercentages: number;\r\n  totalFiles: number;\r\n  hasAvailableStorage: boolean;\r\n  availableSizeBytes: number;\r\n  availableSizeGB: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "hasNext",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "hasPrevious",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalElements",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "totalPages",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPagedQueryParams",
            "id": "interface-IPagedQueryParams-8f0cd356ddcd6ea370b9cbdf27361d5a20796f7d669e06ce583f1404a37df7c24ade6133c4a169373e73a803cefadf2390a5303ff8989f4785702a4413ac1cf7",
            "file": "src/app/core/_models/paged-query-params.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPagedQueryParams {\r\n  pageNumber: number;\r\n  pageSize: number;\r\n  filter?: string;\r\n  sortBy?: string;\r\n  sortDescending?: boolean;\r\n  includeInactive?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "includeInactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "sortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sortDescending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPagination",
            "id": "interface-IPagination-d091359c03c56736d61b29b46ade31a5935a31e75cb3980ec4910764525e32def76a004d7b119a5242b2e93870ef883f528379021dd573aef76029a73acf9e84",
            "file": "src/app/core/_models/base-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBaseResponseWithoutData {\r\n  success: boolean;\r\n  statusCode: number;\r\n  message: string;\r\n  errors?: string[];\r\n}\r\n\r\nexport interface IBaseResponse<T> extends IBaseResponseWithoutData {\r\n  data: T;\r\n  pagination?: IPagination;\r\n}\r\n\r\ninterface IPagination {\r\n  pageSize: number;\r\n  pageNumber: number;\r\n  totalCount: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPasswordInputProps",
            "id": "interface-IPasswordInputProps-7e6352c421b89a7a8398435b7a29bfa4e890aeed043f65135174720721da2697ce90b8f19fb96b5cd818ad51a4352a24de8ebc1a8e40115fff20431b55f53566",
            "file": "src/app/shared/types/password-input.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\nimport { IAutocompletePassword } from './auto-complete.types';\r\n\r\nexport type ISize = 'small' | 'large' | undefined;\r\n\r\nexport type IVariant = 'filled' | 'outlined';\r\n\r\nexport interface IPasswordInputProps {\r\n  label?: string;\r\n  placeholder?: string;\r\n  required?: boolean;\r\n  invalid?: boolean;\r\n  errorMessage?: string;\r\n  feedback?: boolean;\r\n  promptLabel?: string;\r\n  weakLabel?: string;\r\n  mediumLabel?: string;\r\n  strongLabel?: string;\r\n  // size?: Size;\r\n  variant: IVariant;\r\n  inavlid?: boolean;\r\n  formControl: FormControl;\r\n  autocomplete: IAutocompletePassword;\r\n}\r\n",
            "properties": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAutocompletePassword",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "feedback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "inavlid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mediumLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "promptLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "strongLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IVariant",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "weakLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IQueryParams",
            "id": "interface-IQueryParams-3c1191acc2b8c432ae31ab1a2f181c6f3b94c671c3e1f787f778798b3a89ff4b036d716f363faf355566bc0ffd8bd72b0ccb337b2d198a3e6e7ce301fa54ed32",
            "file": "src/app/core/_models/query-params.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nexport interface IQueryParams {\r\n  params?: HttpParams;\r\n  headers?: HttpHeaders;\r\n}\r\n",
            "properties": [
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpHeaders",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParams",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IRefreshToken",
            "id": "interface-IRefreshToken-d9bf752bfc1f8619fc45002d227b220b24824152b674058b397c64311de73aef0a95e7c15af80f469e2c2eadcaf72a71afe5f304aca4264a0c604a3874c44e71",
            "file": "src/app/core/_models/tokens.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITokens {\r\n  accessToken: IAccessToken;\r\n  refreshToken: IRefreshToken;\r\n}\r\n\r\nexport type IAccessToken = string;\r\nexport interface IRefreshToken {\r\n  refreshToken: string;\r\n  expiresAt: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "expiresAt",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IRegisterDto",
            "id": "interface-IRegisterDto-110dd943c0a8c7cc549b76cb7f3aafef625054e81ca48086569cd308429609b7a15f8a83f0d7848a86d8fd1906a463571d26d572287239a76a4ea016981a85a4",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAccessToken } from '../tokens.model';\r\n\r\nexport interface ILoginDto {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface IRegisterDto extends ILoginDto {\r\n  confirmPassword: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n}\r\n\r\nexport interface IAuthTokensResponseDto {\r\n  accessToken: IAccessToken;\r\n  refreshToken: string;\r\n  expiresAt: string;\r\n}\r\n\r\nexport interface IAuthRefreshTokensRequestDto {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface IRevokeTokenRequestDto {\r\n  refreshToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "ILoginDto"
            ]
        },
        {
            "name": "IReusableModalProps",
            "id": "interface-IReusableModalProps-b1784014f58c679cf631b2280d95f27ab93e74ae0be809a52d3f746a39537e46a5bc9c07c38a16e3a48c66843cc90f980ba13243c221582129510cb3926b6612",
            "file": "src/app/shared/types/resuable-modal.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IReusableModalProps {\r\n  header?: string;\r\n  visible?: boolean;\r\n  draggable?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "draggable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IRevokeTokenRequestDto",
            "id": "interface-IRevokeTokenRequestDto-110dd943c0a8c7cc549b76cb7f3aafef625054e81ca48086569cd308429609b7a15f8a83f0d7848a86d8fd1906a463571d26d572287239a76a4ea016981a85a4",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { IAccessToken } from '../tokens.model';\r\n\r\nexport interface ILoginDto {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface IRegisterDto extends ILoginDto {\r\n  confirmPassword: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n}\r\n\r\nexport interface IAuthTokensResponseDto {\r\n  accessToken: IAccessToken;\r\n  refreshToken: string;\r\n  expiresAt: string;\r\n}\r\n\r\nexport interface IAuthRefreshTokensRequestDto {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n\r\nexport interface IRevokeTokenRequestDto {\r\n  refreshToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISelectOption",
            "id": "interface-ISelectOption-753c5b2834513bbe67483f980fdeb672f905e8a588a7d27d7f14cbf54dc5573a564e2e70f9fba0e77c83188f9c2e2e9e1e49fdcb41ed4ccd0d75152c72d8351f",
            "file": "src/app/shared/types/select.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface ISelectOption {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nexport type ISelectOptions = ISelectOption[];\r\n\r\nexport type IVariant = 'filled' | 'outlined';\r\n\r\nexport type ISize = 'small' | 'large';\r\n\r\nexport type ILabelVariant = 'over' | 'in' | 'on';\r\n\r\nexport interface ISelectProps<T = ISelectOption> {\r\n  formControl: FormControl;\r\n  checkmark: boolean;\r\n  showClear: boolean;\r\n  editable: boolean;\r\n  loading: boolean;\r\n  options?: T[];\r\n  optionLabel?: string;\r\n  optionValue?: string;\r\n  placeholder?: string;\r\n  required?: boolean;\r\n  filter?: boolean;\r\n  filterBy?: string;\r\n  virtualScroll?: boolean;\r\n  virtualScrollItemSize?: number;\r\n  value?: T;\r\n  variant?: IVariant;\r\n  size?: ISize;\r\n  label?: string;\r\n  labelVariant?: ILabelVariant;\r\n  inputId?: string;\r\n  inavlid?: boolean;\r\n  errorMessage?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ISelectProps",
            "id": "interface-ISelectProps-753c5b2834513bbe67483f980fdeb672f905e8a588a7d27d7f14cbf54dc5573a564e2e70f9fba0e77c83188f9c2e2e9e1e49fdcb41ed4ccd0d75152c72d8351f",
            "file": "src/app/shared/types/select.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface ISelectOption {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nexport type ISelectOptions = ISelectOption[];\r\n\r\nexport type IVariant = 'filled' | 'outlined';\r\n\r\nexport type ISize = 'small' | 'large';\r\n\r\nexport type ILabelVariant = 'over' | 'in' | 'on';\r\n\r\nexport interface ISelectProps<T = ISelectOption> {\r\n  formControl: FormControl;\r\n  checkmark: boolean;\r\n  showClear: boolean;\r\n  editable: boolean;\r\n  loading: boolean;\r\n  options?: T[];\r\n  optionLabel?: string;\r\n  optionValue?: string;\r\n  placeholder?: string;\r\n  required?: boolean;\r\n  filter?: boolean;\r\n  filterBy?: string;\r\n  virtualScroll?: boolean;\r\n  virtualScrollItemSize?: number;\r\n  value?: T;\r\n  variant?: IVariant;\r\n  size?: ISize;\r\n  label?: string;\r\n  labelVariant?: ILabelVariant;\r\n  inputId?: string;\r\n  inavlid?: boolean;\r\n  errorMessage?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "checkmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "editable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "filterBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "inavlid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "labelVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILabelVariant",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "showClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ISize",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IVariant",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "virtualScroll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "virtualScrollItemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITableActionButton",
            "id": "interface-ITableActionButton-8d8ca68975d68095c01c327fae16f976e9171c334c06a26d0617369a2a18985ce5dc9785d672b6ea87589dafce41bf2842df89c2e0635afd4bfc8f4fed414bbc",
            "file": "src/app/shared/types/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\r\nimport { MenuItem } from 'primeng/api';\r\n\r\nexport type Position = 'top' | 'bottom' | 'both';\r\n\r\nexport interface ITableColumn {\r\n  field: string;\r\n  header: string;\r\n}\r\n\r\nexport interface ITableActionButton {\r\n  icon: string;\r\n  severity?: string;\r\n  ariaLabel: string;\r\n  action: string;\r\n}\r\n\r\nexport interface IContextMenuAction {\r\n  originalEvent: Event;\r\n  item: MenuItem;\r\n}\r\n\r\nexport interface ITableProps<T> {\r\n  cols: ITableColumn[];\r\n  data: T[];\r\n  headerTitle?: string;\r\n  footerTitle?: string;\r\n  showGridlines?: boolean;\r\n  stripedRows?: boolean;\r\n  rowsPerPage?: number;\r\n  rowsPerPageOptions?: number[];\r\n  enablePaginator?: boolean;\r\n  enableResizableColumns?: boolean;\r\n  minWidth?: string;\r\n  showActions: boolean;\r\n  showSearchBar: boolean;\r\n  showActionButtons: boolean;\r\n  defaultSortField: string;\r\n  defaultSortOrder: number;\r\n  loading: boolean;\r\n  totalRecords: number;\r\n  paginatorPosition: Position;\r\n  contextMenuItems: MenuItem[];\r\n  actionButtons: ITableActionButton[];\r\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\r\n  onActionEvent: EventEmitter<{ action: string; item: T }>;\r\n  onRefreshEvent: EventEmitter<void>;\r\n  onContextMenuActionEvent: EventEmitter<{ action: Event; item: T }>;\r\n}\r\n",
            "properties": [
                {
                    "name": "action",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITableColumn",
            "id": "interface-ITableColumn-8d8ca68975d68095c01c327fae16f976e9171c334c06a26d0617369a2a18985ce5dc9785d672b6ea87589dafce41bf2842df89c2e0635afd4bfc8f4fed414bbc",
            "file": "src/app/shared/types/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\r\nimport { MenuItem } from 'primeng/api';\r\n\r\nexport type Position = 'top' | 'bottom' | 'both';\r\n\r\nexport interface ITableColumn {\r\n  field: string;\r\n  header: string;\r\n}\r\n\r\nexport interface ITableActionButton {\r\n  icon: string;\r\n  severity?: string;\r\n  ariaLabel: string;\r\n  action: string;\r\n}\r\n\r\nexport interface IContextMenuAction {\r\n  originalEvent: Event;\r\n  item: MenuItem;\r\n}\r\n\r\nexport interface ITableProps<T> {\r\n  cols: ITableColumn[];\r\n  data: T[];\r\n  headerTitle?: string;\r\n  footerTitle?: string;\r\n  showGridlines?: boolean;\r\n  stripedRows?: boolean;\r\n  rowsPerPage?: number;\r\n  rowsPerPageOptions?: number[];\r\n  enablePaginator?: boolean;\r\n  enableResizableColumns?: boolean;\r\n  minWidth?: string;\r\n  showActions: boolean;\r\n  showSearchBar: boolean;\r\n  showActionButtons: boolean;\r\n  defaultSortField: string;\r\n  defaultSortOrder: number;\r\n  loading: boolean;\r\n  totalRecords: number;\r\n  paginatorPosition: Position;\r\n  contextMenuItems: MenuItem[];\r\n  actionButtons: ITableActionButton[];\r\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\r\n  onActionEvent: EventEmitter<{ action: string; item: T }>;\r\n  onRefreshEvent: EventEmitter<void>;\r\n  onContextMenuActionEvent: EventEmitter<{ action: Event; item: T }>;\r\n}\r\n",
            "properties": [
                {
                    "name": "field",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITableProps",
            "id": "interface-ITableProps-8d8ca68975d68095c01c327fae16f976e9171c334c06a26d0617369a2a18985ce5dc9785d672b6ea87589dafce41bf2842df89c2e0635afd4bfc8f4fed414bbc",
            "file": "src/app/shared/types/table.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { EventEmitter } from '@angular/core';\r\nimport { MenuItem } from 'primeng/api';\r\n\r\nexport type Position = 'top' | 'bottom' | 'both';\r\n\r\nexport interface ITableColumn {\r\n  field: string;\r\n  header: string;\r\n}\r\n\r\nexport interface ITableActionButton {\r\n  icon: string;\r\n  severity?: string;\r\n  ariaLabel: string;\r\n  action: string;\r\n}\r\n\r\nexport interface IContextMenuAction {\r\n  originalEvent: Event;\r\n  item: MenuItem;\r\n}\r\n\r\nexport interface ITableProps<T> {\r\n  cols: ITableColumn[];\r\n  data: T[];\r\n  headerTitle?: string;\r\n  footerTitle?: string;\r\n  showGridlines?: boolean;\r\n  stripedRows?: boolean;\r\n  rowsPerPage?: number;\r\n  rowsPerPageOptions?: number[];\r\n  enablePaginator?: boolean;\r\n  enableResizableColumns?: boolean;\r\n  minWidth?: string;\r\n  showActions: boolean;\r\n  showSearchBar: boolean;\r\n  showActionButtons: boolean;\r\n  defaultSortField: string;\r\n  defaultSortOrder: number;\r\n  loading: boolean;\r\n  totalRecords: number;\r\n  paginatorPosition: Position;\r\n  contextMenuItems: MenuItem[];\r\n  actionButtons: ITableActionButton[];\r\n  onPageChange: EventEmitter<{ page: number; rows: number }>;\r\n  onActionEvent: EventEmitter<{ action: string; item: T }>;\r\n  onRefreshEvent: EventEmitter<void>;\r\n  onContextMenuActionEvent: EventEmitter<{ action: Event; item: T }>;\r\n}\r\n",
            "properties": [
                {
                    "name": "actionButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITableActionButton[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "cols",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ITableColumn[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "contextMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "defaultSortField",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "defaultSortOrder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "enablePaginator",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "enableResizableColumns",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "footerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "headerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "minWidth",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "onActionEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "onContextMenuActionEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "onPageChange",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<literal type>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "onRefreshEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "EventEmitter<void>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "paginatorPosition",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Position",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "rowsPerPage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "rowsPerPageOptions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showActionButtons",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "showActions",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "showGridlines",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "showSearchBar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "stripedRows",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "totalRecords",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITextChangeEvent",
            "id": "interface-ITextChangeEvent-0d9b5cbd036a3791b3a27899ff20503f5b583c0606da036d1000edde4eb478efb9fa1dadea258ed48de107cb0cbd0dbaede306747bb6928c1c96bbe7db818765",
            "file": "src/app/shared/types/editor.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IEditorProps {\r\n  style?: Record<string, string>;\r\n  styleClass?: string;\r\n  placeholder?: string;\r\n  formats?: string[];\r\n  modules?: Record<string, unknown>;\r\n  readOnly?: boolean;\r\n}\r\n\r\nexport interface ITextChangeEvent {\r\n  htmlValue: string;\r\n  textValue: string;\r\n  delta: unknown;\r\n  source: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "delta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "htmlValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "textValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IToggleSwitchProps",
            "id": "interface-IToggleSwitchProps-5a1f06104db142fed4032157ca660a2d08bb97c3e1f14d95fc6469aecac74de294f008dd1eb3dc5fdee3d7478118db08e7fa5b4e6a0ea7f9e13372137a7e16a0",
            "file": "src/app/shared/types/toogleSwitch.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface IToggleSwitchProps {\r\n  formControl?: FormControl;\r\n  iconOn?: string;\r\n  iconOff?: string;\r\n  invalid?: boolean;\r\n  errorMessage?: string;\r\n  required?: boolean;\r\n  label?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "iconOff",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "iconOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITokens",
            "id": "interface-ITokens-d9bf752bfc1f8619fc45002d227b220b24824152b674058b397c64311de73aef0a95e7c15af80f469e2c2eadcaf72a71afe5f304aca4264a0c604a3874c44e71",
            "file": "src/app/core/_models/tokens.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITokens {\r\n  accessToken: IAccessToken;\r\n  refreshToken: IRefreshToken;\r\n}\r\n\r\nexport type IAccessToken = string;\r\nexport interface IRefreshToken {\r\n  refreshToken: string;\r\n  expiresAt: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAccessToken",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IRefreshToken",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUploadEvent",
            "id": "interface-IUploadEvent-92be2621784adf3f654d328aca6ce0724ea299ff6937de8cf0d5c00a3755041a98ad0f90bb4dd5181e5fd9d8510e5f3df6c2bf5eb53ef531baeab821fecfdaca",
            "file": "src/app/shared/types/fileUploader.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpEvent } from '@angular/common/http';\r\n\r\nexport type IFileUploadMode = 'basic' | 'advanced';\r\n\r\nexport interface IFileUploadProps {\r\n  url: string;\r\n  multiple: boolean;\r\n  accept: string;\r\n  maxFileSize: number;\r\n  mode: IFileUploadMode;\r\n  emptyMessage: string;\r\n  name: string;\r\n  auto?: boolean;\r\n  showCancelButton?: boolean;\r\n  showUploadButton?: boolean;\r\n  chooseLabel: string;\r\n  uploadLabel: string;\r\n  cancelLabel: string;\r\n}\r\n\r\nexport interface IUploadEvent {\r\n  originalEvent: HttpEvent<unknown>;\r\n  files: File[];\r\n}\r\n",
            "properties": [
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpEvent<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUser",
            "id": "interface-IUser-c1b049671bbd3931ab470907932cfe41f6a65a91f82ac5749f6c9019f06b3ff867915474bc951a83a269934ddcf735f5f2180cb0580954e26461db7dbf4d6da2",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IMenuItem {\r\n  label: string;\r\n  icon?: string;\r\n  routerLink?: string;\r\n  url?: string;\r\n  target?: string;\r\n  command?: () => void;\r\n  queryParams?: Record<string, string>;\r\n  items?: IMenuItem[];\r\n  visible?: boolean;\r\n  disabled?: boolean;\r\n  expanded?: boolean;\r\n}\r\nexport interface IUser {\r\n  name: string;\r\n  avatar?: string;\r\n  id?: string;\r\n  role?: string;\r\n}\r\n\r\nexport interface Ilang {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nexport type ILangs = Ilang[];\r\n\r\nexport interface INavbarProps {\r\n  title: string;\r\n  logo?: string;\r\n  commonMenuItems: IMenuItem[];\r\n  authMenuItems: IMenuItem[];\r\n  nonAuthMenuItems: IMenuItem[];\r\n  sticky?: boolean;\r\n  customClass?: string;\r\n  showSwitchTheme?: boolean;\r\n  showSwitchLang?: boolean;\r\n  langs: ILangs;\r\n  isAuthenticated?: boolean;\r\n  user?: IUser;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginForm",
            "id": "interface-LoginForm-78b0dd8aca49907e2262a6578c4f26db3832ea210b15fa80c634c3bef7b950f8105851cb38641ea77150a04cd79585d3c21c5f8cfc27e0d725c36884eb657b6f",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n\r\nexport interface ExampleCrudForm {\r\n  id: FormControl<string>;\r\n  name: FormControl<string>;\r\n  count: FormControl<number>;\r\n  price: FormControl<number>;\r\n  isZiemniak: FormControl<boolean>;\r\n  arrivalDate: FormControl<Date>;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PasswdRecoveryForm",
            "id": "interface-PasswdRecoveryForm-78b0dd8aca49907e2262a6578c4f26db3832ea210b15fa80c634c3bef7b950f8105851cb38641ea77150a04cd79585d3c21c5f8cfc27e0d725c36884eb657b6f",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n\r\nexport interface ExampleCrudForm {\r\n  id: FormControl<string>;\r\n  name: FormControl<string>;\r\n  count: FormControl<number>;\r\n  price: FormControl<number>;\r\n  isZiemniak: FormControl<boolean>;\r\n  arrivalDate: FormControl<Date>;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PasswordsForm",
            "id": "interface-PasswordsForm-78b0dd8aca49907e2262a6578c4f26db3832ea210b15fa80c634c3bef7b950f8105851cb38641ea77150a04cd79585d3c21c5f8cfc27e0d725c36884eb657b6f",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n\r\nexport interface ExampleCrudForm {\r\n  id: FormControl<string>;\r\n  name: FormControl<string>;\r\n  count: FormControl<number>;\r\n  price: FormControl<number>;\r\n  isZiemniak: FormControl<boolean>;\r\n  arrivalDate: FormControl<Date>;\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "repeatedPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterForm",
            "id": "interface-RegisterForm-78b0dd8aca49907e2262a6578c4f26db3832ea210b15fa80c634c3bef7b950f8105851cb38641ea77150a04cd79585d3c21c5f8cfc27e0d725c36884eb657b6f",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n\r\nexport interface ExampleCrudForm {\r\n  id: FormControl<string>;\r\n  name: FormControl<string>;\r\n  count: FormControl<number>;\r\n  price: FormControl<number>;\r\n  isZiemniak: FormControl<boolean>;\r\n  arrivalDate: FormControl<Date>;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LoginForm"
            ]
        },
        {
            "name": "ThemeForm",
            "id": "interface-ThemeForm-78b0dd8aca49907e2262a6578c4f26db3832ea210b15fa80c634c3bef7b950f8105851cb38641ea77150a04cd79585d3c21c5f8cfc27e0d725c36884eb657b6f",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n\r\nexport interface ExampleCrudForm {\r\n  id: FormControl<string>;\r\n  name: FormControl<string>;\r\n  count: FormControl<number>;\r\n  price: FormControl<number>;\r\n  isZiemniak: FormControl<boolean>;\r\n  arrivalDate: FormControl<Date>;\r\n}\r\n",
            "properties": [
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-23c11020a2831beb3fa02ee911a75b64009c31bb46f73a01145c2560cb13b7f7e641105b678bd8fb01a5a199117001f3da4a78351d29d85d213ed7b82982091f",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\r\n  name: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-cea000a6f1821398d64333edf5b96843a7825d439c14d174940d3e5b5249dd5acfc8c4a6042cb6d684a841ea73d9e2179ec84c44eb8c4bc766bac368f5257178",
            "file": "src/app/core/_services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "isLogged",
                    "defaultValue": "signal<boolean>(this.isAuth())",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "requestFactory",
                    "defaultValue": "inject(RequestFactoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roleService",
                    "defaultValue": "inject(RoleService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "toastService",
                    "defaultValue": "inject(ToastService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "tokenService",
                    "defaultValue": "inject(TokenService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 99,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserEmail",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 138,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserName",
                    "args": [],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initRoles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 148,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 101,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "loginData",
                            "type": "ILoginDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IAuthTokensResponseDto>>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "loginData",
                            "type": "ILoginDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "registerData",
                            "type": "IRegisterDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IAuthTokensResponseDto>>",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registerData",
                            "type": "IRegisterDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable, signal } from '@angular/core';\r\nimport { RequestFactoryService } from '../httpRequestFactory/request-factory.service';\r\nimport { ApiEndpoints } from '../../../enums/api-endpoints.enum';\r\nimport { Observable, tap } from 'rxjs';\r\nimport { IBaseResponse, IBaseResponseWithoutData } from '../../_models/base-response.model';\r\nimport {\r\n  IAuthTokensResponseDto,\r\n  ILoginDto,\r\n  IRegisterDto,\r\n  IRevokeTokenRequestDto,\r\n} from '../../_models/DTOs/authDto.model';\r\nimport { TokenService } from '../token/token.service';\r\nimport { IAccessToken } from '../../_models/tokens.model';\r\nimport { Router } from '@angular/router';\r\nimport { ToastService } from '../../../shared/services/toast.service';\r\nimport { RoleService } from '../role/role.service';\r\nimport { RouterEnum } from '../../../enums/router.enum';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private requestFactory = inject(RequestFactoryService);\r\n  private tokenService = inject(TokenService);\r\n  private router = inject(Router);\r\n  private toastService = inject(ToastService);\r\n  private roleService = inject(RoleService);\r\n\r\n  public isLogged = signal<boolean>(this.isAuth());\r\n\r\n  constructor() {\r\n    this.initRoles();\r\n  }\r\n\r\n  signIn(loginData: ILoginDto): Observable<IBaseResponse<IAuthTokensResponseDto>> {\r\n    return this.requestFactory\r\n      .post<IAuthTokensResponseDto, ILoginDto>(ApiEndpoints.SIGN_IN, loginData)\r\n      .pipe(\r\n        tap((res: IBaseResponse<IAuthTokensResponseDto>) => {\r\n          if (res.success && res.data) {\r\n            this.tokenService.setTokens(res.data.accessToken, {\r\n              refreshToken: res.data.refreshToken,\r\n              expiresAt: res.data.expiresAt,\r\n            });\r\n            this.isLogged.set(true);\r\n            this.router.navigate(['/']);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  signUp(registerData: IRegisterDto): Observable<IBaseResponse<IAuthTokensResponseDto>> {\r\n    return this.requestFactory\r\n      .post<IAuthTokensResponseDto, IRegisterDto>(ApiEndpoints.SIGN_UP, registerData)\r\n      .pipe(\r\n        tap((res: IBaseResponse<IAuthTokensResponseDto>) => {\r\n          if (res.success && res.data) {\r\n            this.tokenService.setTokens(res.data.accessToken, {\r\n              refreshToken: res.data.refreshToken,\r\n              expiresAt: res.data.expiresAt,\r\n            });\r\n            this.isLogged.set(true);\r\n            this.router.navigate(['/']);\r\n          }\r\n        })\r\n      );\r\n  }\r\n\r\n  signOut(): void {\r\n    const refreshToken = this.tokenService.getRefreshToken();\r\n    if (!refreshToken) {\r\n      return;\r\n    }\r\n\r\n    this.requestFactory\r\n      .post<\r\n        IBaseResponseWithoutData,\r\n        IRevokeTokenRequestDto\r\n      >(ApiEndpoints.REVOKE_TOKEN, { refreshToken: refreshToken.refreshToken })\r\n      .subscribe({\r\n        next: res => {\r\n          if (res.success) {\r\n            this.tokenService.removeTokens();\r\n            this.isLogged.set(false);\r\n            this.toastService.showSuccess('Account', 'You have been logged out!');\r\n            this.router.navigate([RouterEnum.login]);\r\n          }\r\n        },\r\n        error: error => {\r\n          console.log(error);\r\n        },\r\n      });\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  resetPassword() {}\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  changePassword() {}\r\n\r\n  isAuth(): boolean {\r\n    const accessToken = this.tokenService.getAccessToken();\r\n    const refreshToken = this.tokenService.getRefreshToken();\r\n\r\n    if (!accessToken || !refreshToken) {\r\n      return false;\r\n    }\r\n\r\n    const isRefreshTokenValid = this.tokenService.validateRefreshToken(refreshToken);\r\n\r\n    if (isRefreshTokenValid) {\r\n      return true;\r\n    }\r\n\r\n    this.tokenService.removeTokens();\r\n    return false;\r\n  }\r\n\r\n  getUserId() {\r\n    const accessToken = this.tokenService.getAccessToken();\r\n    if (accessToken !== null) {\r\n      const decodedToken = this.tokenService.decodeToken(accessToken);\r\n      return decodedToken ? decodedToken.sub : null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  getUserName() {\r\n    const accessToken = this.tokenService.getAccessToken();\r\n    if (accessToken !== null) {\r\n      const decodedToken = this.tokenService.decodeToken(accessToken);\r\n      return decodedToken ? decodedToken.unique_name : null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n  getUserEmail() {\r\n    const accessToken: IAccessToken | null = this.tokenService.getAccessToken();\r\n    if (accessToken !== null) {\r\n      const decodedToken = this.tokenService.decodeToken(accessToken);\r\n      return decodedToken ? decodedToken.email : null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  private initRoles(): void {\r\n    const accessToken = this.tokenService.getAccessToken();\r\n    if (this.isAuth() && accessToken) {\r\n      const decodedToken = this.tokenService.decodeToken(accessToken);\r\n      if (decodedToken && decodedToken.role) {\r\n        this.roleService.setRole(decodedToken.role);\r\n      } else {\r\n        this.roleService.setRole(null);\r\n      }\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 29
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ErrorService",
            "id": "injectable-ErrorService-6535c103e7c2e83190a446571f6f6cee2107a56a06dd07b37d102abffb719b59080b9cc409661d34db240b7ed3b3e07e0e47360b1a83a09d6cdca9e3a686cfc9",
            "file": "src/app/shared/services/error.service.ts",
            "properties": [
                {
                    "name": "translateService",
                    "defaultValue": "inject(TranslateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { FormControl } from '@angular/forms';\r\nimport { TranslateService } from '@ngx-translate/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ErrorService {\r\n  private translateService = inject(TranslateService);\r\n\r\n  getErrorMessage(control: FormControl): string {\r\n    if (control.hasError('required')) {\r\n      return this.translateService.instant('ERRORS.REQUIRED');\r\n    }\r\n\r\n    if (\r\n      control.hasError('pattern') &&\r\n      control.errors?.['pattern']?.['requiredPattern'] === '/^\\\\d{2}-\\\\d{3}$/'\r\n    ) {\r\n      return this.translateService.instant('ERRORS.POSTAL_CODE_FORMAT');\r\n    }\r\n\r\n    if (control.hasError('minlength')) {\r\n      const minLength = control.errors?.['minlength']?.requiredLength;\r\n      return this.translateService.instant('ERRORS.MIN_LENGTH', { minLength });\r\n    }\r\n\r\n    if (control.hasError('maxlength')) {\r\n      const maxLength = control.errors?.['maxlength']?.requiredLength;\r\n      return this.translateService.instant('ERRORS.MAX_LENGTH', { maxLength });\r\n    }\r\n\r\n    if (control.hasError('email')) {\r\n      return this.translateService.instant('ERRORS.INVALID_EMAIL');\r\n    }\r\n\r\n    if (control.hasError('passwordsNotEqual')) {\r\n      return this.translateService.instant('ERRORS.PASSWORDS_NOT_EQUAL');\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ExampleCrudService",
            "id": "injectable-ExampleCrudService-2de6a9afa1ba712523a3163aa442fda0d8abe9590d7f457c4389f5d99954a017e684ac8c9c959fa3be55a05524a1128c7d9862c488c95d4b52a96d8917bf6cb4",
            "file": "src/app/core/_services/example-crud.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "createKarmelek",
                    "args": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelki>>",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteKarmelek",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelki>>",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAllKarmelki",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelki[]>>",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getKarmelekById",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelki>>",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPagedKarmelki",
                    "args": [
                        {
                            "name": "queryParams",
                            "type": "IPagedQueryParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelkiResponse>>",
                    "typeParameters": [],
                    "line": 19,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "queryParams",
                            "type": "IPagedQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "updateKarmelek",
                    "args": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IKarmelki>>",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { ApiEndpoints } from '../../enums/api-endpoints.enum';\r\nimport { IBaseResponse } from '../_models/base-response.model';\r\nimport { IKarmelki, IKarmelkiResponse } from '../_models/karmelki.model';\r\nimport { IPagedQueryParams } from '../_models/paged-query-params.model';\r\nimport { RequestFactoryService } from './httpRequestFactory/request-factory.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ExampleCrudService {\r\n  constructor(private requestFactory: RequestFactoryService) {}\r\n\r\n  getAllKarmelki(): Observable<IBaseResponse<IKarmelki[]>> {\r\n    return this.requestFactory.getAll<IKarmelki[]>(ApiEndpoints.KARMELKI);\r\n  }\r\n\r\n  getPagedKarmelki(queryParams: IPagedQueryParams): Observable<IBaseResponse<IKarmelkiResponse>> {\r\n    return this.requestFactory.getPaged<IKarmelkiResponse>(ApiEndpoints.KARMELKI, queryParams);\r\n  }\r\n\r\n  getKarmelekById(id: string): Observable<IBaseResponse<IKarmelki>> {\r\n    return this.requestFactory.getById<IKarmelki>(ApiEndpoints.KARMELKI, id);\r\n  }\r\n\r\n  createKarmelek(karmelek: IKarmelki): Observable<IBaseResponse<IKarmelki>> {\r\n    return this.requestFactory.create<IKarmelki, IKarmelki>(ApiEndpoints.KARMELKI, karmelek);\r\n  }\r\n\r\n  updateKarmelek(id: string, karmelek: IKarmelki): Observable<IBaseResponse<IKarmelki>> {\r\n    return this.requestFactory.update<IKarmelki, IKarmelki>(ApiEndpoints.KARMELKI, id, karmelek);\r\n  }\r\n\r\n  deleteKarmelek(id: string): Observable<IBaseResponse<IKarmelki>> {\r\n    return this.requestFactory.delete<IKarmelki>(ApiEndpoints.KARMELKI, id);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "requestFactory",
                        "type": "RequestFactoryService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 12,
                "jsdoctags": [
                    {
                        "name": "requestFactory",
                        "type": "RequestFactoryService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FileService",
            "id": "injectable-FileService-0d558b52f4c5a43e88c1a710499ffbd5e5319a5d52fa60eacd1ca1334ad635ca0cdf82e82e6df41b54d210a3afe45d4b0d99744d85003d0de12609eeac663e82",
            "file": "src/app/core/_services/file/file.service.ts",
            "properties": [
                {
                    "name": "requestFactory",
                    "defaultValue": "inject(RequestFactoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "deleteFile",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponseWithoutData>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadFile",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "editFile",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponseWithoutData>",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "fileName",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFile",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IFile>>",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getImage",
                    "args": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<string>",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileId",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getPageableFiles",
                    "args": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IFileListResponseDto>>",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "pageNumber",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "pageSize",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getStats",
                    "args": [],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IFileStatsDto>>",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "sendFile",
                    "args": [
                        {
                            "name": "fileData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<IFile>>",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fileData",
                            "type": "FormData",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpHeaders } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { map, Observable } from 'rxjs';\r\nimport { ApiEndpoints } from '../../../enums/api-endpoints.enum';\r\nimport { IBaseResponse, IBaseResponseWithoutData } from '../../_models/base-response.model';\r\nimport {\r\n  IFileEditRequestDto,\r\n  IFileListResponseDto,\r\n  IFileStatsDto,\r\n} from '../../_models/DTOs/fileDto.model';\r\nimport { IFile } from '../../_models/file.model';\r\nimport { IQueryParams } from '../../_models/query-params.model';\r\nimport { RequestFactoryService } from '../httpRequestFactory/request-factory.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FileService {\r\n  private requestFactory = inject(RequestFactoryService);\r\n\r\n  sendFile(fileData: FormData): Observable<IBaseResponse<IFile>> {\r\n    const options: IQueryParams = {\r\n      headers: new HttpHeaders(),\r\n    };\r\n\r\n    return this.requestFactory.create<IFile, FormData>(ApiEndpoints.SEND_FILE, fileData, options);\r\n  }\r\n\r\n  downloadFile(fileId: string): void {\r\n    this.requestFactory.getBlobById(ApiEndpoints.DOWNLOAD_FILE, fileId).subscribe({\r\n      next: res => {\r\n        const header = res.headers.get('Content-Disposition');\r\n        const fileName = header?.match(/filename\\*?=(?:UTF-8''|\")?([^\";]+)/)?.[1];\r\n        if (!fileName || !res.body) return;\r\n\r\n        const url = URL.createObjectURL(res.body);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = fileName;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n      },\r\n      error: error => {\r\n        console.error('Failed to download file');\r\n        console.error(error);\r\n      },\r\n    });\r\n  }\r\n\r\n  getImage(fileId: string): Observable<string> {\r\n    return this.requestFactory\r\n      .getBlobById(ApiEndpoints.DOWNLOAD_FILE, fileId)\r\n      .pipe(map(res => URL.createObjectURL(res.body as Blob)));\r\n  }\r\n\r\n  getFile(fileId: string): Observable<IBaseResponse<IFile>> {\r\n    return this.requestFactory.getById<IFile>(ApiEndpoints.GET_FILE, fileId);\r\n  }\r\n\r\n  getPageableFiles(\r\n    pageNumber: number,\r\n    pageSize: number\r\n  ): Observable<IBaseResponse<IFileListResponseDto>> {\r\n    return this.requestFactory.getPaged<IFileListResponseDto>(ApiEndpoints.GET_FILES_LIST, {\r\n      pageNumber,\r\n      pageSize,\r\n    });\r\n  }\r\n\r\n  editFile(fileId: string, fileName: string): Observable<IBaseResponseWithoutData> {\r\n    return this.requestFactory.update<IBaseResponseWithoutData, IFileEditRequestDto>(\r\n      ApiEndpoints.EDIT_FILE,\r\n      fileId,\r\n      { fileName }\r\n    );\r\n  }\r\n\r\n  deleteFile(fileId: string): Observable<IBaseResponseWithoutData> {\r\n    return this.requestFactory.delete<IBaseResponseWithoutData>(ApiEndpoints.DELETE_FILE, fileId);\r\n  }\r\n\r\n  getStats(): Observable<IBaseResponse<IFileStatsDto>> {\r\n    return this.requestFactory.get<IFileStatsDto>(ApiEndpoints.GET_FILES_STATS);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FormService",
            "id": "injectable-FormService-b8c17c538207e7e2c8d1737023d80218cbcac35d8f427181c960d91f811094bd2de421bbc8982b0426cb908a2eb7025ed1750f787f143f7424826fc92bd55345",
            "file": "src/app/shared/services/form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getExampleCrudForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<ExampleCrudForm>",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<LoginForm>",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getPasswdRecoveryForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<PasswdRecoveryForm>",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getPasswordsForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<PasswordsForm>",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getRegisterForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<RegisterForm>",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "getThemeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<ThemeForm>",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport {\r\n  ExampleCrudForm,\r\n  LoginForm,\r\n  PasswdRecoveryForm,\r\n  PasswordsForm,\r\n  RegisterForm,\r\n  ThemeForm,\r\n} from '../models/form.model';\r\nimport { initLoginForm } from './forms/initLoginForm';\r\nimport { initPasswdRecoveryForm } from './forms/initPasswdRecoveryForm';\r\nimport { initPasswordsForm } from './forms/initPasswordsForm';\r\nimport { initRegisterForm } from './forms/initRegisterForm';\r\nimport { initThemeForm } from './forms/initThemeForm';\r\nimport { initExampleCrudForm } from './forms/initExampleCrudForm';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FormService {\r\n  public getPasswordsForm(): FormGroup<PasswordsForm> {\r\n    return initPasswordsForm();\r\n  }\r\n\r\n  public getLoginForm(): FormGroup<LoginForm> {\r\n    return initLoginForm();\r\n  }\r\n\r\n  public getRegisterForm(): FormGroup<RegisterForm> {\r\n    return initRegisterForm();\r\n  }\r\n\r\n  public getThemeForm(): FormGroup<ThemeForm> {\r\n    return initThemeForm();\r\n  }\r\n\r\n  public getPasswdRecoveryForm(): FormGroup<PasswdRecoveryForm> {\r\n    return initPasswdRecoveryForm();\r\n  }\r\n\r\n  public getExampleCrudForm(): FormGroup<ExampleCrudForm> {\r\n    return initExampleCrudForm();\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "LanguageService",
            "id": "injectable-LanguageService-c4d1fc021ce223a21e1add557c4f5bbefbaa2243e8cb6f698bf7636a9491fa4320104001d3a2ab10719e55bb68de9c71c629ac487737bba24e2650fb1d0eedde",
            "file": "src/app/core/_services/language/language.service.ts",
            "properties": [
                {
                    "name": "currentLangSubject",
                    "defaultValue": "new BehaviorSubject<string>(LanguageCode.POLISH)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "DEFAULT_LANG",
                    "defaultValue": "LanguageCode.POLISH",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "languages",
                    "defaultValue": "MenuConfig.langs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILanguage[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "translateService",
                    "defaultValue": "inject(TranslateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changeLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 36,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "determineInitialLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "initializeLanguage",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initLanguage",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isLanguageSupported",
                    "args": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "lang",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { MenuConfig } from '../../../config/menu.config';\r\nimport { LanguageCode } from '../../../enums/LanguageCode.enum';\r\nimport { ILanguage } from '../../_models/language.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class LanguageService {\r\n  private currentLangSubject = new BehaviorSubject<string>(LanguageCode.POLISH);\r\n  private DEFAULT_LANG = LanguageCode.POLISH;\r\n  private translateService = inject(TranslateService);\r\n\r\n  languages: ILanguage[] = MenuConfig.langs;\r\n\r\n  constructor() {\r\n    const langToUse = this.determineInitialLanguage();\r\n    this.initializeLanguage(langToUse);\r\n  }\r\n\r\n  get currentLang$(): Observable<string> {\r\n    return this.currentLangSubject.asObservable();\r\n  }\r\n\r\n  get currentLang(): string {\r\n    return this.currentLangSubject.value;\r\n  }\r\n\r\n  initLanguage(): void {\r\n    const langToUse = this.determineInitialLanguage();\r\n    this.initializeLanguage(langToUse);\r\n  }\r\n\r\n  changeLanguage(lang: string): void {\r\n    if (this.isLanguageSupported(lang)) {\r\n      this.initializeLanguage(lang);\r\n    }\r\n  }\r\n\r\n  private initializeLanguage(lang: string): void {\r\n    this.currentLangSubject.next(lang);\r\n    this.translateService.setDefaultLang(this.DEFAULT_LANG);\r\n    this.translateService.use(lang);\r\n    localStorage.setItem('selectedLanguage', lang);\r\n  }\r\n\r\n  private isLanguageSupported(lang: string): boolean {\r\n    return this.languages.some(language => language.value === lang);\r\n  }\r\n\r\n  private determineInitialLanguage(): string {\r\n    const browserLang = this.translateService.getBrowserLang();\r\n    const savedLang = localStorage.getItem('selectedLanguage');\r\n\r\n    if (savedLang && this.isLanguageSupported(savedLang)) {\r\n      return savedLang;\r\n    }\r\n\r\n    if (browserLang && this.isLanguageSupported(browserLang)) {\r\n      return browserLang;\r\n    }\r\n\r\n    return this.DEFAULT_LANG;\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 16
            },
            "accessors": {
                "currentLang$": {
                    "name": "currentLang$",
                    "getSignature": {
                        "name": "currentLang$",
                        "type": "",
                        "returnType": "Observable<string>",
                        "line": 23
                    }
                },
                "currentLang": {
                    "name": "currentLang",
                    "getSignature": {
                        "name": "currentLang",
                        "type": "string",
                        "returnType": "string",
                        "line": 27
                    }
                }
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RequestFactoryService",
            "id": "injectable-RequestFactoryService-ccd4cd6d13feb2757a3ffd98ffdeaf51e3df950401dbcefad6f2e359985b21b8aeb3a3d91f9209c242986091416da7b88a47ff8769df63293f462f3711152dab",
            "file": "src/app/core/_services/httpRequestFactory/request-factory.service.ts",
            "properties": [
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 103,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "get",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getBlobById",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<HttpResponse<Blob>>",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getDefaultParams",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 120,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryParams",
                            "type": "IPagedQueryParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryParams",
                            "type": "IPagedQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "request",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 124,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpParams, HttpResponse } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment.development';\r\nimport { ApiEndpoints } from '../../../enums/api-endpoints.enum';\r\nimport { IBaseResponse } from '../../_models/base-response.model';\r\nimport { IPagedQueryParams } from '../../_models/paged-query-params.model';\r\nimport { IQueryParams } from '../../_models/query-params.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RequestFactoryService {\r\n  private http = inject(HttpClient);\r\n\r\n  get<T>(endpoint: ApiEndpoints, options?: IQueryParams): Observable<IBaseResponse<T>> {\r\n    return this.request<T>('GET', endpoint, null, options);\r\n  }\r\n\r\n  post<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('POST', endpoint, body, options);\r\n  }\r\n\r\n  getAll<T>(endpoint: ApiEndpoints, options?: IQueryParams): Observable<IBaseResponse<T>> {\r\n    return this.request<T>('GET', endpoint, null, options);\r\n  }\r\n\r\n  getById<T>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T>('GET', `${endpoint}/${id}`, null, options);\r\n  }\r\n\r\n  getBlobById(endpoint: ApiEndpoints, id: string): Observable<HttpResponse<Blob>> {\r\n    return this.http.get(`${environment.apiURL}/${endpoint}/${id}`, {\r\n      responseType: 'blob',\r\n      observe: 'response',\r\n    });\r\n  }\r\n\r\n  getPaged<T>(\r\n    endpoint: ApiEndpoints,\r\n    queryParams: IPagedQueryParams,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    const pageNumber = queryParams.pageNumber > 0 ? queryParams.pageNumber : 1;\r\n    const pageSize = queryParams.pageSize > 0 ? queryParams.pageSize : 10;\r\n\r\n    let params = options?.params ? options.params : this.getDefaultParams();\r\n    params = params.set('pageNumber', pageNumber.toString()).set('pageSize', pageSize.toString());\r\n\r\n    if (queryParams.filter) {\r\n      params = params.set('filter', queryParams.filter);\r\n    }\r\n\r\n    if (queryParams.sortBy) {\r\n      params = params.set('sortBy', queryParams.sortBy);\r\n    }\r\n\r\n    if (queryParams.sortDescending) {\r\n      params = params.set('sortDescending', queryParams.sortDescending.toString());\r\n    }\r\n\r\n    if (queryParams.includeInactive) {\r\n      params = params.set('includeInactive', queryParams.includeInactive.toString());\r\n    }\r\n\r\n    return this.request<T>('GET', endpoint, null, { params });\r\n  }\r\n\r\n  create<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('POST', endpoint, body, options);\r\n  }\r\n\r\n  update<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('PUT', `${endpoint}/${id}`, body, options);\r\n  }\r\n\r\n  patch<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('PATCH', `${endpoint}/${id}`, body, options);\r\n  }\r\n\r\n  delete<T>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, { isDeleted: number }>(\r\n      'PATCH',\r\n      `${endpoint}/${id}`,\r\n      { isDeleted: 1 },\r\n      options\r\n    );\r\n  }\r\n\r\n  private getDefaultHeaders(): HttpHeaders {\r\n    return new HttpHeaders({ 'Content-Type': 'application/json' });\r\n  }\r\n\r\n  private getDefaultParams(): HttpParams {\r\n    return new HttpParams();\r\n  }\r\n\r\n  private request<T, B = undefined>(\r\n    method: string,\r\n    endpoint: ApiEndpoints | string,\r\n    body?: B | null | undefined,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    const headers = options?.headers ? options.headers : this.getDefaultHeaders();\r\n    const params = options?.params ? options.params : this.getDefaultParams();\r\n\r\n    const configuration = {\r\n      headers,\r\n      params,\r\n      body,\r\n    };\r\n\r\n    return this.http.request<IBaseResponse<T>>(\r\n      method,\r\n      `${environment.apiURL}/${endpoint}`,\r\n      configuration\r\n    );\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RoleService",
            "id": "injectable-RoleService-e86ba8a44d8d6bb02f4f268e4a8b7c36764939e01932da465d5b6a9d9e992ae0b6b03b139f9222d68d6a6325b91dafcff3b63cb0e4b60caa0f5e0c59720f19ab",
            "file": "src/app/core/_services/role/role.service.ts",
            "properties": [
                {
                    "name": "role",
                    "defaultValue": "signal<string | null>(null)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "methods": [
                {
                    "name": "isAuthorized",
                    "args": [
                        {
                            "name": "roles",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 13,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roles",
                            "type": "string[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRole",
                    "args": [
                        {
                            "name": "roles",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "roles",
                            "type": "string | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, signal } from '@angular/core';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RoleService {\r\n  role = signal<string | null>(null);\r\n\r\n  setRole(roles: string | null): void {\r\n    this.role.set(roles);\r\n  }\r\n\r\n  isAuthorized(roles: string[]): boolean {\r\n    if (roles === null) {\r\n      return false;\r\n    }\r\n\r\n    const currentRole = this.role();\r\n    return currentRole !== null && roles.includes(currentRole);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-480d39d6052718df302c2612167c7b2dc4f75f00da93acda6db5c60a666130616deebc23fca728908e2993aa00c75b3d12d6ea50b93a096c6c54b382069f4f1e",
            "file": "src/app/shared/services/toast.service.ts",
            "properties": [
                {
                    "name": "messageService",
                    "defaultValue": "inject(MessageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methods": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "severity",
                            "type": "ISeverity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "severity",
                            "type": "ISeverity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showInfo",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showWarning",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "IKeys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { MessageService } from 'primeng/api';\r\nimport type { IKeys, ISeverity } from '../types/toast.types';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ToastService {\r\n  messageService = inject(MessageService);\r\n\r\n  show(severity: ISeverity, summary: string, detail: string, key?: IKeys, life?: number) {\r\n    this.messageService.add({\r\n      severity,\r\n      summary,\r\n      detail,\r\n      key,\r\n      life,\r\n    });\r\n  }\r\n\r\n  showSuccess(summary: string, detail: string, key?: IKeys, life?: number) {\r\n    this.show('success', summary, detail, key, life);\r\n  }\r\n\r\n  showInfo(summary: string, detail: string, key?: IKeys, life?: number) {\r\n    this.show('info', summary, detail, key, life);\r\n  }\r\n\r\n  showWarning(summary: string, detail: string, key?: IKeys, life?: number) {\r\n    this.show('warn', summary, detail, key, life);\r\n  }\r\n\r\n  showError(summary: string, detail: string, key?: IKeys, life?: number) {\r\n    this.show('error', summary, detail, key, life);\r\n  }\r\n\r\n  clear(key?: string) {\r\n    this.messageService.clear(key);\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TokenService",
            "id": "injectable-TokenService-3ab15c4c9bb401a69d56550fddcd8b8bed17a210e689a0fb065525781e997ea2a096b22e13dca37afd039caabb9f9ec6884a0875f10fd9075ff1aae22620b746",
            "file": "src/app/core/_services/token/token.service.ts",
            "properties": [
                {
                    "name": "requestFactory",
                    "defaultValue": "inject(RequestFactoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "decodeToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "IAccessToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDecodedToken | null",
                    "typeParameters": [],
                    "line": 30,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "IAccessToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccessToken",
                    "args": [],
                    "optional": false,
                    "returnType": "IAccessToken | null",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "IRefreshToken | null",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshToken",
                    "args": [
                        {
                            "name": "tokens",
                            "type": "ITokens",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IAuthTokensResponseDto>",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tokens",
                            "type": "ITokens",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "setTokens",
                    "args": [
                        {
                            "name": "accessToken",
                            "type": "IAccessToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "refreshToken",
                            "type": "IRefreshToken",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accessToken",
                            "type": "IAccessToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "refreshToken",
                            "type": "IRefreshToken",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateRefreshToken",
                    "args": [
                        {
                            "name": "refreshToken",
                            "type": "IRefreshToken | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "refreshToken",
                            "type": "IRefreshToken | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "IAccessToken | null",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "IAccessToken | null",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { map, Observable } from 'rxjs';\r\nimport { ApiEndpoints } from '../../../enums/api-endpoints.enum';\r\nimport { IBaseResponse } from '../../_models/base-response.model';\r\nimport { IDecodedToken } from '../../_models/decoded-token.model';\r\nimport { IAccessToken, IRefreshToken, ITokens } from '../../_models/tokens.model';\r\nimport { RequestFactoryService } from '../httpRequestFactory/request-factory.service';\r\nimport {\r\n  IAuthRefreshTokensRequestDto,\r\n  IAuthTokensResponseDto,\r\n} from '../../_models/DTOs/authDto.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TokenService {\r\n  private requestFactory = inject(RequestFactoryService);\r\n\r\n  refreshToken(tokens: ITokens): Observable<IAuthTokensResponseDto> {\r\n    const body: IAuthRefreshTokensRequestDto = {\r\n      accessToken: tokens.accessToken,\r\n      refreshToken: tokens.refreshToken.refreshToken,\r\n    };\r\n    return this.requestFactory\r\n      .post<IAuthTokensResponseDto, IAuthRefreshTokensRequestDto>(ApiEndpoints.REFRESH_TOKEN, body)\r\n      .pipe(map((response: IBaseResponse<IAuthTokensResponseDto>) => response.data));\r\n  }\r\n\r\n  decodeToken(token: IAccessToken): IDecodedToken | null {\r\n    if (token !== null) {\r\n      return jwtDecode<IDecodedToken>(token);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  getAccessToken(): IAccessToken | null {\r\n    const accessToken = localStorage.getItem('accessToken');\r\n    return accessToken;\r\n  }\r\n\r\n  getRefreshToken(): IRefreshToken | null {\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    const refreshTokenExpiresAt = localStorage.getItem('refreshTokenExpiresAt');\r\n\r\n    if (refreshToken === null || refreshTokenExpiresAt === null) {\r\n      return null;\r\n    }\r\n\r\n    const token: IRefreshToken = {\r\n      refreshToken: refreshToken,\r\n      expiresAt: refreshTokenExpiresAt,\r\n    };\r\n\r\n    return token;\r\n  }\r\n\r\n  setTokens(accessToken: IAccessToken, refreshToken: IRefreshToken): void {\r\n    localStorage.setItem('accessToken', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken.refreshToken);\r\n    localStorage.setItem('refreshTokenExpiresAt', refreshToken.expiresAt);\r\n  }\r\n\r\n  removeTokens(): void {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n    localStorage.removeItem('refreshTokenExpiresAt');\r\n  }\r\n\r\n  validateToken(token: IAccessToken | null): boolean {\r\n    if (token === null) {\r\n      return false;\r\n    }\r\n\r\n    const decodedToken = this.decodeToken(token);\r\n    try {\r\n      if (decodedToken !== null) {\r\n        return decodedToken.exp * 1000 > Date.now();\r\n      } else {\r\n        return false;\r\n      }\r\n      // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  validateRefreshToken(refreshToken: IRefreshToken | null): boolean {\r\n    if (refreshToken === null) {\r\n      return false;\r\n    }\r\n\r\n    const expiresAt = new Date(refreshToken.expiresAt);\r\n    const currentDate = new Date();\r\n\r\n    if (refreshToken !== null) {\r\n      return expiresAt > currentDate;\r\n    } else {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [
        {
            "name": "HasRoleDirective",
            "id": "directive-HasRoleDirective-ab71b33954127ea575e472bf1cc098e1dca1d27e9c60382811167c56ac7c0ea51438fc08738814c76c2601826df447189f0390e3cb68af6f456d37439c0c328a",
            "file": "src/app/shared/directives/has-role.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {\r\n  Directive,\r\n  effect,\r\n  inject,\r\n  Input,\r\n  TemplateRef,\r\n  ViewContainerRef,\r\n  untracked,\r\n} from '@angular/core';\r\nimport { RoleService } from '../../core/_services/role/role.service';\r\n\r\n@Directive({\r\n  selector: '[hasRole]',\r\n  standalone: true,\r\n})\r\nexport class HasRoleDirective {\r\n  private templateRef = inject(TemplateRef);\r\n  private viewContainer = inject(ViewContainerRef);\r\n  private roleService = inject(RoleService);\r\n\r\n  private requiredRoles: string[] | undefined;\r\n\r\n  @Input()\r\n  set hasRole(roles: string[]) {\r\n    this.requiredRoles = roles;\r\n    this.updateView();\r\n  }\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const currentRole = untracked(() => this.requiredRoles);\r\n      if (currentRole) {\r\n        this.updateView();\r\n      }\r\n    });\r\n  }\r\n\r\n  private updateView(): void {\r\n    if (!this.requiredRoles) {\r\n      this.viewContainer.clear();\r\n      return;\r\n    }\r\n\r\n    const hasAccess = this.roleService.isAuthorized(this.requiredRoles);\r\n\r\n    if (hasAccess && this.viewContainer.length === 0) {\r\n      this.viewContainer.createEmbeddedView(this.templateRef);\r\n    } else if (!hasAccess) {\r\n      this.viewContainer.clear();\r\n    }\r\n  }\r\n}\r\n",
            "selector": "[hasRole]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [
                {
                    "name": "hasRole",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "requiredRoles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[] | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "roleService",
                    "defaultValue": "inject(RoleService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "templateRef",
                    "defaultValue": "inject(TemplateRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewContainer",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "updateView",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 27
            },
            "accessors": {
                "hasRole": {
                    "name": "hasRole",
                    "setSignature": {
                        "name": "hasRole",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "roles",
                                "type": "string[]",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 24,
                        "jsdoctags": [
                            {
                                "name": "roles",
                                "type": "string[]",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    }
                }
            }
        },
        {
            "name": "IsLoggedInDirective",
            "id": "directive-IsLoggedInDirective-7f470b6b456de539b84f6f33b8031e0b8d496e7132ff61f47a11c7e7157e173e715dc5a48a76db6bd4bcebafb4a3386bc1c1f734c293177dfd22d823ad70f70a",
            "file": "src/app/shared/directives/is-logged-in.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, effect, inject, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { AuthService } from '../../core/_services/auth/auth.service';\r\n\r\n@Directive({\r\n  selector: '[isLoggedIn]',\r\n  standalone: true,\r\n})\r\nexport class IsLoggedInDirective {\r\n  private templateRef = inject(TemplateRef);\r\n  private viewContainer = inject(ViewContainerRef);\r\n  private authService = inject(AuthService);\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const isLogged = this.authService.isLogged();\r\n      this.viewContainer.clear();\r\n      if (isLogged) {\r\n        this.viewContainer.createEmbeddedView(this.templateRef);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "selector": "[isLoggedIn]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "templateRef",
                    "defaultValue": "inject(TemplateRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewContainer",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            }
        },
        {
            "name": "NotLoggedInDirective",
            "id": "directive-NotLoggedInDirective-147610ab92e5a1c46f2e0865f6e91d41a8809505be06d4be2fe260c8fcbd03e467df810567c71231c9eaa38581b5a20fe18fdd9495e1afabf39efa31aa55f4b1",
            "file": "src/app/shared/directives/not-logged-in.directive.ts",
            "type": "directive",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Directive, effect, inject, TemplateRef, ViewContainerRef } from '@angular/core';\r\nimport { AuthService } from '../../core/_services/auth/auth.service';\r\n\r\n@Directive({\r\n  selector: '[notLoggedIn]',\r\n  standalone: true,\r\n})\r\nexport class NotLoggedInDirective {\r\n  private templateRef = inject(TemplateRef);\r\n  private viewContainer = inject(ViewContainerRef);\r\n  private authService = inject(AuthService);\r\n\r\n  constructor() {\r\n    effect(() => {\r\n      const isLogged = this.authService.isLogged();\r\n      this.viewContainer.clear();\r\n      if (!isLogged) {\r\n        this.viewContainer.createEmbeddedView(this.templateRef);\r\n      }\r\n    });\r\n  }\r\n}\r\n",
            "selector": "[notLoggedIn]",
            "providers": [],
            "hostDirectives": [],
            "standalone": true,
            "inputsClass": [],
            "outputsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "templateRef",
                    "defaultValue": "inject(TemplateRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "viewContainer",
                    "defaultValue": "inject(ViewContainerRef)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "extends": [],
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 11
            }
        }
    ],
    "components": [
        {
            "name": "AccordionComponent",
            "id": "component-AccordionComponent-cc0f22847d243a1ef66ad2a546a6207d2f09d9704111ff70e085d6c70157fbf34f90faf6f51b51f7f8884459b54293bd69df6e220b74ee67a979308f21de6894",
            "file": "src/app/shared/components/accordion/accordion.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-accordion",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./accordion.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "activeItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "allowMultiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "panels",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "IAccordionPanelItem[]",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "AccordionModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { AccordionModule } from 'primeng/accordion';\r\nimport { IAccordionPanelItem, IAccordionProps } from '../../types/accordion.type';\r\n\r\n@Component({\r\n  selector: 'app-accordion',\r\n  standalone: true,\r\n  imports: [AccordionModule, CommonModule],\r\n  templateUrl: './accordion.component.html',\r\n  styleUrl: './accordion.component.scss',\r\n})\r\nexport class AccordionComponent implements IAccordionProps {\r\n  @Input() panels: IAccordionPanelItem[] = [];\r\n  @Input() activeItems: string[] = [];\r\n  @Input() allowMultiple = true;\r\n}\r\n",
            "styleUrl": "./accordion.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IAccordionProps"
            ],
            "templateData": "<div class=\"card flex justify-content-center\">\r\n  <p-accordion [value]=\"activeItems\" [multiple]=\"allowMultiple\">\r\n    <ng-container *ngFor=\"let panel of panels\">\r\n      <p-accordion-panel [value]=\"panel.value\">\r\n        <p-accordion-header>{{ panel.header }}</p-accordion-header>\r\n        <p-accordion-content>\r\n          <ng-container *ngTemplateOutlet=\"panel.contentTemplate\"></ng-container>\r\n        </p-accordion-content>\r\n      </p-accordion-panel>\r\n    </ng-container>\r\n  </p-accordion>\r\n</div>\r\n"
        },
        {
            "name": "AltchaComponent",
            "id": "component-AltchaComponent-3cef14e5ff5f8817c53e1e269528b7b30c6a4c52837844b42e3c7ad798f5a658fd55c7d6b072b1447c7d8b2cfad2fdfa64d6a599b3fd71200d49ca435f252024",
            "file": "src/app/shared/components/altcha/altcha.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => AltchaComponent), multi: true,\n}",
                    "type": "component"
                },
                {
                    "name": "{\n    provide: NG_VALIDATORS, useExisting: forwardRef(() => AltchaComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-altcha",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./altcha.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "challengeurl",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "debug",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "defaultValue": "{ '--altcha-max-width': '320px' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "test",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "altchaWidget",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ElementRef",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'altchaWidget', {static: true}"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 59,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onStateChange",
                    "args": [
                        {
                            "name": "state",
                            "type": "\"unverified\" | \"verifying\" | \"verified\" | \"error\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "payload",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''"
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "state",
                            "type": "\"unverified\" | \"verifying\" | \"verified\" | \"error\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "payload",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "defaultValue": "''",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "status",
                                    "type": "IAltchaStatus",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "status",
                                    "type": "IAltchaStatus",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validate",
                    "args": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "ValidationErrors | null",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "AbstractControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {\r\n  CUSTOM_ELEMENTS_SCHEMA,\r\n  Component,\r\n  ElementRef,\r\n  Input,\r\n  ViewChild,\r\n  forwardRef,\r\n} from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  NG_VALUE_ACCESSOR,\r\n  NG_VALIDATORS,\r\n  Validator,\r\n  AbstractControl,\r\n  ValidationErrors,\r\n} from '@angular/forms';\r\nimport { IAltchaStatus } from '../../models/altcha.model';\r\nimport 'altcha';\r\nimport { IAltchaProps } from '../../types/altcha.types';\r\n\r\n@Component({\r\n  selector: 'app-altcha',\r\n  standalone: true,\r\n  imports: [],\r\n  schemas: [CUSTOM_ELEMENTS_SCHEMA],\r\n  templateUrl: './altcha.component.html',\r\n  styleUrl: './altcha.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => AltchaComponent),\r\n      multi: true,\r\n    },\r\n    {\r\n      provide: NG_VALIDATORS,\r\n      useExisting: forwardRef(() => AltchaComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class AltchaComponent implements ControlValueAccessor, Validator, IAltchaProps {\r\n  @ViewChild('altchaWidget', { static: true }) altchaWidget!: ElementRef;\r\n  @Input() challengeurl = '';\r\n  @Input() debug = false;\r\n  @Input() test = false;\r\n  @Input() value = '';\r\n  @Input() style?: Record<string, string> = { '--altcha-max-width': '320px' };\r\n  @Input() styleClass?: string;\r\n\r\n  onChange = (status: IAltchaStatus): void => {\r\n    if (this.debug) {\r\n      console.log('Altcha status changed!', status);\r\n    }\r\n  };\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onTouched = (): void => {};\r\n\r\n  ngAfterViewInit(): void {\r\n    const el = this.altchaWidget.nativeElement as HTMLElement;\r\n    el.addEventListener('statechange', ev => {\r\n      const { detail } = ev as CustomEvent;\r\n      if (detail) {\r\n        const { payload, state } = detail;\r\n        this.onStateChange(state, payload);\r\n      }\r\n    });\r\n  }\r\n\r\n  writeValue(value: any): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: (status: IAltchaStatus) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  validate(control: AbstractControl): ValidationErrors | null {\r\n    if (!this.value) {\r\n      return { required: true };\r\n    }\r\n    return null;\r\n  }\r\n\r\n  onStateChange(state: 'unverified' | 'verifying' | 'verified' | 'error', payload = '') {\r\n    this.value = state === 'verified' ? payload : '';\r\n    const statusObject: IAltchaStatus = { state, payload };\r\n    this.onChange(statusObject);\r\n    this.onTouched();\r\n  }\r\n}\r\n",
            "styleUrl": "./altcha.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "Validator",
                "IAltchaProps"
            ],
            "templateData": "<altcha-widget\r\n  #altchaWidget\r\n  [challengeurl]=\"challengeurl\"\r\n  [debug]=\"debug\"\r\n  [test]=\"test\"\r\n  [style]=\"style\"\r\n  [styleClass]=\"styleClass\"\r\n></altcha-widget>\r\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-5d534f3afa192115b7c61b83f276c2a3f5a32a57a89ccfb1da6d0e152779b4a1ab049a4bcd488c419722b12eb79013f79a06cd299b64a83cd67f566856bf05c7",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authMenuItems",
                    "defaultValue": "MenuConfig.authMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "footerTitle",
                    "defaultValue": "MenuConfig.footerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "langs",
                    "defaultValue": "MenuConfig.langs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "languageService",
                    "defaultValue": "inject(LanguageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "nonAuthMenuItems",
                    "defaultValue": "MenuConfig.nonAuthMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "title",
                    "defaultValue": "MenuConfig.title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NavbarComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ToastModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ToastModule } from 'primeng/toast';\r\nimport { MenuConfig } from './config/menu.config';\r\nimport { LanguageService } from './core/_services/language/language.service';\r\nimport { FooterComponent } from './shared/components/footer/footer.component';\r\nimport { NavbarComponent } from './shared/components/navbar/navbar.component';\r\nimport { AuthService } from './core/_services/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet, NavbarComponent, FooterComponent, TranslateModule, ToastModule],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss',\r\n})\r\nexport class AppComponent implements OnInit {\r\n  title = MenuConfig.title;\r\n  langs = MenuConfig.langs;\r\n  authMenuItems = MenuConfig.authMenuItems;\r\n  nonAuthMenuItems = MenuConfig.nonAuthMenuItems;\r\n  footerTitle = MenuConfig.footerTitle;\r\n\r\n  protected authService = inject(AuthService);\r\n\r\n  private languageService = inject(LanguageService);\r\n\r\n  ngOnInit() {\r\n    this.languageService.initLanguage();\r\n  }\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-navbar\r\n  [title]=\"title\"\r\n  [showSwitchTheme]=\"true\"\r\n  [showSwitchLang]=\"true\"\r\n  [langs]=\"langs\"\r\n  [authMenuItems]=\"authMenuItems\"\r\n  [nonAuthMenuItems]=\"nonAuthMenuItems\"\r\n  [isAuthenticated]=\"this.authService.isLogged()\"\r\n>\r\n</app-navbar>\r\n<main class=\"main-container\">\r\n  <p-toast></p-toast>\r\n  <router-outlet></router-outlet>\r\n</main>\r\n<app-footer [title]=\"footerTitle\"> </app-footer>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-08d0f67011ce94fd5f2b65c4db53e47c775d95fc415b95d2707db104deec745822742d834416f1161b9e95efb24c38982f431b0c7737ba5ed0f76e7dff9f4f8a",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 807,
                            "end": 821,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 808,
                                "end": 816,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport class ButtonComponent {\r\n  /** Is this the principal call to action on the page? */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /** What background color to use */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /** How large should the button be? */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /** Optional click handler */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n.storybook-button--primary {\r\n  background-color: #555ab9;\r\n  color: white;\r\n}\r\n.storybook-button--secondary {\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n  background-color: transparent;\r\n  color: #333;\r\n}\r\n.storybook-button--small {\r\n  padding: 10px 16px;\r\n  font-size: 12px;\r\n}\r\n.storybook-button--medium {\r\n  padding: 11px 20px;\r\n  font-size: 14px;\r\n}\r\n.storybook-button--large {\r\n  padding: 12px 24px;\r\n  font-size: 16px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-429f319fd9643c9ea61da87bf14bb5802b1d4649a722c193699a520462004798899463a00695d954bec96a944a3d8c83f39ca7837611135344a8cd479ea32084-1",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "badgeSeverity",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "IButtonBadgeSeverity",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPos",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "IButtonIconPosition",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "outlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "raised",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "severity",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "IButtonSeverity",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "IButtonSize",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "IButtonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  IButtonIconPosition,\r\n  IButtonBadgeSeverity,\r\n  IButtonSeverity,\r\n  IButtonVariant,\r\n  IButtonSize,\r\n  IButtonProps,\r\n} from '../../types/button.types';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonModule],\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\nexport class ButtonComponent implements IButtonProps {\r\n  @Input() label?: string;\r\n  @Input() icon?: string;\r\n  @Input() iconPos: IButtonIconPosition = 'left';\r\n  @Input() badge?: string;\r\n  @Input() badgeSeverity: IButtonBadgeSeverity = 'info';\r\n  @Input() severity: IButtonSeverity = 'primary';\r\n  @Input() raised = false;\r\n  @Input() rounded = false;\r\n  @Input() loading = false;\r\n  @Input() disabled = false;\r\n  @Input() variant?: IButtonVariant;\r\n  @Input() outlined = false;\r\n  @Input() size?: IButtonSize;\r\n  @Input() styleClass?: string;\r\n  @Input() ariaLabel?: string;\r\n  @Input() type: 'button' | 'submit' | 'reset' = 'button';\r\n\r\n  @Output() onClick = new EventEmitter<MouseEvent>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "IButtonProps"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<p-button\r\n  [label]=\"label\"\r\n  [icon]=\"icon\"\r\n  [iconPos]=\"iconPos\"\r\n  [loading]=\"loading\"\r\n  [severity]=\"severity\"\r\n  [badgeSeverity]=\"badgeSeverity\"\r\n  [raised]=\"raised\"\r\n  [rounded]=\"rounded\"\r\n  [variant]=\"variant\"\r\n  [outlined]=\"outlined\"\r\n  [badge]=\"badge\"\r\n  [disabled]=\"disabled\"\r\n  [size]=\"size\"\r\n  [styleClass]=\"styleClass\"\r\n  [ariaLabel]=\"ariaLabel\"\r\n  (onClick)=\"onClick.emit($event)\"\r\n  [type]=\"type\"\r\n/>\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-2d3d8d4210d6234f2af0de81efe01ca514f7988d14c7d8af69035d6556047d047ecbfe5703896311004b8b377524d0e0b732be375066a2c5d71898d98eb34ff9",
            "file": "src/app/shared/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onTouchedFn",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "onTouched",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, forwardRef, Input } from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { CheckboxModule } from 'primeng/checkbox';\r\nimport { ICheckboxProps } from '../../types/checkbox.types';\r\n\r\n@Component({\r\n  selector: 'app-checkbox',\r\n  standalone: true,\r\n  imports: [CommonModule, CheckboxModule, FormsModule, ReactiveFormsModule],\r\n  templateUrl: './checkbox.component.html',\r\n  styleUrl: './checkbox.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => CheckboxComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class CheckboxComponent implements ICheckboxProps, ControlValueAccessor {\r\n  @Input() inputId?: string;\r\n  @Input() name?: string;\r\n  @Input() required = false;\r\n  @Input() label?: string;\r\n  @Input() formControl!: FormControl;\r\n  @Input() value?: boolean;\r\n  @Input() errorMessage?: string;\r\n  @Input() invalid?: boolean;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onChange: (value: boolean) => void = () => {};\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onTouchedFn: () => void = () => {};\r\n\r\n  checked = false;\r\n  touched = false;\r\n\r\n  writeValue(value: boolean): void {\r\n    this.checked = value;\r\n  }\r\n\r\n  registerOnChange(fn: (value: boolean) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouchedFn = fn;\r\n  }\r\n\r\n  onTouched(): void {\r\n    this.touched = true;\r\n    this.onTouchedFn();\r\n  }\r\n}\r\n",
            "styleUrl": "./checkbox.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ICheckboxProps",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"field\">\r\n  <p-checkbox\r\n    [inputId]=\"inputId\"\r\n    [name]=\"name\"\r\n    [value]=\"value\"\r\n    [(ngModel)]=\"checked\"\r\n    [required]=\"required\"\r\n    [formControl]=\"formControl\"\r\n    >></p-checkbox\r\n  >\r\n  @if (label) {\r\n    <label [class.required]=\"required\" [for]=\"inputId\" class=\"ml-2\"> {{ label }} </label>\r\n    @if (required) {\r\n      <span class=\"required-marker\">*</span>\r\n    }\r\n  }\r\n  @if (invalid && errorMessage && touched) {\r\n    <small class=\"p-error\">{{ errorMessage }}</small>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "ConfirmModalComponent",
            "id": "component-ConfirmModalComponent-5a383d017ed041f65e3901c902fe81b4eb138096129348079c43266d30c2d723c632aa26f2f748f9f3a46c72b72dfd1d196c313649afcf9c4fa9d02bdcb94732",
            "file": "src/app/shared/components/confirm-modal/confirm-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirm-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "defaultValue": "'Confirm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "'Are you sure?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "noLabel",
                    "defaultValue": "'No'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "yesLabel",
                    "defaultValue": "'Yes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "no",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "yes",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onNo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onYes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { IConfirmModalProps } from '../../types/modal.types';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { ButtonComponent } from '../button/button.component';\r\n\r\n@Component({\r\n  selector: 'app-confirm-modal',\r\n  standalone: true,\r\n  imports: [DialogModule, CommonModule, ButtonModule, ButtonComponent],\r\n  templateUrl: './confirm-modal.component.html',\r\n  styleUrl: './confirm-modal.component.scss',\r\n})\r\nexport class ConfirmModalComponent implements IConfirmModalProps {\r\n  @Input() header = 'Confirm';\r\n  @Input() visible = false;\r\n  @Input() message = 'Are you sure?';\r\n  @Input() yesLabel = 'Yes';\r\n  @Input() noLabel = 'No';\r\n  @Output() yes = new EventEmitter<void>();\r\n  @Output() no = new EventEmitter<void>();\r\n\r\n  onYes() {\r\n    this.yes.emit();\r\n    this.visible = false;\r\n  }\r\n\r\n  onNo() {\r\n    this.no.emit();\r\n    this.visible = false;\r\n  }\r\n}\r\n",
            "styleUrl": "./confirm-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IConfirmModalProps"
            ],
            "templateData": "<p-dialog [header]=\"header\" [modal]=\"true\" [(visible)]=\"visible\" [style]=\"{ width: '20rem' }\">\r\n  <span class=\"p-text-secondary block mb-4\">{{ message }}</span>\r\n  <div class=\"flex justify-end gap-2\">\r\n    <app-button\r\n      label=\"{{ noLabel }}\"\r\n      [severity]=\"'danger'\"\r\n      type=\"button\"\r\n      (click)=\"onNo()\"\r\n    ></app-button>\r\n    <app-button\r\n      label=\"{{ yesLabel }}\"\r\n      [severity]=\"'success'\"\r\n      type=\"button\"\r\n      (click)=\"onYes()\"\r\n    ></app-button>\r\n  </div>\r\n</p-dialog>\r\n"
        },
        {
            "name": "ContextMenuComponent",
            "id": "component-ContextMenuComponent-d849d8071476810810c83dffe09274df2cec608ee5dd4c15942365852b46ef8aca6424615c18e03aff6986bedc91b8ff17db61b0edc81df35239be9fc8d4daca",
            "file": "src/app/shared/components/context-menu/context-menu.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-context-menu",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./context-menu.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "appendTo",
                    "defaultValue": "'body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string | HTMLElement",
                    "decorators": []
                },
                {
                    "name": "autoZIndex",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "baseZIndex",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "global",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "items",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "style",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "triggerEvent",
                    "defaultValue": "'contextmenu'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onHide",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                },
                {
                    "name": "onItemSelect",
                    "defaultValue": "new EventEmitter<IContextMenuEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "EventEmitter"
                },
                {
                    "name": "onShow",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContextMenu",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'cm'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleHide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "handleItemSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "IContextMenuEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 60,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IContextMenuEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleShow",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "hide",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 35,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onContextMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 47,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setTarget",
                    "args": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "target",
                            "type": "HTMLElement",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ContextMenu"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { MenuItem } from 'primeng/api';\r\nimport { ContextMenu } from 'primeng/contextmenu';\r\nimport { IContextMenuProps, IContextMenuEvent } from '../../types/context-menu.types';\r\n\r\n@Component({\r\n  selector: 'app-context-menu',\r\n  standalone: true,\r\n  imports: [CommonModule, ContextMenu],\r\n  templateUrl: './context-menu.component.html',\r\n})\r\nexport class ContextMenuComponent implements IContextMenuProps {\r\n  @Input() items: MenuItem[] = [];\r\n  @Input() global = false;\r\n  @Input() appendTo: string | HTMLElement = 'body';\r\n  @Input() autoZIndex = true;\r\n  @Input() baseZIndex = 0;\r\n  @Input() styleClass = '';\r\n  @Input() style: Record<string, string> = {};\r\n  @Input() triggerEvent = 'contextmenu';\r\n\r\n  @Output() onShow = new EventEmitter<void>();\r\n  @Output() onHide = new EventEmitter<void>();\r\n  @Output() onItemSelect = new EventEmitter<IContextMenuEvent>();\r\n\r\n  @ViewChild('cm') contextMenu!: ContextMenu;\r\n\r\n  show(event: MouseEvent): void {\r\n    if (this.contextMenu) {\r\n      this.contextMenu.show(event);\r\n    }\r\n  }\r\n\r\n  hide(): void {\r\n    if (this.contextMenu) {\r\n      this.contextMenu.hide();\r\n    }\r\n  }\r\n\r\n  setTarget(target: HTMLElement): void {\r\n    if (this.contextMenu) {\r\n      this.contextMenu.target = target;\r\n    }\r\n  }\r\n\r\n  onContextMenu(event: MouseEvent): void {\r\n    this.show(event);\r\n    event.preventDefault();\r\n  }\r\n\r\n  handleShow(): void {\r\n    this.onShow.emit();\r\n  }\r\n\r\n  handleHide(): void {\r\n    this.onHide.emit();\r\n  }\r\n\r\n  handleItemSelect(event: IContextMenuEvent): void {\r\n    this.onItemSelect.emit(event);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IContextMenuProps"
            ],
            "templateData": "<p-contextMenu\r\n  #cm\r\n  [global]=\"global\"\r\n  [appendTo]=\"appendTo\"\r\n  [autoZIndex]=\"autoZIndex\"\r\n  [baseZIndex]=\"baseZIndex\"\r\n  [styleClass]=\"styleClass\"\r\n  [style]=\"style\"\r\n  [triggerEvent]=\"triggerEvent\"\r\n  [model]=\"items\"\r\n  (onShow)=\"handleShow()\"\r\n  (onHide)=\"handleHide()\"\r\n>\r\n</p-contextMenu>\r\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-49ca86e3dd23928154b652be72def3b6387e3783734fefcfc7683ec6901af28d952520cb7d24bd38e1bdf94c1d55334b2b8861ee7c466542c8f81430f111c862",
            "file": "src/app/features/dashboard/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "rolesEnum",
                    "defaultValue": "RolesEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        124,
                        148
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "HasRoleDirective",
                    "type": "directive"
                },
                {
                    "name": "IsLoggedInDirective",
                    "type": "directive"
                },
                {
                    "name": "NotLoggedInDirective",
                    "type": "directive"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { HasRoleDirective } from '../../../shared/directives/has-role.directive';\r\nimport { IsLoggedInDirective } from '../../../shared/directives/is-logged-in.directive';\r\nimport { NotLoggedInDirective } from '../../../shared/directives/not-logged-in.directive';\r\nimport { RolesEnum } from '../../../enums/roles.enum';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  standalone: true,\r\n  imports: [TranslateModule, HasRoleDirective, IsLoggedInDirective, NotLoggedInDirective],\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrl: './dashboard.component.scss',\r\n})\r\nexport class DashboardComponent {\r\n  protected readonly rolesEnum = RolesEnum;\r\n}\r\n",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>dashboard works!</p>\r\n<h1>{{ 'APP.TITLE' | translate }}</h1>\r\n<p>{{ 'APP.WELCOME' | translate }}</p>\r\n<p *hasRole=\"[rolesEnum.USER]\">ROLE USER</p>\r\n<p *hasRole=\"[rolesEnum.MOD]\">ROLE MOD</p>\r\n<p *hasRole=\"[rolesEnum.ADMIN]\">ROLE ADMIN</p>\r\n<p *isLoggedIn>Logged In</p>\r\n<p *notLoggedIn>Logged Out</p>\r\n"
        },
        {
            "name": "DonutChartComponent",
            "id": "component-DonutChartComponent-e8e65b2e03cbcafa2001f73d0905d3a66a1000328278c5066a5c7c2a5a756bb3249ea1ef1e526e4700d28640d4be247e9da64f55863f30136c29a2e5c8a416d9",
            "file": "src/app/shared/components/donut-chart/donut-chart.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-donut-chart",
            "styleUrls": [
                "./donut-chart.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./donut-chart.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "defaultValue": "'Donut Chart'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartClass",
                    "defaultValue": "'w-full md:w-[30rem]'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chartStyle",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "{ labels: [], datasets: [] }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "IDonutChartData",
                    "decorators": []
                },
                {
                    "name": "height",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "IDonutChartOptions",
                    "decorators": []
                },
                {
                    "name": "responsive",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "width",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "chartData",
                    "defaultValue": "{ labels: [], datasets: [] }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDonutChartData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "chartOptions",
                    "defaultValue": "{\r\n    cutout: '60%',\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          color: '#495057',\r\n        },\r\n        position: 'top',\r\n      },\r\n    },\r\n  }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IDonutChartOptions",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnChanges",
                    "args": [
                        {
                            "name": "_changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_changes",
                            "type": "SimpleChanges",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateChart",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ChartModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, OnChanges, OnInit, SimpleChanges } from '@angular/core';\r\nimport { ChartModule } from 'primeng/chart';\r\nimport {\r\n  IDonutChartData,\r\n  IDonutChartOptions,\r\n  IDonutChartProps,\r\n} from '../../types/donut-chart.type';\r\n\r\n@Component({\r\n  selector: 'app-donut-chart',\r\n  standalone: true,\r\n  imports: [ChartModule, CommonModule],\r\n  templateUrl: './donut-chart.component.html',\r\n  styleUrls: ['./donut-chart.component.scss'],\r\n})\r\nexport class DonutChartComponent implements OnInit, OnChanges, IDonutChartProps {\r\n  @Input() data: IDonutChartData = { labels: [], datasets: [] };\r\n  @Input() options: IDonutChartOptions = {};\r\n  @Input() width = '';\r\n  @Input() height = '';\r\n  @Input() responsive = true;\r\n  @Input() chartClass = 'w-full md:w-[30rem]';\r\n  @Input() chartStyle: Record<string, string> = {};\r\n  @Input() ariaLabel = 'Donut Chart';\r\n\r\n  chartData: IDonutChartData = { labels: [], datasets: [] };\r\n  chartOptions: IDonutChartOptions = {\r\n    cutout: '60%',\r\n    plugins: {\r\n      legend: {\r\n        labels: {\r\n          color: '#495057',\r\n        },\r\n        position: 'top',\r\n      },\r\n    },\r\n  };\r\n\r\n  ngOnInit(): void {\r\n    this.updateChart();\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  ngOnChanges(_changes: SimpleChanges): void {\r\n    this.updateChart();\r\n  }\r\n\r\n  private updateChart(): void {\r\n    this.chartData = JSON.parse(JSON.stringify(this.data));\r\n\r\n    this.chartOptions = {\r\n      ...this.chartOptions,\r\n      ...this.options,\r\n    };\r\n\r\n    if (!this.options.cutout) {\r\n      this.chartOptions.cutout = '60%';\r\n    }\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./donut-chart.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "OnChanges",
                "IDonutChartProps"
            ],
            "templateData": "<div class=\"card flex justify-content-center\">\r\n  <p-chart\r\n    type=\"doughnut\"\r\n    [data]=\"chartData\"\r\n    [options]=\"chartOptions\"\r\n    [style]=\"chartStyle\"\r\n    [width]=\"width\"\r\n    [height]=\"height\"\r\n    [responsive]=\"responsive\"\r\n    [class]=\"chartClass\"\r\n    [ariaLabel]=\"ariaLabel\"\r\n  ></p-chart>\r\n</div>\r\n"
        },
        {
            "name": "EditorComponent",
            "id": "component-EditorComponent-782ccc624b6984f8d209df0c17f4560a1f8e1dc4afdb8ccf97453c4f2fca36b6ca0b881a1fc176e0f41b4f2e18338b14211853166f7b544362c02f184092cad0",
            "file": "src/app/shared/components/editor/editor.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => EditorComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-editor",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./editor.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "formats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Record<string | >",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "defaultValue": "{ height: '320px' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                }
            ],
            "methodsClass": [
                {
                    "name": "onTextChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "ITextChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ITextChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "Editor"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef, ViewEncapsulation } from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { Editor } from 'primeng/editor';\r\nimport { IEditorProps, ITextChangeEvent } from '../../types/editor.types';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-editor',\r\n  templateUrl: './editor.component.html',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule, Editor, CommonModule],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => EditorComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class EditorComponent implements ControlValueAccessor, IEditorProps {\r\n  @Input() formControl!: FormControl;\r\n  @Input() style?: Record<string, string> = { height: '320px' };\r\n  @Input() styleClass?: string;\r\n  @Input() placeholder?: string;\r\n  @Input() formats?: string[];\r\n  @Input() modules?: Record<string, unknown>;\r\n  @Input() readOnly = false;\r\n\r\n  value = '';\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onChange: (value: string) => void = () => {};\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onTouch: () => void = () => {};\r\n\r\n  writeValue(value: string): void {\r\n    this.value = value;\r\n    this.formControl.setValue(value, { emitEvent: false });\r\n  }\r\n\r\n  registerOnChange(fn: (value: string) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  onTextChange(event: ITextChangeEvent): void {\r\n    this.value = event.htmlValue || '';\r\n    this.onChange(this.value);\r\n    this.onTouch();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "IEditorProps"
            ],
            "templateData": "<div class=\"card\">\r\n  <p-editor\r\n    [formControl]=\"formControl\"\r\n    [style]=\"style\"\r\n    [styleClass]=\"styleClass\"\r\n    [placeholder]=\"placeholder\"\r\n    [formats]=\"formats\"\r\n    [modules]=\"modules\"\r\n    [readonly]=\"readOnly\"\r\n    (onTextChange)=\"onTextChange($event)\"\r\n  >\r\n  </p-editor>\r\n</div>\r\n"
        },
        {
            "name": "ExampleCrudViewComponent",
            "id": "component-ExampleCrudViewComponent-bd7d720a63861980a85d1f209a101fcad35fa3b717d0be3dce743cd06599a56db3466aef2cafd79f37a3ebac426625a0270b63f11f0f76d915480e78a4bac28d",
            "file": "src/app/features/example-crud-view/example-crud-view.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-example-crud-view",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./example-crud-view.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "confirmDialogVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "dialogVisible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "editMode",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "exampleCrudService",
                    "defaultValue": "inject(ExampleCrudService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "exampleForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<ExampleCrudForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "formService",
                    "defaultValue": "inject(FormService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "karmelki",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IKarmelki[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "RouterEnum",
                    "defaultValue": "RouterEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "selectedKarmelek",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IKarmelki | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "confirmDelete",
                    "args": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 145,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "deleteKarmelek",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 150,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "editKarmelek",
                    "args": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "karmelek",
                            "type": "IKarmelki",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "hideDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadKarmelki",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveKarmelek",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 112,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showDialog",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TableModule",
                    "type": "module"
                },
                {
                    "name": "TagModule",
                    "type": "module"
                },
                {
                    "name": "CalendarModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "CheckboxComponent",
                    "type": "component"
                },
                {
                    "name": "ConfirmModalComponent",
                    "type": "component"
                },
                {
                    "name": "ReusableModalComponent",
                    "type": "component"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, inject, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { TableModule } from 'primeng/table';\r\nimport { TagModule } from 'primeng/tag';\r\nimport { CalendarModule } from 'primeng/calendar';\r\nimport { RouterEnum } from '../../enums/router.enum';\r\nimport { ButtonComponent } from '../../shared/components/button/button.component';\r\nimport { InputComponent } from '../../shared/components/input/input.component';\r\nimport { ConfirmModalComponent } from '../../shared/components/confirm-modal/confirm-modal.component';\r\nimport { ExampleCrudForm } from '../../shared/models/form.model';\r\nimport { ErrorService } from '../../shared/services/error.service';\r\nimport { FormService } from '../../shared/services/form.service';\r\nimport { IKarmelki, IKarmelkiResponse } from '../../core/_models/karmelki.model';\r\nimport { ExampleCrudService } from '../../core/_services/example-crud.service';\r\nimport { IBaseResponse } from '../../core/_models/base-response.model';\r\nimport { ReusableModalComponent } from '../../shared/components/reusable-modal/reusable-modal.component';\r\nimport { CheckboxComponent } from '../../shared/components/checkbox/checkbox.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-example-crud-view',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    TableModule,\r\n    TagModule,\r\n    CalendarModule,\r\n    ButtonComponent,\r\n    InputComponent,\r\n    CheckboxComponent,\r\n    ConfirmModalComponent,\r\n    ReusableModalComponent,\r\n    TranslateModule,\r\n  ],\r\n  templateUrl: './example-crud-view.component.html',\r\n  styleUrl: './example-crud-view.component.scss',\r\n})\r\nexport class ExampleCrudViewComponent implements OnInit {\r\n  exampleForm!: FormGroup<ExampleCrudForm>;\r\n  RouterEnum = RouterEnum;\r\n  karmelki: IKarmelki[] = [];\r\n  totalRecords = 0;\r\n  loading = false;\r\n  dialogVisible = false;\r\n  confirmDialogVisible = false;\r\n  editMode = false;\r\n  selectedKarmelek: IKarmelki | null = null;\r\n\r\n  private formService = inject(FormService);\r\n  private errorService = inject(ErrorService);\r\n  private exampleCrudService = inject(ExampleCrudService);\r\n\r\n  ngOnInit() {\r\n    this.exampleForm = this.formService.getExampleCrudForm();\r\n    this.loadKarmelki();\r\n  }\r\n\r\n  get controls() {\r\n    return this.exampleForm.controls;\r\n  }\r\n\r\n  getErrorMessage(control: FormControl) {\r\n    return this.errorService.getErrorMessage(control);\r\n  }\r\n\r\n  loadKarmelki(event?: { first: number; rows: number }) {\r\n    this.loading = true;\r\n    const pageNumber = event ? event.first / event.rows + 1 : 1;\r\n    const pageSize = event ? event.rows : 10;\r\n\r\n    this.exampleCrudService.getPagedKarmelki({ pageNumber, pageSize }).subscribe({\r\n      next: (response: IBaseResponse<IKarmelkiResponse>) => {\r\n        this.karmelki = response.data.items;\r\n        this.totalRecords = response.data.totalCount;\r\n        this.loading = false;\r\n      },\r\n      error: error => {\r\n        console.error('Błąd podczas pobierania karmelków', error);\r\n        this.loading = false;\r\n      },\r\n    });\r\n  }\r\n\r\n  showDialog() {\r\n    this.editMode = false;\r\n    this.exampleForm.reset();\r\n    this.controls.isZiemniak.setValue(false);\r\n    this.controls.arrivalDate.setValue(new Date());\r\n    this.dialogVisible = true;\r\n  }\r\n\r\n  hideDialog() {\r\n    this.dialogVisible = false;\r\n  }\r\n\r\n  editKarmelek(karmelek: IKarmelki) {\r\n    this.editMode = true;\r\n    this.selectedKarmelek = karmelek;\r\n    this.exampleForm.patchValue({\r\n      id: karmelek.id || '',\r\n      name: karmelek.name,\r\n      count: karmelek.count,\r\n      price: karmelek.price,\r\n      isZiemniak: karmelek.isZiemniak,\r\n      arrivalDate: new Date(karmelek.arrivalDate),\r\n    });\r\n    this.dialogVisible = true;\r\n  }\r\n\r\n  saveKarmelek() {\r\n    if (this.exampleForm.invalid) {\r\n      return;\r\n    }\r\n\r\n    const karmelek: IKarmelki = {\r\n      name: this.controls.name.value,\r\n      count: this.controls.count.value,\r\n      price: this.controls.price.value,\r\n      isZiemniak: this.controls.isZiemniak.value,\r\n      arrivalDate: this.controls.arrivalDate.value,\r\n    };\r\n\r\n    if (this.editMode && this.selectedKarmelek?.id) {\r\n      karmelek.id = this.selectedKarmelek.id;\r\n      this.exampleCrudService.updateKarmelek(this.selectedKarmelek.id, karmelek).subscribe({\r\n        next: () => {\r\n          this.loadKarmelki();\r\n          this.hideDialog();\r\n        },\r\n        error: error => console.error('Błąd podczas aktualizacji karmelka', error),\r\n      });\r\n    } else {\r\n      this.exampleCrudService.createKarmelek(karmelek).subscribe({\r\n        next: () => {\r\n          this.loadKarmelki();\r\n          this.hideDialog();\r\n        },\r\n        error: error => console.error('Błąd podczas tworzenia karmelka', error),\r\n      });\r\n    }\r\n  }\r\n\r\n  confirmDelete(karmelek: IKarmelki) {\r\n    this.selectedKarmelek = karmelek;\r\n    this.confirmDialogVisible = true;\r\n  }\r\n\r\n  deleteKarmelek() {\r\n    if (this.selectedKarmelek?.id) {\r\n      this.exampleCrudService.deleteKarmelek(this.selectedKarmelek.id).subscribe({\r\n        next: () => {\r\n          this.confirmDialogVisible = false;\r\n          this.loadKarmelki();\r\n        },\r\n        error: error => console.error('Błąd podczas usuwania karmelka', error),\r\n      });\r\n    }\r\n  }\r\n}\r\n",
            "styleUrl": "./example-crud-view.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 60
                    }
                }
            },
            "templateData": "<div class=\"card p-4\">\r\n  <div class=\"flex justify-between items-center mb-6\">\r\n    <h2>{{ 'EXAMPLE-CRUD.TITLE' | translate }}</h2>\r\n    <app-button\r\n      label=\"{{ 'EXAMPLE-CRUD.ADD_NEW' | translate }}\"\r\n      icon=\"pi pi-plus\"\r\n      (onClick)=\"showDialog()\"\r\n    ></app-button>\r\n  </div>\r\n  <!-- TODO: zrobić reużywalną tabelkę -->\r\n  <p-table\r\n    [value]=\"karmelki\"\r\n    [paginator]=\"true\"\r\n    [rows]=\"10\"\r\n    [responsive]=\"true\"\r\n    styleClass=\"p-datatable-gridlines p-datatable-sm\"\r\n    [totalRecords]=\"totalRecords\"\r\n    [loading]=\"loading\"\r\n    [lazy]=\"true\"\r\n    (onPage)=\"loadKarmelki($event)\"\r\n  >\r\n    <ng-template pTemplate=\"header\">\r\n      <tr>\r\n        <th>{{ 'EXAMPLE-CRUD.NAME' | translate }}</th>\r\n        <th>{{ 'EXAMPLE-CRUD.COUNT' | translate }}</th>\r\n        <th>{{ 'EXAMPLE-CRUD.PRICE' | translate }}</th>\r\n        <th>{{ 'EXAMPLE-CRUD.ZIEMNIAK' | translate }}</th>\r\n        <th>{{ 'EXAMPLE-CRUD.ARRIVAL_DATE' | translate }}</th>\r\n        <th>{{ 'EXAMPLE-CRUD.ACTIONS' | translate }}</th>\r\n      </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"body\" let-karmelek>\r\n      <tr>\r\n        <td>{{ karmelek.name }}</td>\r\n        <td>{{ karmelek.count }}</td>\r\n        <td>{{ karmelek.price | currency: 'PLN' : 'symbol' : '1.2-2' }}</td>\r\n        <td>\r\n          <p-tag\r\n            [severity]=\"karmelek.isZiemniak ? 'success' : 'danger'\"\r\n            [value]=\"(karmelek.isZiemniak ? 'UTILS.YES' : 'UTILS.NO') | translate\"\r\n          >\r\n          </p-tag>\r\n        </td>\r\n        <td>{{ karmelek.arrivalDate | date: 'dd/MM/yyyy' }}</td>\r\n        <td>\r\n          <div class=\"flex gap-2\">\r\n            <app-button\r\n              icon=\"pi pi-pencil\"\r\n              severity=\"info\"\r\n              (onClick)=\"editKarmelek(karmelek)\"\r\n            ></app-button>\r\n            <app-button\r\n              icon=\"pi pi-trash\"\r\n              severity=\"danger\"\r\n              (onClick)=\"confirmDelete(karmelek)\"\r\n            ></app-button>\r\n          </div>\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n    <ng-template pTemplate=\"emptymessage\">\r\n      <tr>\r\n        <td colspan=\"6\" class=\"text-center p-4\">\r\n          {{ 'EXAMPLE-CRUD.NO_DATA_TO_DISPLAY' | translate }}\r\n        </td>\r\n      </tr>\r\n    </ng-template>\r\n  </p-table>\r\n</div>\r\n<!-- TODO: poprawić wygląd i działanie modala -->\r\n<app-reusable-modal\r\n  [visible]=\"dialogVisible\"\r\n  [header]=\"(editMode ? 'EXAMPLE-CRUD.EDIT' : 'EXAMPLE-CRUD.ADD_NEW') | translate\"\r\n  [style]=\"{ width: '500px' }\"\r\n  [draggable]=\"false\"\r\n>\r\n  <form [formGroup]=\"exampleForm\" (ngSubmit)=\"saveKarmelek()\">\r\n    <div class=\"grid gap-4\">\r\n      <div class=\"col-12\">\r\n        <app-input\r\n          [formControl]=\"controls.name\"\r\n          [label]=\"'EXAMPLE-CRUD.NAME' | translate\"\r\n          [errorMessage]=\"getErrorMessage(controls.name)\"\r\n          [invalid]=\"controls.name.invalid && (controls.name.dirty || controls.name.touched)\"\r\n          [placeholder]=\"'EXAMPLE-CRUD.INPUT_NAME' | translate\"\r\n          autocomplete=\"name\"\r\n        >\r\n        </app-input>\r\n      </div>\r\n\r\n      <div class=\"col-6\">\r\n        <app-input\r\n          [formControl]=\"controls.count\"\r\n          [label]=\"'EXAMPLE-CRUD.COUNT' | translate\"\r\n          type=\"number\"\r\n          [errorMessage]=\"getErrorMessage(controls.count)\"\r\n          [invalid]=\"controls.count.invalid && (controls.count.dirty || controls.count.touched)\"\r\n          [placeholder]=\"'EXAMPLE-CRUD.INPUT_COUNT' | translate\"\r\n          autocomplete=\"off\"\r\n        >\r\n        </app-input>\r\n      </div>\r\n\r\n      <div class=\"col-6\">\r\n        <app-input\r\n          [formControl]=\"controls.price\"\r\n          [label]=\"'EXAMPLE-CRUD.PRICE' | translate\"\r\n          type=\"number\"\r\n          [errorMessage]=\"getErrorMessage(controls.price)\"\r\n          [invalid]=\"controls.price.invalid && (controls.price.dirty || controls.price.touched)\"\r\n          [placeholder]=\"'EXAMPLE-CRUD.INPUT_PRICE' | translate\"\r\n          suffixText=\"PLN\"\r\n          autocomplete=\"off\"\r\n        >\r\n        </app-input>\r\n      </div>\r\n\r\n      <div class=\"col-12 mb-3\">\r\n        <app-checkbox\r\n          [formControl]=\"controls.isZiemniak\"\r\n          binary=\"true\"\r\n          [label]=\"'EXAMPLE-CRUD.IS_ZIEMNIAK' | translate\"\r\n          [errorMessage]=\"getErrorMessage(controls.isZiemniak)\"\r\n          [invalid]=\"\r\n            controls.isZiemniak.invalid &&\r\n            (controls.isZiemniak.dirty || controls.isZiemniak.touched)\r\n          \"\r\n        >\r\n        </app-checkbox>\r\n      </div>\r\n    </div>\r\n    <!-- TODO: zrobić reużywalny komponent kalendarza -->\r\n    <div class=\"col-12 mb-3\">\r\n      <div class=\"p-field w-full\">\r\n        <label for=\"arrivalDate\" class=\"block mb-1\">{{\r\n          'EXAMPLE-CRUD.ARRIVAL_DATE' | translate\r\n        }}</label>\r\n        <p-calendar\r\n          [formControl]=\"controls.arrivalDate\"\r\n          dateFormat=\"dd/mm/yy\"\r\n          [showIcon]=\"true\"\r\n          inputId=\"arrivalDate\"\r\n          [style]=\"{ width: '50%' }\"\r\n        ></p-calendar>\r\n        <small\r\n          *ngIf=\"\r\n            controls.arrivalDate.invalid &&\r\n            (controls.arrivalDate.dirty || controls.arrivalDate.touched)\r\n          \"\r\n          class=\"p-error\"\r\n          >{{ getErrorMessage(controls.arrivalDate) }}</small\r\n        >\r\n      </div>\r\n    </div>\r\n\r\n    <div class=\"flex justify-end gap-3 mt-6\">\r\n      <app-button\r\n        [label]=\"'UTILS.CANCEL' | translate\"\r\n        severity=\"secondary\"\r\n        (onClick)=\"hideDialog()\"\r\n      ></app-button>\r\n      <app-button\r\n        [label]=\"'UTILS.SAVE' | translate\"\r\n        type=\"submit\"\r\n        [disabled]=\"exampleForm.invalid\"\r\n      ></app-button>\r\n    </div>\r\n  </form>\r\n</app-reusable-modal>\r\n\r\n<app-confirm-modal\r\n  [visible]=\"confirmDialogVisible\"\r\n  [header]=\"'EXAMPLE-CRUD.CONFIRM_DELETE_TITLE' | translate\"\r\n  [message]=\"'EXAMPLE-CRUD.CONFIRM_DELETE_MESSAGE' | translate\"\r\n  [yesLabel]=\"'UTILS.YES' | translate\"\r\n  [noLabel]=\"'UTILS.NO' | translate\"\r\n  (yes)=\"deleteKarmelek()\"\r\n  (no)=\"confirmDialogVisible = false\"\r\n>\r\n</app-confirm-modal>\r\n"
        },
        {
            "name": "FileTableComponent",
            "id": "component-FileTableComponent-67391ca85ea1af15583ebdc04232cd7d5ea31675ee07f0a63512cde0a64485426cbfafe9861881d9dea704949ee536a3ad08b7e231d87bd90f7e2566315a0aa7",
            "file": "src/app/shared/components/file-table/file-table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./file-table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "defaultSortField",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultSortOrder",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "enablePagination",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "files",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "IFileItem[]",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "paginatorPosition",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "Position",
                    "decorators": []
                },
                {
                    "name": "rowsPerPage",
                    "defaultValue": "10",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "showActionButtons",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showActions",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSearchBar",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "fileAction",
                    "defaultValue": "new EventEmitter<{ action: string; file: IFileItem }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter<{ page: number; rows: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contextMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "fileContextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContextMenuComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'fileContextMenu'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "langChangeSubscription",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "selectedFile",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFileItem | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                },
                {
                    "name": "translateService",
                    "defaultValue": "inject(TranslateService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "deleteFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 154,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "downloadFile",
                    "args": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 149,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "formatFileSize",
                    "args": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 119,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "bytes",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getFileIcon",
                    "args": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 95,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleContextMenuAction",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 91,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initContextMenuItems",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onFileAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "\"download\" | \"preview\" | \"delete\"",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 133,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "\"download\" | \"preview\" | \"delete\"",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onFileContextMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 85,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "file",
                            "type": "IFileItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGlobalFilter",
                    "args": [
                        {
                            "name": "table",
                            "type": "Table",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 129,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "table",
                            "type": "Table",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "Event",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRefresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 158,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TableModule",
                    "type": "module"
                },
                {
                    "name": "TooltipModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ContextMenuComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, inject, Input, OnInit, Output, ViewChild } from '@angular/core';\r\nimport { Table, TableModule } from 'primeng/table';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { TranslateModule, TranslateService } from '@ngx-translate/core';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { InputComponent } from '../input/input.component';\r\nimport { ContextMenuComponent } from '../context-menu/context-menu.component';\r\nimport { MenuItem } from 'primeng/api';\r\nimport { Subscription } from 'rxjs';\r\nimport { Router } from '@angular/router';\r\nimport { RouterEnum } from '../../../enums/router.enum';\r\nimport { IFileItem, IFileTableProps, Position } from '../../types/file-type.types';\r\n\r\n@Component({\r\n  selector: 'app-file-table',\r\n  standalone: true,\r\n  imports: [\r\n    TableModule,\r\n    TooltipModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule,\r\n    ButtonComponent,\r\n    InputComponent,\r\n    ContextMenuComponent,\r\n  ],\r\n  templateUrl: './file-table.component.html',\r\n  styleUrl: './file-table.component.scss',\r\n})\r\nexport class FileTableComponent implements OnInit, IFileTableProps {\r\n  @Input() files: IFileItem[] = [];\r\n  @Input() enablePagination = true;\r\n  @Input() rowsPerPage = 10;\r\n  @Input() showActions = true;\r\n  @Input() showSearchBar = true;\r\n  @Input() showActionButtons = true;\r\n  @Input() defaultSortField = 'name';\r\n  @Input() defaultSortOrder = 1;\r\n  @Input() loading = false;\r\n  @Input() totalRecords = 0;\r\n  @Input() paginatorPosition: Position = 'bottom';\r\n  @Output() onPageChange = new EventEmitter<{ page: number; rows: number }>();\r\n  @Output() fileAction = new EventEmitter<{ action: string; file: IFileItem }>();\r\n\r\n  @ViewChild('fileContextMenu') fileContextMenu!: ContextMenuComponent;\r\n\r\n  searchControl = new FormControl('');\r\n  contextMenuItems: MenuItem[] = [];\r\n  selectedFile: IFileItem | null = null;\r\n\r\n  private translateService = inject(TranslateService);\r\n  private router = inject(Router);\r\n  private langChangeSubscription: Subscription | null = null;\r\n\r\n  ngOnInit() {\r\n    this.initContextMenuItems();\r\n\r\n    this.langChangeSubscription = this.translateService.onLangChange.subscribe(() => {\r\n      this.initContextMenuItems();\r\n    });\r\n  }\r\n\r\n  initContextMenuItems() {\r\n    this.contextMenuItems = [\r\n      {\r\n        label: this.translateService.instant('FILE_TABLE.DOWNLOAD'),\r\n        icon: 'pi pi-download',\r\n        command: () => this.onFileAction('download', this.selectedFile!),\r\n      },\r\n      {\r\n        label: this.translateService.instant('FILE_TABLE.PREVIEW'),\r\n        icon: 'pi pi-eye',\r\n        command: () => this.onFileAction('preview', this.selectedFile!),\r\n      },\r\n      {\r\n        label: this.translateService.instant('FILE_TABLE.DELETE'),\r\n        icon: 'pi pi-trash',\r\n        styleClass: 'p-error',\r\n        command: () => this.onFileAction('delete', this.selectedFile!),\r\n      },\r\n    ];\r\n  }\r\n  onFileContextMenu(event: MouseEvent, file: IFileItem) {\r\n    this.selectedFile = file;\r\n    this.fileContextMenu.show(event);\r\n    event.preventDefault();\r\n  }\r\n\r\n  handleContextMenuAction(event: { originalEvent: Event; item: MenuItem }) {\r\n    console.log('Context menu action', event);\r\n  }\r\n\r\n  getFileIcon(file: IFileItem): string {\r\n    if (file.icon) return file.icon;\r\n\r\n    const iconMap: Record<string, string> = {\r\n      pdf: 'pi pi-file-pdf',\r\n      doc: 'pi pi-file-word',\r\n      docx: 'pi pi-file-word',\r\n      xls: 'pi pi-file-excel',\r\n      xlsx: 'pi pi-file-excel',\r\n      ppt: 'pi pi-file',\r\n      pptx: 'pi pi-file',\r\n      jpg: 'pi pi-image',\r\n      jpeg: 'pi pi-image',\r\n      png: 'pi pi-image',\r\n      gif: 'pi pi-image',\r\n      txt: 'pi pi-file',\r\n      zip: 'pi pi-file',\r\n      folder: 'pi pi-folder',\r\n    };\r\n\r\n    const fileType = file.type.toLowerCase();\r\n    return iconMap[fileType] || 'pi pi-file';\r\n  }\r\n\r\n  formatFileSize(bytes: number): string {\r\n    if (bytes === 0) return '0 B';\r\n\r\n    const k = 1024;\r\n    const sizes = ['B', 'KB', 'MB', 'GB', 'TB'];\r\n    const i = Math.floor(Math.log(bytes) / Math.log(k));\r\n\r\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];\r\n  }\r\n\r\n  onGlobalFilter(table: Table, event: Event) {\r\n    table.filterGlobal(event, 'contains');\r\n  }\r\n\r\n  onFileAction(action: 'download' | 'preview' | 'delete', file: IFileItem) {\r\n    console.log(`Action ${action} on file: ${file.name}`);\r\n    this.fileAction.emit({ action, file });\r\n\r\n    if (action === 'preview') {\r\n      this.router.navigate([RouterEnum.fileDetails], {\r\n        queryParams: {\r\n          id: file.id,\r\n          name: file.name,\r\n          type: file.type,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private downloadFile(file: IFileItem): void {\r\n    // Implement download logic\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  private deleteFile(file: IFileItem): void {\r\n    // Implement delete logic\r\n  }\r\n\r\n  onRefresh() {\r\n    console.log('Refreshing file list');\r\n  }\r\n}\r\n",
            "styleUrl": "./file-table.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "IFileTableProps"
            ],
            "templateData": "<app-context-menu\r\n  #fileContextMenu\r\n  [items]=\"contextMenuItems\"\r\n  (onItemSelect)=\"handleContextMenuAction($event)\"\r\n>\r\n</app-context-menu>\r\n\r\n<p-table\r\n  #dt\r\n  [value]=\"files\"\r\n  [paginator]=\"enablePagination\"\r\n  [rows]=\"rowsPerPage\"\r\n  [totalRecords]=\"files.length\"\r\n  [rowsPerPageOptions]=\"[5, 10, 25, 50]\"\r\n  [paginatorPosition]=\"paginatorPosition\"\r\n  [globalFilterFields]=\"['name', 'type']\"\r\n  styleClass=\"p-datatable-sm\"\r\n  [tableStyle]=\"{ 'min-width': '50rem' }\"\r\n  [sortField]=\"defaultSortField\"\r\n  [sortOrder]=\"defaultSortOrder\"\r\n>\r\n  <ng-template pTemplate=\"caption\">\r\n    @if (showSearchBar) {\r\n      <div class=\"flex justify-content-between\">\r\n        <span>\r\n          <app-input\r\n            [formControl]=\"searchControl\"\r\n            [placeholder]=\"'FILE_TABLE.SEARCH_PLACEHOLDER' | translate\"\r\n            prefixIcon=\"search\"\r\n            (ngModelChange)=\"onGlobalFilter(dt, $event)\"\r\n            autocomplete=\"off\"\r\n          >\r\n          </app-input>\r\n        </span>\r\n        @if (showActionButtons) {\r\n          <span>\r\n            <app-button\r\n              [label]=\"'FILE_TABLE.REFRESH' | translate\"\r\n              icon=\"pi-refresh\"\r\n              (onClick)=\"onRefresh()\"\r\n            >\r\n            </app-button>\r\n          </span>\r\n        }\r\n      </div>\r\n    }\r\n  </ng-template>\r\n\r\n  <ng-template pTemplate=\"header\">\r\n    <tr>\r\n      <th pSortableColumn=\"name\" style=\"min-width: 14rem\">\r\n        {{ 'FILE_TABLE.NAME' | translate }} <p-sortIcon field=\"name\"></p-sortIcon>\r\n      </th>\r\n      <th pSortableColumn=\"type\" style=\"min-width: 8rem\">\r\n        {{ 'FILE_TABLE.TYPE' | translate }} <p-sortIcon field=\"type\"></p-sortIcon>\r\n      </th>\r\n      <th pSortableColumn=\"size\" style=\"min-width: 8rem\">\r\n        {{ 'FILE_TABLE.SIZE' | translate }} <p-sortIcon field=\"size\"></p-sortIcon>\r\n      </th>\r\n      <th pSortableColumn=\"lastModified\" style=\"min-width: 10rem\">\r\n        {{ 'FILE_TABLE.LAST_MODIFIED' | translate }} <p-sortIcon field=\"lastModified\"></p-sortIcon>\r\n      </th>\r\n      @if (showActions) {\r\n        <th style=\"min-width: 8rem\">{{ 'FILE_TABLE.ACTIONS' | translate }}</th>\r\n      }\r\n    </tr>\r\n  </ng-template>\r\n\r\n  <ng-template pTemplate=\"body\" let-file>\r\n    <tr (contextmenu)=\"onFileContextMenu($event, file)\">\r\n      <td>\r\n        <div class=\"flex align-items-center gap-2\">\r\n          <i [class]=\"getFileIcon(file)\" style=\"font-size: 1.5rem\"></i>\r\n          <span>{{ file.name }}</span>\r\n        </div>\r\n      </td>\r\n      <td>{{ file.type }}</td>\r\n      <td>{{ formatFileSize(file.size) }}</td>\r\n      <td>{{ file.lastModified | date: 'medium' }}</td>\r\n      @if (showActions) {\r\n        <td>\r\n          <div class=\"flex gap-2\">\r\n            <app-button\r\n              icon=\"pi pi-download\"\r\n              variant=\"text\"\r\n              [rounded]=\"true\"\r\n              ariaLabel=\"{{ 'FILE_TABLE.DOWNLOAD' | translate }}\"\r\n              (onClick)=\"onFileAction('download', file)\"\r\n            >\r\n            </app-button>\r\n            <app-button\r\n              icon=\"pi pi-eye\"\r\n              variant=\"text\"\r\n              [rounded]=\"true\"\r\n              ariaLabel=\"{{ 'FILE_TABLE.PREVIEW' | translate }}\"\r\n              (onClick)=\"onFileAction('preview', file)\"\r\n            >\r\n            </app-button>\r\n            <app-button\r\n              icon=\"pi pi-trash\"\r\n              severity=\"danger\"\r\n              variant=\"text\"\r\n              [rounded]=\"true\"\r\n              ariaLabel=\"{{ 'FILE_TABLE.DELETE' | translate }}\"\r\n              (onClick)=\"onFileAction('delete', file)\"\r\n            >\r\n            </app-button>\r\n          </div>\r\n        </td>\r\n      }\r\n    </tr>\r\n  </ng-template>\r\n\r\n  <ng-template pTemplate=\"emptymessage\">\r\n    <tr>\r\n      <td colspan=\"5\" class=\"text-center p-4\">\r\n        <i class=\"pi pi-folder-open\" style=\"font-size: 2rem; opacity: 0.5\"></i>\r\n        <p>{{ 'FILE_TABLE.NO_FILES' | translate }}</p>\r\n      </td>\r\n    </tr>\r\n  </ng-template>\r\n</p-table>\r\n"
        },
        {
            "name": "FileUploaderComponent",
            "id": "component-FileUploaderComponent-d12499284c433778bc1ec60e65ab0175a51f1a49be5451c34839c5aa50ebb2f989f44c05b2e7218b971c633819791c4c04fc8ed834c214d26be6d30e4d66af14",
            "file": "src/app/shared/components/file-uploader/file-uploader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-uploader",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./file-uploader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "'image/*'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "auto",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "cancelLabel",
                    "defaultValue": "'Cancel'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "chooseLabel",
                    "defaultValue": "'Choose'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Drag and drop files to here to upload.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxFileSize",
                    "defaultValue": "1000000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'basic'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "IFileUploadMode",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'files'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showCancelButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showUploadButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "uploadLabel",
                    "defaultValue": "'Upload'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "useService",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onFileUpload",
                    "defaultValue": "new EventEmitter<File[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "uploadedFiles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "methodsClass": [
                {
                    "name": "clearUploadedFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpload",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onUploadHandler",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FileUploadModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FileUploadModule } from 'primeng/fileupload';\r\nimport { IFileUploadMode, IFileUploadProps } from '../../types/fileUploader.types';\r\n\r\n@Component({\r\n  selector: 'app-file-uploader',\r\n  templateUrl: './file-uploader.component.html',\r\n  standalone: true,\r\n  imports: [FileUploadModule, CommonModule],\r\n})\r\nexport class FileUploaderComponent implements IFileUploadProps {\r\n  @Input() url = '';\r\n  @Input() multiple = true;\r\n  @Input() accept = 'image/*';\r\n  @Input() maxFileSize = 1000000;\r\n  @Input() mode: IFileUploadMode = 'basic';\r\n  @Input() emptyMessage = 'Drag and drop files to here to upload.';\r\n  @Input() name = 'files';\r\n  @Input() auto = false;\r\n  @Input() showCancelButton = true;\r\n  @Input() showUploadButton = true;\r\n  @Input() chooseLabel = 'Choose';\r\n  @Input() uploadLabel = 'Upload';\r\n  @Input() cancelLabel = 'Cancel';\r\n  @Input() useService = true;\r\n\r\n  @Output() onFileUpload = new EventEmitter<File[]>();\r\n  uploadedFiles: File[] = [];\r\n\r\n  onUpload(event: { files: File[] }) {\r\n    for (const file of event.files) {\r\n      this.uploadedFiles.push(file);\r\n    }\r\n    this.onFileUpload.emit(event.files);\r\n  }\r\n\r\n  onUploadHandler(event: { files: File[] }) {\r\n    const files = event.files;\r\n    this.onFileUpload.emit(files);\r\n  }\r\n\r\n  clearUploadedFiles() {\r\n    this.uploadedFiles = [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IFileUploadProps"
            ],
            "templateData": "<div class=\"card\">\r\n  <p-fileupload\r\n    [chooseLabel]=\"chooseLabel\"\r\n    [uploadLabel]=\"uploadLabel\"\r\n    [cancelLabel]=\"cancelLabel\"\r\n    [name]=\"name\"\r\n    [url]=\"useService ? undefined : url\"\r\n    [customUpload]=\"useService\"\r\n    (uploadHandler)=\"onUploadHandler($event)\"\r\n    (onUpload)=\"onUpload($event)\"\r\n    [multiple]=\"multiple\"\r\n    [accept]=\"accept\"\r\n    [maxFileSize]=\"maxFileSize\"\r\n    [mode]=\"mode\"\r\n    [auto]=\"auto\"\r\n    [showCancelButton]=\"showCancelButton\"\r\n    [showUploadButton]=\"showUploadButton\"\r\n  >\r\n    <ng-template pTemplate=\"empty\">\r\n      <div>{{ emptyMessage }}</div>\r\n    </ng-template>\r\n\r\n    <ng-template pTemplate=\"content\">\r\n      @if (uploadedFiles.length) {\r\n        <ul>\r\n          @for (file of uploadedFiles; track file) {\r\n            <li>{{ file.name }} - {{ file.size }} bytes</li>\r\n          }\r\n        </ul>\r\n      }\r\n    </ng-template>\r\n  </p-fileupload>\r\n</div>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-efebec1330767228437dca80c2922927e9cb62689fe4fe2cbce1d4223e3277f03c0c3dcd6df91b6548d97af92c290636e9a6a16f468ab8bcfc2f32e3e7d074b6",
            "file": "src/app/shared/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "links",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "socialLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { IFooterProps } from '../../types/footer.types';\r\nimport { IMenuItem } from '../../types/navbar.types';\r\nimport { RouterModule } from '@angular/router';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  standalone: true,\r\n  imports: [CommonModule, RouterModule, TranslateModule],\r\n  templateUrl: './footer.component.html',\r\n  styleUrl: './footer.component.scss',\r\n})\r\nexport class FooterComponent implements IFooterProps {\r\n  @Input() logo?: string;\r\n  @Input() title?: string;\r\n  @Input() links: IMenuItem[] = [];\r\n  @Input() socialLinks: IMenuItem[] = [];\r\n  @Input() customClass?: string;\r\n\r\n  get currentYear(): number {\r\n    return new Date().getFullYear();\r\n  }\r\n}\r\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IFooterProps"
            ],
            "accessors": {
                "currentYear": {
                    "name": "currentYear",
                    "getSignature": {
                        "name": "currentYear",
                        "type": "number",
                        "returnType": "number",
                        "line": 22
                    }
                }
            },
            "templateData": "<footer [class]=\"['footer', customClass]\">\r\n  <div class=\"container\">\r\n    <div class=\"branding\">\r\n      @if (logo) {\r\n        <img [src]=\"logo\" alt=\"Logo\" class=\"logo-img\" />\r\n      }\r\n      @if (title) {\r\n        <span class=\"title\">{{ title | translate }}</span>\r\n      }\r\n    </div>\r\n\r\n    @if (links && links.length) {\r\n      <div class=\"links\">\r\n        @for (link of links; track link) {\r\n          @if (link.routerLink) {\r\n            <a [routerLink]=\"link.routerLink\" [queryParams]=\"link.queryParams\">\r\n              @if (link.icon) {\r\n                <i class=\"{{ link.icon }}\"></i>\r\n              }\r\n              {{ link.label }}\r\n            </a>\r\n          }\r\n          @if (link.url) {\r\n            <a [href]=\"link.url\" [target]=\"link.target\">\r\n              @if (link.icon) {\r\n                <i class=\"{{ link.icon }}\"></i>\r\n              }\r\n              {{ link.label }}\r\n            </a>\r\n          }\r\n        }\r\n      </div>\r\n    }\r\n\r\n    @if (socialLinks && socialLinks.length) {\r\n      <div class=\"social-links\">\r\n        @for (social of socialLinks; track social) {\r\n          @if (social.url) {\r\n            <a [href]=\"social.url\" [target]=\"social.target\">\r\n              @if (social.icon) {\r\n                <i class=\"{{ social.icon }}\"></i>\r\n              }\r\n              {{ social.label }}\r\n            </a>\r\n          }\r\n        }\r\n      </div>\r\n    }\r\n\r\n    <div class=\"copyright\">\r\n      &copy; {{ currentYear }} {{ 'FOOTER.TITLE' | translate }}.\r\n      {{ 'FOOTER.COPYRIGHT' | translate }}\r\n    </div>\r\n  </div>\r\n</footer>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-07f894be6f38e12f30e1e7e5d9e999c27c78ce2f0be03c15c8c5f39207229e147892a2fd1fdb54e935c4f04f03c2162e39a22c28cdc64e027ea15824ddf0f3c9",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ButtonComponent } from './button.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent],\r\n  template: `<header>\r\n    <div class=\"storybook-header\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            [primary]=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin: 6px 0 6px 10px;\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  margin-right: 10px;\r\n  color: #333;\r\n  font-size: 14px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "ImageComponent",
            "id": "component-ImageComponent-85c50e2b61201d323689e72108125e4f9307f5f29877e7fa0207b944ca2a0d54ef5051e58e6558df73d429ea6b9cdb10f825c1b929d586209a49cef18fb22f00",
            "file": "src/app/shared/components/image/image.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-image",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./image.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "alt",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "appendTo",
                    "defaultValue": "'body'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string | HTMLElement",
                    "decorators": []
                },
                {
                    "name": "height",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imageClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "imageStyle",
                    "defaultValue": "{}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "preview",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "src",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "width",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ImageModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { ImageModule } from 'primeng/image';\r\nimport { IImageProps } from '../../types/image.types';\r\n\r\n@Component({\r\n  selector: 'app-image',\r\n  standalone: true,\r\n  imports: [CommonModule, ImageModule],\r\n  templateUrl: './image.component.html',\r\n})\r\nexport class ImageComponent implements IImageProps {\r\n  @Input() src = '';\r\n  @Input() alt = '';\r\n  @Input() width?: string;\r\n  @Input() height?: string;\r\n  @Input() preview = true;\r\n  @Input() imageClass?: string;\r\n  @Input() imageStyle?: Record<string, string> = {};\r\n  @Input() appendTo: string | HTMLElement = 'body';\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IImageProps"
            ],
            "templateData": "<p-image\r\n  [src]=\"src\"\r\n  [alt]=\"alt\"\r\n  [width]=\"width\"\r\n  [height]=\"height\"\r\n  [preview]=\"preview\"\r\n  [imageClass]=\"imageClass\"\r\n  [imageStyle]=\"imageStyle\"\r\n  [appendTo]=\"appendTo\"\r\n>\r\n  <ng-content></ng-content>\r\n</p-image>\r\n"
        },
        {
            "name": "InfoModalComponent",
            "id": "component-InfoModalComponent-8ec19b427d9575d3d5a731ea7a2dda334ef9890af02b795acfec9ebf47a918df1e2b7f046625b168b2b04ef51e93a284e23cb5f853cc4578914bb7daa024874e",
            "file": "src/app/shared/components/info-modal/info-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./info-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "defaultValue": "'Information'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "'Default information message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { IInfoModalProps } from '../../types/modal.types';\r\nimport { ButtonModule } from 'primeng/button';\r\nimport { ButtonComponent } from '../button/button.component';\r\n\r\n@Component({\r\n  selector: 'app-info-modal',\r\n  standalone: true,\r\n  imports: [DialogModule, CommonModule, ButtonModule, ButtonComponent],\r\n  templateUrl: './info-modal.component.html',\r\n  styleUrl: './info-modal.component.scss',\r\n})\r\nexport class InfoModalComponent implements IInfoModalProps {\r\n  @Input() header = 'Information';\r\n  @Input() visible = false;\r\n  @Input() message = 'Default information message';\r\n}\r\n",
            "styleUrl": "./info-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IInfoModalProps"
            ],
            "templateData": "<p-dialog header=\"Information\" [modal]=\"true\" [(visible)]=\"visible\" [style]=\"{ width: '20rem' }\">\r\n  <span class=\"p-text-secondary block mb-4\">{{ message }}</span>\r\n  <div class=\"flex justify-end\">\r\n    <app-button label=\"OK\" (click)=\"visible = false\"></app-button>\r\n  </div>\r\n</p-dialog>\r\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-d278a0f3129a68d8f0a47aa6f109750092f8139b3a9ed57e571fcff2b979fc9f1f9947b6ddcea3b48b528cdca526045436ca32e06dc88bc2dde1aa4af899f1b4",
            "file": "src/app/shared/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "IAutocompletePersonalInfo",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "prefixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "IInputIcons",
                    "decorators": []
                },
                {
                    "name": "prefixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "IInputIcons",
                    "decorators": []
                },
                {
                    "name": "suffixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "IInputTypes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "`input-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "InputNumberModule",
                    "type": "module"
                },
                {
                    "name": "InputGroupModule",
                    "type": "module"
                },
                {
                    "name": "InputGroupAddonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  FormControl,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n  type ControlValueAccessor,\r\n} from '@angular/forms';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { InputNumberModule } from 'primeng/inputnumber';\r\nimport { InputGroupModule } from 'primeng/inputgroup';\r\nimport { InputGroupAddonModule } from 'primeng/inputgroupaddon';\r\nimport { IInputProps, IInputTypes, IInputIcons } from '../../types/input.types';\r\nimport { IAutocompletePersonalInfo } from '../../types/auto-complete.types';\r\n\r\n@Component({\r\n  selector: 'app-input',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    InputTextModule,\r\n    InputNumberModule,\r\n    InputGroupModule,\r\n    InputGroupAddonModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class InputComponent<T> implements ControlValueAccessor, IInputProps {\r\n  @Input() label?: string;\r\n  @Input() placeholder?: string = '';\r\n  @Input() type: IInputTypes = 'text';\r\n  @Input() required = false;\r\n  @Input() errorMessage?: string;\r\n  @Input() invalid?: boolean;\r\n  @Input() prefixIcon?: IInputIcons;\r\n  @Input() prefixText?: string;\r\n  @Input() suffixIcon?: IInputIcons;\r\n  @Input() suffixText?: string;\r\n  @Input() formControl!: FormControl;\r\n  @Input() autocomplete!: IAutocompletePersonalInfo;\r\n\r\n  id = `input-${Math.random().toString(36).substr(2, 9)}`;\r\n  touched = false;\r\n  value: T | null = null;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\r\n  private onChange = (_value: T) => {};\r\n  onTouched = () => {\r\n    this.touched = true;\r\n  };\r\n\r\n  writeValue(value: T): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: (value: T) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  onInput(value: T): void {\r\n    this.value = value;\r\n    this.onChange(value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/utils/extends';\r\n.field {\r\n  @extend %field-layout;\r\n}\r\n\r\nlabel {\r\n  @extend %label-style;\r\n}\r\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "IInputProps"
            ],
            "templateData": "<div class=\"field\">\r\n  @if (label) {\r\n    <label [for]=\"id\" [class.required]=\"required\">{{ label }}</label>\r\n  }\r\n\r\n  <p-inputgroup>\r\n    @if (prefixIcon || prefixText) {\r\n      <p-inputgroup-addon>\r\n        @if (prefixIcon) {\r\n          <i class=\"pi pi-{{ prefixIcon }}\"></i>\r\n        }\r\n        @if (prefixText) {\r\n          {{ prefixText }}\r\n        }\r\n      </p-inputgroup-addon>\r\n    }\r\n    @if (type === 'number') {\r\n      <p-inputnumber\r\n        [id]=\"id\"\r\n        [placeholder]=\"placeholder\"\r\n        [required]=\"required\"\r\n        [(ngModel)]=\"value\"\r\n        (ngModelChange)=\"onInput($event)\"\r\n        (onBlur)=\"onTouched()\"\r\n        [useGrouping]=\"false\"\r\n        [formControl]=\"formControl\"\r\n        [class.ng-invalid]=\"invalid && errorMessage\"\r\n        [autocomplete]=\"autocomplete\"\r\n      />\r\n    } @else {\r\n      <input\r\n        [id]=\"id\"\r\n        pInputText\r\n        [type]=\"type\"\r\n        [placeholder]=\"placeholder\"\r\n        [required]=\"required\"\r\n        [ngModel]=\"value\"\r\n        (ngModelChange)=\"onInput($event)\"\r\n        (blur)=\"onTouched()\"\r\n        [formControl]=\"formControl\"\r\n        [class.ng-invalid]=\"invalid && errorMessage\"\r\n        [autocomplete]=\"autocomplete\"\r\n      />\r\n    }\r\n    @if (suffixIcon || suffixText) {\r\n      <p-inputgroup-addon>\r\n        @if (suffixIcon) {\r\n          <i class=\"pi pi-{{ suffixIcon }}\"></i>\r\n        }\r\n        @if (suffixText) {\r\n          {{ suffixText }}\r\n        }\r\n      </p-inputgroup-addon>\r\n    }\r\n  </p-inputgroup>\r\n\r\n  @if (invalid && errorMessage) {\r\n    <small class=\"p-error\">{{ errorMessage }}</small>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-d18b07f5e9528a5504c3a7c5eee10dc2c4b380c58cfb0da1e1e38ba76ac53359a4651814a0d1803cf202e49ed160a84f5ef53e6d1a51c61c96d918efc599d0db",
            "file": "src/app/features/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formService",
                    "defaultValue": "inject(FormService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<LoginForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "RouterEnum",
                    "defaultValue": "RouterEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 42,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PasswordInputComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { LoginForm } from '../../../shared/models/form.model';\r\nimport { FormService } from '../../../shared/services/form.service';\r\nimport { InputComponent } from '../../../shared/components/input/input.component';\r\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PasswordInputComponent } from '../../../shared/components/password-input/password-input.component';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { AuthService } from '../../../core/_services/auth/auth.service';\r\nimport { RouterEnum } from '../../../enums/router.enum';\r\nimport { ILoginDto } from '../../../core/_models/DTOs/authDto.model';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ErrorService } from '../../../shared/services/error.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    ButtonComponent,\r\n    InputComponent,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    PasswordInputComponent,\r\n    RouterModule,\r\n    TranslateModule,\r\n  ],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss',\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm!: FormGroup<LoginForm>;\r\n  RouterEnum = RouterEnum;\r\n\r\n  protected isLoading = false;\r\n\r\n  private formService = inject(FormService);\r\n  private authService = inject(AuthService);\r\n  private errorService = inject(ErrorService);\r\n  private router = inject(Router);\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formService.getLoginForm();\r\n  }\r\n\r\n  get controls() {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  getErrorMessage(control: FormControl) {\r\n    return this.errorService.getErrorMessage(control);\r\n  }\r\n\r\n  onLogin() {\r\n    this.isLoading = true;\r\n    this.authService.signIn(this.loginForm.getRawValue() as ILoginDto).subscribe({\r\n      next: res => {\r\n        if (res.success) {\r\n          this.router.navigate([RouterEnum.home]);\r\n          this.loginForm.reset();\r\n        } else {\r\n          this.isLoading = false;\r\n        }\r\n      },\r\n      error: _ => {\r\n        this.isLoading = false;\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 46
                    }
                }
            },
            "templateData": "<div class=\"login-page\">\r\n  <h1>{{ 'AUTH.LOGIN_TITLE' | translate }}</h1>\r\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\r\n    <app-input\r\n      [formControl]=\"controls.email\"\r\n      formControlName=\"email\"\r\n      [placeholder]=\"'AUTH.EMAIL' | translate\"\r\n      type=\"email\"\r\n      autocomplete=\"email\"\r\n      [errorMessage]=\"getErrorMessage(controls.email)\"\r\n      [invalid]=\"controls.email.invalid && controls.email.touched\"\r\n      autocomplete=\"email\"\r\n    >\r\n    </app-input>\r\n\r\n    <app-password-input\r\n      [formControl]=\"controls.password\"\r\n      formControlName=\"password\"\r\n      [placeholder]=\"'AUTH.PASSWORD' | translate\"\r\n      autocomplete=\"current-password\"\r\n      [errorMessage]=\"getErrorMessage(controls.password)\"\r\n      [invalid]=\"controls.password.invalid && controls.password.touched\"\r\n      autocomplete=\"current-password\"\r\n    >\r\n    </app-password-input>\r\n\r\n    <div class=\"submit-button\">\r\n      <app-button\r\n        type=\"submit\"\r\n        [disabled]=\"loginForm.invalid || isLoading\"\r\n        severity=\"primary\"\r\n        [label]=\"'AUTH.LOGIN_BUTTON' | translate\"\r\n      >\r\n      </app-button>\r\n    </div>\r\n\r\n    <p class=\"text-center\">\r\n      {{ 'AUTH.FORGOT_PASSWORD_TEXT' | translate }}\r\n      <a routerLink=\"/{{ RouterEnum.forgetPassword }}\">{{ 'AUTH.RECOVER_PASSWORD' | translate }}</a>\r\n    </p>\r\n\r\n    <p class=\"text-center\">\r\n      {{ 'AUTH.NO_ACCOUNT_TEXT' | translate }}\r\n      <a routerLink=\"/{{ RouterEnum.register }}\">{{ 'AUTH.REGISTER' | translate }}</a>\r\n    </p>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-0e47716e0f3a4bc48c5356b903288b69612196158838863e4fc1cb26944542ac1cdce52e95e4af897fb0382c1fc7ef862c105d310ce19f1979fdf6b02742b517",
            "file": "src/app/shared/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "authMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "commonMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "langs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "ILangs",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "nonAuthMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "IMenuItem[]",
                    "decorators": []
                },
                {
                    "name": "showSwitchLang",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSwitchTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'My Application'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userAvatar",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 57,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "combinedMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IMenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "currentLang",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "formService",
                    "defaultValue": "inject(FormService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48
                },
                {
                    "name": "languages",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ILanguage[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "languageService",
                    "defaultValue": "inject(LanguageService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 56,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "mobileMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "RouterEnum",
                    "defaultValue": "RouterEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "themeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<ThemeForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51
                }
            ],
            "methodsClass": [
                {
                    "name": "checkCurrentTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 136,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchLanguage",
                    "args": [
                        {
                            "name": "langValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 151,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "langValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 106,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "IMenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 102,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 127,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MenubarModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ToggleSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, inject, Input, type OnInit } from '@angular/core';\r\nimport { FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { MenubarModule } from 'primeng/menubar';\r\nimport type { ILangs, IMenuItem, INavbarProps } from '../../types/navbar.types';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { ToggleSwitchComponent } from '../toggle-switch/toggle-switch.component';\r\nimport { ThemeForm } from '../../models/form.model';\r\nimport { FormService } from '../../services/form.service';\r\nimport { LanguageService } from '../../../core/_services/language/language.service';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ILanguage } from '../../../core/_models/language.model';\r\nimport { RouterEnum } from '../../../enums/router.enum';\r\nimport { AuthService } from '../../../core/_services/auth/auth.service';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  standalone: true,\r\n  imports: [\r\n    MenubarModule,\r\n    CommonModule,\r\n    ButtonComponent,\r\n    ToggleSwitchComponent,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule,\r\n  ],\r\n  templateUrl: './navbar.component.html',\r\n  styleUrl: './navbar.component.scss',\r\n})\r\nexport class NavbarComponent implements OnInit, INavbarProps {\r\n  @Input() title = 'My Application';\r\n  @Input() logo?: string;\r\n  @Input() menuItems: IMenuItem[] = [];\r\n  @Input() authMenuItems: IMenuItem[] = [];\r\n  @Input() nonAuthMenuItems: IMenuItem[] = [];\r\n  @Input() isAuthenticated = false;\r\n  @Input() userName = '';\r\n  @Input() userAvatar = '';\r\n  @Input() showSwitchTheme = false;\r\n  @Input() showSwitchLang = false;\r\n  @Input() commonMenuItems: IMenuItem[] = [];\r\n  @Input() langs: ILangs = [];\r\n\r\n  combinedMenuItems: IMenuItem[] = [];\r\n  mobileMenuOpen = false;\r\n  isDarkTheme = false;\r\n  languages: ILanguage[] = [];\r\n  currentLang!: string;\r\n  themeForm!: FormGroup<ThemeForm>;\r\n  RouterEnum = RouterEnum;\r\n\r\n  private router = inject(Router);\r\n  private formService = inject(FormService);\r\n  private languageService = inject(LanguageService);\r\n  private authService = inject(AuthService);\r\n\r\n  get controls() {\r\n    return this.themeForm.controls;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.languages = this.languageService.languages;\r\n\r\n    this.currentLang = this.languageService.currentLang;\r\n\r\n    this.languageService.currentLang$.subscribe(lang => {\r\n      this.currentLang = lang;\r\n      this.updateMenu();\r\n    });\r\n    this.updateMenu();\r\n    this.checkCurrentTheme();\r\n\r\n    this.themeForm = this.formService.getThemeForm();\r\n    this.controls.theme.setValue(this.isDarkTheme);\r\n\r\n    this.controls.theme.valueChanges.subscribe(isDark => {\r\n      if (isDark !== this.isDarkTheme) {\r\n        this.isDarkTheme = isDark;\r\n        this.toggleTheme();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.updateMenu();\r\n  }\r\n\r\n  updateMenu() {\r\n    this.combinedMenuItems = [...this.menuItems];\r\n\r\n    if (this.isAuthenticated) {\r\n      this.combinedMenuItems = [...this.combinedMenuItems, ...this.authMenuItems];\r\n    } else {\r\n      this.combinedMenuItems = [...this.combinedMenuItems, ...this.nonAuthMenuItems];\r\n    }\r\n\r\n    this.combinedMenuItems = this.combinedMenuItems.filter(item => item.visible !== false);\r\n  }\r\n\r\n  toggleMobileMenu() {\r\n    this.mobileMenuOpen = !this.mobileMenuOpen;\r\n  }\r\n\r\n  toggleDropdown(item: IMenuItem) {\r\n    item.expanded = !item.expanded;\r\n  }\r\n\r\n  navigateTo(item: IMenuItem) {\r\n    if (item.routerLink) {\r\n      this.router.navigate([item.routerLink]);\r\n    } else if (item.url) {\r\n      window.open(item.url, item.target || '_self');\r\n    } else if (item.command) {\r\n      item.command();\r\n    }\r\n\r\n    this.mobileMenuOpen = false;\r\n  }\r\n\r\n  logout() {\r\n    this.authService.signOut();\r\n    this.updateMenu();\r\n  }\r\n\r\n  toggleTheme() {\r\n    if (this.isDarkTheme) {\r\n      document.body.classList.add('dark-theme');\r\n    } else {\r\n      document.body.classList.remove('dark-theme');\r\n    }\r\n    localStorage.setItem('theme', this.isDarkTheme ? 'dark' : 'light');\r\n  }\r\n\r\n  checkCurrentTheme() {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme === 'dark') {\r\n      this.isDarkTheme = true;\r\n      document.body.classList.add('dark-theme');\r\n    } else if (savedTheme === 'light') {\r\n      this.isDarkTheme = false;\r\n      document.body.classList.remove('dark-theme');\r\n    } else {\r\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n      this.isDarkTheme = prefersDark;\r\n      if (prefersDark) document.body.classList.add('dark-theme');\r\n    }\r\n  }\r\n\r\n  switchLanguage(langValue: string) {\r\n    this.languageService.changeLanguage(langValue);\r\n  }\r\n}\r\n",
            "styleUrl": "./navbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit",
                "INavbarProps"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 59
                    }
                }
            },
            "templateData": "<nav class=\"navbar\">\r\n  <div class=\"navbar-container\">\r\n    <div class=\"navbar-brand\">\r\n      @if (logo) {\r\n        <img [src]=\"logo\" alt=\"Logo\" class=\"navbar-logo\" />\r\n      }\r\n      <h1 class=\"navbar-title\">{{ title | translate }}</h1>\r\n    </div>\r\n\r\n    <button class=\"navbar-mobile-toggle\" (click)=\"toggleMobileMenu()\">\r\n      <span class=\"toggle-icon\"></span>\r\n    </button>\r\n\r\n    <div class=\"navbar-menu\" [class.open]=\"mobileMenuOpen\">\r\n      <ul class=\"navbar-nav\">\r\n        @for (item of combinedMenuItems; track item) {\r\n          <li class=\"nav-item\" [class.has-dropdown]=\"item.items?.length\">\r\n            @if (item.items?.length) {\r\n              <div class=\"nav-link dropdown-toggle\" (click)=\"toggleDropdown(item)\">\r\n                @if (item.icon) {\r\n                  <i class=\"nav-icon {{ item.icon }}\"></i>\r\n                }\r\n                {{ item.label | translate }}\r\n                <i class=\"dropdown-arrow\" [class.expanded]=\"item.expanded\"></i>\r\n              </div>\r\n\r\n              <ul class=\"dropdown-menu\" [class.show]=\"item.expanded\">\r\n                @for (subItem of item.items; track subItem) {\r\n                  <li\r\n                    class=\"dropdown-item\"\r\n                    [class.disabled]=\"subItem.disabled\"\r\n                    (click)=\"!subItem.disabled && navigateTo(subItem)\"\r\n                  >\r\n                    @if (subItem.icon) {\r\n                      <i class=\"nav-icon {{ subItem.icon }}\"></i>\r\n                    }\r\n                    {{ subItem.label | translate }}\r\n                  </li>\r\n                }\r\n              </ul>\r\n            } @else {\r\n              <div\r\n                class=\"nav-link\"\r\n                [class.disabled]=\"item.disabled\"\r\n                (click)=\"!item.disabled && navigateTo(item)\"\r\n              >\r\n                @if (item.icon) {\r\n                  <i class=\"nav-icon {{ item.icon }}\"></i>\r\n                }\r\n                {{ item.label | translate }}\r\n              </div>\r\n            }\r\n          </li>\r\n        }\r\n      </ul>\r\n\r\n      @if (showSwitchLang && langs.length > 0) {\r\n        <div class=\"language-switcher\">\r\n          @for (lang of languages; track lang.value) {\r\n            <app-button\r\n              [label]=\"lang.label\"\r\n              [styleClass]=\"currentLang === lang.value ? 'active-lang' : ''\"\r\n              [variant]=\"currentLang === lang.value ? 'outlined' : 'text'\"\r\n              [severity]=\"currentLang === lang.value ? 'primary' : 'secondary'\"\r\n              (onClick)=\"switchLanguage(lang.value)\"\r\n            >\r\n            </app-button>\r\n          }\r\n        </div>\r\n      }\r\n\r\n      @if (showSwitchTheme) {\r\n        <div class=\"theme-switcher\">\r\n          <form [formGroup]=\"themeForm\">\r\n            <app-toggle-switch\r\n              [formControl]=\"controls.theme\"\r\n              [iconOn]=\"'pi-moon'\"\r\n              [iconOff]=\"'pi-sun'\"\r\n              (onChange)=\"toggleTheme()\"\r\n            >\r\n            </app-toggle-switch>\r\n          </form>\r\n        </div>\r\n      }\r\n\r\n      @if (isAuthenticated) {\r\n        <div class=\"user-section\">\r\n          <div class=\"user-info\">\r\n            <span class=\"user-name\">{{ userName }}</span>\r\n            <div class=\"user-avatar\">\r\n              @if (userAvatar) {\r\n                <img [src]=\"userAvatar\" alt=\"User Avatar\" />\r\n              } @else {\r\n                <div class=\"avatar-placeholder\">\r\n                  {{ userName.charAt(0).toUpperCase() }}\r\n                </div>\r\n              }\r\n            </div>\r\n          </div>\r\n          <button class=\"logout-button\" (click)=\"logout()\">\r\n            <i class=\"logout-icon\"></i>\r\n            {{ 'MENU.LOGOUT' | translate }}\r\n          </button>\r\n        </div>\r\n      }\r\n    </div>\r\n  </div>\r\n</nav>\r\n"
        },
        {
            "name": "NotFoundComponent",
            "id": "component-NotFoundComponent-4a1a1811d359d5fb6ddb3793a243353c7d0bce00f6170d362dc9c5cf32113b27e572f8c5059cc2a85402a942014268b9f94868854fddd6e0fa136ee50c70da89",
            "file": "src/app/features/not-found/not-found.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-not-found",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./not-found.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\n\r\n@Component({\r\n  selector: 'app-not-found',\r\n  standalone: true,\r\n  imports: [TranslateModule],\r\n  templateUrl: './not-found.component.html',\r\n  styleUrl: './not-found.component.scss',\r\n})\r\nexport class NotFoundComponent {}\r\n",
            "styleUrl": "./not-found.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"not-found-page\">\r\n  <h1>{{ 'NOT-FOUND.TITLE' | translate }}</h1>\r\n  <p>{{ 'NOT-FOUND.DESCRIPTION' | translate }}</p>\r\n</div>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-92f4cc9cc0054ccf9d578fc1ebe06b6d7ed1424277151dbedd6cfe73ba15609d9919dcba6e9acbd021b43117d9ce1f28adf6630c681037299b01a4c726c15a8e",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HeaderComponent } from './header.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderComponent],\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section class=\"storybook-page\">\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  margin: 0 auto;\r\n  padding: 48px 20px;\r\n  max-width: 600px;\r\n  color: #333;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.storybook-page h2 {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin: 0 0 4px;\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  color: inherit;\r\n}\r\n\r\n.storybook-page ul {\r\n  margin: 1em 0;\r\n  padding-left: 30px;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin-right: 10px;\r\n  border-radius: 1em;\r\n  background: #e7fdd8;\r\n  padding: 4px 12px;\r\n  color: #357a14;\r\n  font-weight: 700;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n  margin-right: 4px;\r\n  width: 12px;\r\n  height: 12px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PasswordInputComponent",
            "id": "component-PasswordInputComponent-970a7c3c9e44cf6e418681adab790f7dda9515ddf851818183309c37c88ab3b6e9e58edd0355deb4d33dbc79a2e6d0f2280b986f24e4c7a26c98a9cad52606cf",
            "file": "src/app/shared/components/password-input/password-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PasswordInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-password-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./password-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "defaultValue": "'new-password'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "IAutocompletePassword",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "feedback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mediumLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "promptLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "strongLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'outlined'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "IVariant",
                    "decorators": []
                },
                {
                    "name": "weakLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "`input-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 50
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PasswordModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, forwardRef, Input } from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { PasswordModule } from 'primeng/password';\r\nimport { IPasswordInputProps, IVariant } from '../../types/password-input.types';\r\nimport { IAutocompletePassword } from '../../types/auto-complete.types';\r\n\r\n@Component({\r\n  selector: 'app-password-input',\r\n  standalone: true,\r\n  imports: [PasswordModule, CommonModule, ReactiveFormsModule, FormsModule],\r\n  templateUrl: './password-input.component.html',\r\n  styleUrl: './password-input.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => PasswordInputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class PasswordInputComponent<T> implements ControlValueAccessor, IPasswordInputProps {\r\n  @Input() label?: string;\r\n  @Input() placeholder?: string = '';\r\n  @Input() required = false;\r\n  @Input() invalid = false;\r\n  @Input() errorMessage?: string;\r\n  @Input() formControl!: FormControl;\r\n  @Input() feedback?: boolean;\r\n  @Input() promptLabel?: string;\r\n  @Input() weakLabel?: string;\r\n  @Input() mediumLabel?: string;\r\n  @Input() strongLabel?: string;\r\n  // @Input() size?: Size;\r\n  @Input() variant: IVariant = 'outlined';\r\n  @Input() autocomplete: IAutocompletePassword = 'new-password';\r\n\r\n  id = `input-${Math.random().toString(36).substr(2, 9)}`;\r\n  touched = false;\r\n  value: T | null = null;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\r\n  private onChange = (_value: T) => {};\r\n  onTouched = () => {\r\n    this.touched = true;\r\n  };\r\n\r\n  writeValue(value: T): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: (value: T) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  onInput(value: T): void {\r\n    this.value = value;\r\n    this.onChange(value);\r\n  }\r\n}\r\n",
            "styleUrl": "./password-input.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "IPasswordInputProps"
            ],
            "templateData": "<div class=\"field\">\r\n  @if (label) {\r\n    <label [for]=\"id\" class=\"field-label\">\r\n      {{ label }}\r\n      @if (required) {\r\n        <span class=\"required-marker\">*</span>\r\n      }\r\n    </label>\r\n  }\r\n\r\n  <p-password\r\n    [formControl]=\"formControl\"\r\n    [id]=\"id\"\r\n    [(ngModel)]=\"value\"\r\n    (ngModelChange)=\"onInput($event)\"\r\n    (blur)=\"onTouched()\"\r\n    [placeholder]=\"placeholder\"\r\n    [feedback]=\"feedback\"\r\n    [promptLabel]=\"promptLabel\"\r\n    [weakLabel]=\"weakLabel\"\r\n    [mediumLabel]=\"mediumLabel\"\r\n    [strongLabel]=\"strongLabel\"\r\n    [variant]=\"variant\"\r\n    fluid=\"true\"\r\n    [class.ng-invalid]=\"invalid && errorMessage\"\r\n    [required]=\"required\"\r\n    [autocomplete]=\"autocomplete\"\r\n  >\r\n  </p-password>\r\n\r\n  @if (invalid && errorMessage) {\r\n    <small class=\"p-error\">{{ errorMessage }}</small>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-6974639bb01166e0a66eb9a92c1a7ee931558fb1898bb63db6de9eee0b0370054a9f312611961903184b8de222e31ca6f33ef5c9f06511d07f419bfdd021f71a",
            "file": "src/app/features/auth/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authService",
                    "defaultValue": "inject(AuthService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "errorService",
                    "defaultValue": "inject(ErrorService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "formService",
                    "defaultValue": "inject(FormService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "isLoading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36,
                    "modifierKind": [
                        124
                    ]
                },
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<RegisterForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "RouterEnum",
                    "defaultValue": "RouterEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 51,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PasswordInputComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, inject, OnInit } from '@angular/core';\r\nimport { PasswordInputComponent } from '../../../shared/components/password-input/password-input.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router, RouterModule } from '@angular/router';\r\nimport { InputComponent } from '../../../shared/components/input/input.component';\r\nimport { RegisterForm } from '../../../shared/models/form.model';\r\nimport { FormService } from '../../../shared/services/form.service';\r\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\r\nimport { AuthService } from '../../../core/_services/auth/auth.service';\r\nimport { RouterEnum } from '../../../enums/router.enum';\r\nimport { IRegisterDto } from '../../../core/_models/DTOs/authDto.model';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { ErrorService } from '../../../shared/services/error.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [\r\n    ButtonComponent,\r\n    InputComponent,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    PasswordInputComponent,\r\n    RouterModule,\r\n    FormsModule,\r\n    TranslateModule,\r\n  ],\r\n  templateUrl: './register.component.html',\r\n  styleUrl: './register.component.scss',\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm!: FormGroup<RegisterForm>;\r\n  RouterEnum = RouterEnum;\r\n  \r\n  protected isLoading = false;\r\n\r\n  private formService = inject(FormService);\r\n  private authService = inject(AuthService);\r\n  private errorService = inject(ErrorService);\r\n  private router = inject(Router);\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formService.getRegisterForm();\r\n  }\r\n\r\n  get controls() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  getErrorMessage(control: FormControl) {\r\n    return this.errorService.getErrorMessage(control);\r\n  }\r\n\r\n  onRegister() {\r\n    this.isLoading = true;\r\n    this.authService.signUp(this.registerForm.getRawValue() as IRegisterDto).subscribe({\r\n      next: res => {\r\n        if (res.success) {\r\n          this.router.navigate([RouterEnum.home]);\r\n          this.registerForm.reset();\r\n          this.isLoading = false;\r\n        }\r\n      },\r\n      error: _ => {\r\n        this.isLoading = false;\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./register.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 47
                    }
                }
            },
            "templateData": "<div class=\"register-page\">\r\n  <h1>{{ 'AUTH.REGISTER_TITLE' | translate }}</h1>\r\n  <form [formGroup]=\"registerForm\" (ngSubmit)=\"onRegister()\">\r\n    <app-input\r\n      [formControl]=\"controls.username\"\r\n      [placeholder]=\"'AUTH.USERNAME' | translate\"\r\n      type=\"text\"\r\n      autocomplete=\"name\"\r\n      [errorMessage]=\"getErrorMessage(controls.username)\"\r\n      [invalid]=\"controls.username.invalid && controls.username.touched\"\r\n      autocomplete=\"username\"\r\n    >\r\n    </app-input>\r\n\r\n    <app-input\r\n      [formControl]=\"controls.firstName\"\r\n      [placeholder]=\"'AUTH.FIRST_NAME' | translate\"\r\n      type=\"text\"\r\n      autocomplete=\"given-name\"\r\n      [errorMessage]=\"getErrorMessage(controls.firstName)\"\r\n      [invalid]=\"controls.firstName.invalid && controls.firstName.touched\"\r\n      autocomplete=\"given-name\"\r\n    >\r\n    </app-input>\r\n\r\n    <app-input\r\n      [formControl]=\"controls.lastName\"\r\n      [placeholder]=\"'AUTH.LAST_NAME' | translate\"\r\n      type=\"text\"\r\n      autocomplete=\"family-name\"\r\n      [errorMessage]=\"getErrorMessage(controls.lastName)\"\r\n      [invalid]=\"controls.lastName.invalid && controls.lastName.touched\"\r\n      autocomplete=\"family-name\"\r\n    >\r\n    </app-input>\r\n\r\n    <app-input\r\n      [formControl]=\"controls.email\"\r\n      [placeholder]=\"'AUTH.EMAIL' | translate\"\r\n      type=\"email\"\r\n      autocomplete=\"email\"\r\n      [errorMessage]=\"getErrorMessage(controls.email)\"\r\n      [invalid]=\"controls.email.invalid && controls.email.touched\"\r\n      autocomplete=\"email\"\r\n    >\r\n    </app-input>\r\n\r\n    <app-password-input\r\n      [formControl]=\"controls.password\"\r\n      [placeholder]=\"'AUTH.PASSWORD' | translate\"\r\n      autocomplete=\"current-password\"\r\n      [errorMessage]=\"getErrorMessage(controls.password)\"\r\n      [invalid]=\"controls.password.invalid && controls.password.touched\"\r\n      [promptLabel]=\"'AUTH.PASSWORD_PROMPT' | translate\"\r\n      [weakLabel]=\"'AUTH.PASSWORD_WEAK' | translate\"\r\n      [mediumLabel]=\"'AUTH.PASSWORD_MEDIUM' | translate\"\r\n      [strongLabel]=\"'AUTH.PASSWORD_STRONG' | translate\"\r\n      [feedback]=\"true\"\r\n    >\r\n      autocomplete=\"current-password\"\r\n    </app-password-input>\r\n\r\n    <app-password-input\r\n      [formControl]=\"controls.confirmPassword\"\r\n      [placeholder]=\"'AUTH.CONFIRM_PASSWORD' | translate\"\r\n      autocomplete=\"current-password\"\r\n      [errorMessage]=\"getErrorMessage(controls.confirmPassword)\"\r\n      [invalid]=\"controls.confirmPassword.invalid && controls.confirmPassword.touched\"\r\n      autocomplete=\"current-password\"\r\n    >\r\n    </app-password-input>\r\n\r\n    <div class=\"submit-button\">\r\n      <app-button\r\n        type=\"submit\"\r\n        [disabled]=\"registerForm.invalid || isLoading\"\r\n        severity=\"primary\"\r\n        [label]=\"'AUTH.REGISTER_BUTTON' | translate\"\r\n      >\r\n      </app-button>\r\n    </div>\r\n\r\n    <p class=\"text-center\">\r\n      {{ 'AUTH.FORGOT_PASSWORD_TEXT' | translate }}\r\n      <a routerLink=\"/{{ RouterEnum.forgetPassword }}\">{{ 'AUTH.RECOVER_PASSWORD' | translate }}</a>\r\n    </p>\r\n\r\n    <p class=\"text-center\">\r\n      {{ 'AUTH.HAS_ACCOUNT_TEXT' | translate }}\r\n      <a routerLink=\"/{{ RouterEnum.login }}\">{{ 'AUTH.LOGIN' | translate }}</a>\r\n    </p>\r\n  </form>\r\n</div>\r\n"
        },
        {
            "name": "ReusableModalComponent",
            "id": "component-ReusableModalComponent-83c551f059431aacf3b0374750fecf5ce17baab4cc944098ee2ef4f0615b03aadd5a9b37bbb2959f20392a02b69120e4deca5d85f8ff4eb1567ca4ec90fed338",
            "file": "src/app/shared/components/reusable-modal/reusable-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-reusable-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./reusable-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "draggable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "header",
                    "defaultValue": "'Confirm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input } from '@angular/core';\r\nimport { DialogModule } from 'primeng/dialog';\r\nimport { IReusableModalProps } from '../../types/resuable-modal.types';\r\n\r\n@Component({\r\n  selector: 'app-reusable-modal',\r\n  standalone: true,\r\n  imports: [DialogModule, CommonModule],\r\n  templateUrl: './reusable-modal.component.html',\r\n  styleUrl: './reusable-modal.component.scss',\r\n})\r\nexport class ReusableModalComponent implements IReusableModalProps {\r\n  @Input() header = 'Confirm';\r\n  @Input() visible = false;\r\n  @Input() draggable = true;\r\n}\r\n",
            "styleUrl": "./reusable-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IReusableModalProps"
            ],
            "templateData": "<p-dialog [header]=\"header\" [modal]=\"true\" [(visible)]=\"visible\" [style]=\"{ width: '40rem' } \" [draggable]=\"draggable\">\r\n  <ng-content></ng-content>\r\n</p-dialog>\r\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-4ec2fda4e58a107b50ad4a3aa0966ade47a2704adbb49c86b0a7884af4bd1968b1c62d85e8cedb6e44ae6fc1db0cf5197221a99d152bfbe3c6dbf22e3e4ea620",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkmark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "editable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelVariant",
                    "defaultValue": "'over'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "ILabelVariant",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "T[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showClear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "ISize",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "T | null",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "IVariant",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScrollItemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangeEvent",
                    "defaultValue": "new EventEmitter<{\r\n    originalEvent: Event;\r\n    value: T;\r\n  }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<{ originalEvent: Event; value: T }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "id",
                    "defaultValue": "`input-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "onChangeCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 82,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouchCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 84,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 77
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 75
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 92,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 86,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SelectModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "FloatLabelModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { SelectModule } from 'primeng/select';\r\nimport { FloatLabelModule } from 'primeng/floatlabel';\r\nimport { ISelectProps, ISize, IVariant, ILabelVariant } from '../../types/select.types';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-select',\r\n  standalone: true,\r\n  imports: [SelectModule, ReactiveFormsModule, FormsModule, FloatLabelModule, CommonModule],\r\n  templateUrl: './select.component.html',\r\n  styleUrl: './select.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => SelectComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class SelectComponent<T = unknown> implements ISelectProps<T>, ControlValueAccessor {\r\n  @Input() formControl!: FormControl;\r\n  @Input() options?: T[];\r\n  @Input() optionLabel?: string;\r\n  @Input() optionValue?: string;\r\n  @Input() placeholder?: string;\r\n  @Input() filter?: boolean;\r\n  @Input() checkmark = false;\r\n  @Input() editable = false;\r\n  @Input() filterBy?: string;\r\n  @Input() loading = false;\r\n  @Input() showClear = false;\r\n  @Input() virtualScroll?: boolean;\r\n  @Input() virtualScrollItemSize?: number;\r\n  @Input() variant: IVariant = 'filled';\r\n  @Input() size?: ISize;\r\n  @Input() required?: boolean;\r\n  @Input() label?: string;\r\n  @Input() labelVariant: ILabelVariant = 'over';\r\n  @Input() inputId?: string;\r\n  @Input() errorMessage?: string;\r\n  @Input() invalid?: boolean;\r\n  @Input() set value(val: T | null) {\r\n    if (val !== this._value) {\r\n      this._value = val === null ? undefined : val;\r\n      this.onChangeCallback(val);\r\n      this.onTouchCallback();\r\n      this.valueChange.emit(val === null ? undefined : val);\r\n    }\r\n  }\r\n\r\n  @Output() valueChange = new EventEmitter<T>();\r\n  @Output() onSelect = new EventEmitter<{ originalEvent: Event; value: T }>();\r\n  @Output() onChangeEvent = new EventEmitter<{\r\n    originalEvent: Event;\r\n    value: T;\r\n  }>();\r\n\r\n  id = `input-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  _value: T | undefined = undefined;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/adjacent-overload-signatures\r\n  get value(): T | undefined {\r\n    return this._value;\r\n  }\r\n\r\n  touched = false;\r\n\r\n  onTouched = () => {\r\n    this.touched = true;\r\n  };\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  private onChangeCallback: (value: T | null) => void = () => {};\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  private onTouchCallback: () => void = () => {};\r\n\r\n  writeValue(value: T): void {\r\n    if (value !== this._value) {\r\n      this._value = value;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: T | null) => void): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  handleSelect(event: { originalEvent: Event; value: T }): void {\r\n    this.onSelect.emit(event);\r\n  }\r\n\r\n  handleChange(event: { originalEvent: Event; value: T }): void {\r\n    this.onChangeCallback(event.value);\r\n    this.onTouchCallback();\r\n    this.valueChange.emit(event.value);\r\n    this.onChangeEvent.emit(event);\r\n  }\r\n}\r\n",
            "styleUrl": "./select.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ISelectProps",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "T | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "T | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T | undefined",
                        "line": 71
                    }
                }
            },
            "templateData": "<div class=\"field\">\r\n  @if (!label) {\r\n    <p-select\r\n      [formControl]=\"formControl\"\r\n      [checkmark]=\"checkmark\"\r\n      [showClear]=\"showClear\"\r\n      [editable]=\"editable\"\r\n      [filter]=\"filter\"\r\n      [filterBy]=\"filterBy\"\r\n      [loading]=\"loading\"\r\n      [virtualScroll]=\"virtualScroll\"\r\n      [virtualScrollItemSize]=\"virtualScrollItemSize\"\r\n      [options]=\"options\"\r\n      [(ngModel)]=\"value\"\r\n      [optionLabel]=\"optionLabel\"\r\n      [optionValue]=\"optionValue\"\r\n      [placeholder]=\"placeholder\"\r\n      [variant]=\"variant\"\r\n      [size]=\"size\"\r\n      class=\"w-full md:w-56\"\r\n      (onChange)=\"handleChange($event)\"\r\n      (onSelect)=\"handleSelect($event)\"\r\n    >\r\n    </p-select>\r\n  } @else {\r\n    <p-floatlabel class=\"w-full md:w-56\" [variant]=\"labelVariant\">\r\n      <p-select\r\n        [formControl]=\"formControl\"\r\n        [inputId]=\"inputId\"\r\n        [checkmark]=\"checkmark\"\r\n        [showClear]=\"showClear\"\r\n        [editable]=\"editable\"\r\n        [filter]=\"filter\"\r\n        [filterBy]=\"filterBy\"\r\n        [loading]=\"loading\"\r\n        [virtualScroll]=\"virtualScroll\"\r\n        [virtualScrollItemSize]=\"virtualScrollItemSize\"\r\n        [options]=\"options\"\r\n        [(ngModel)]=\"value\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [variant]=\"variant\"\r\n        [size]=\"size\"\r\n        styleClass=\"w-full\"\r\n        (onChange)=\"handleChange($event)\"\r\n        (onSelect)=\"handleSelect($event)\"\r\n      >\r\n      </p-select>\r\n      <label [for]=\"inputId\" [class.required-label]=\"required\">\r\n        {{ label }}\r\n      </label>\r\n    </p-floatlabel>\r\n  }\r\n\r\n  @if (invalid && errorMessage && touched) {\r\n    <small class=\"p-error\">{{ errorMessage }}</small>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "TableComponent",
            "id": "component-TableComponent-150a31df49e65d7517f7a2f6f59e8a72d0f377e247982d2fc2aea616d6cce3e4926399851459396064bc2cbedfd90622ccb986147a6f7964232ff844f35f0fa6",
            "file": "src/app/shared/components/table/table.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-table",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./table.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "actionButtons",
                    "defaultValue": "[\r\n    { icon: 'pi pi-download', ariaLabel: 'TABLE.DOWNLOAD', action: 'download' },\r\n    { icon: 'pi pi-eye', ariaLabel: 'TABLE.PREVIEW', action: 'preview' },\r\n    { icon: 'pi pi-trash', severity: 'danger', ariaLabel: 'TABLE.DELETE', action: 'delete' },\r\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 58,
                    "type": "ITableActionButton[]",
                    "decorators": []
                },
                {
                    "name": "cols",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "ITableColumn[]",
                    "decorators": []
                },
                {
                    "name": "contextMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 57,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "data",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "T[]",
                    "decorators": []
                },
                {
                    "name": "defaultSortField",
                    "defaultValue": "'name'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 52,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "defaultSortOrder",
                    "defaultValue": "1",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 53,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "enablePaginator",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "enableResizableColumns",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "footerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "headerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 54,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "minWidth",
                    "defaultValue": "'50rem'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "paginatorPosition",
                    "defaultValue": "'bottom'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 56,
                    "type": "Position",
                    "decorators": []
                },
                {
                    "name": "rowsPerPage",
                    "defaultValue": "5",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "rowsPerPageOptions",
                    "defaultValue": "[5, 10, 20]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "number[]",
                    "decorators": []
                },
                {
                    "name": "showActionButtons",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showActions",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showGridlines",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSearchBar",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "stripedRows",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "totalRecords",
                    "defaultValue": "0",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 55,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onActionEvent",
                    "defaultValue": "new EventEmitter<{ action: string; item: T }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 65,
                    "type": "EventEmitter"
                },
                {
                    "name": "onContextMenuActionEvent",
                    "defaultValue": "new EventEmitter<{ action: Event; item: T }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 67,
                    "type": "EventEmitter"
                },
                {
                    "name": "onPageChange",
                    "defaultValue": "new EventEmitter<{ page: number; rows: number }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 64,
                    "type": "EventEmitter"
                },
                {
                    "name": "onRefreshEvent",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "contextMenu",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ContextMenuComponent",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 70,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'contextMenu'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                },
                {
                    "name": "searchControl",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 72
                },
                {
                    "name": "selectedItem",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 73
                },
                {
                    "name": "table",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Table",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69,
                    "decorators": [
                        {
                            "name": "ViewChild",
                            "stringifiedArguments": "'dt'"
                        }
                    ],
                    "modifierKind": [
                        170
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "handleContextMenuAction",
                    "args": [
                        {
                            "name": "actionData",
                            "type": "IContextMenuAction",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 87,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "actionData",
                            "type": "IContextMenuAction",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onAction",
                    "args": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "action",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onGlobalFilter",
                    "args": [
                        {
                            "name": "table",
                            "type": "Table",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "table",
                            "type": "Table",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "onRefresh",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "showContextMenu",
                    "args": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "MouseEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "item",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "TableModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ContextMenuComponent",
                    "type": "component"
                },
                {
                    "name": "TooltipModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "TranslateModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output, ViewChild } from '@angular/core';\r\nimport { TableModule } from 'primeng/table';\r\nimport {\r\n  IContextMenuAction,\r\n  ITableActionButton,\r\n  ITableColumn,\r\n  ITableProps,\r\n  Position,\r\n} from '../../types/table.types';\r\nimport { FormControl, ReactiveFormsModule } from '@angular/forms';\r\nimport { MenuItem } from 'primeng/api';\r\nimport { TooltipModule } from 'primeng/tooltip';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { ContextMenuComponent } from '../context-menu/context-menu.component';\r\nimport { InputComponent } from '../input/input.component';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { Table } from 'primeng/table';\r\n\r\n@Component({\r\n  selector: 'app-table',\r\n  standalone: true,\r\n  imports: [\r\n    TableModule,\r\n    CommonModule,\r\n    ButtonComponent,\r\n    InputComponent,\r\n    ContextMenuComponent,\r\n    TooltipModule,\r\n    CommonModule,\r\n    ReactiveFormsModule,\r\n    TranslateModule,\r\n  ],\r\n  templateUrl: './table.component.html',\r\n  styleUrl: './table.component.scss',\r\n})\r\nexport class TableComponent<T = unknown> implements ITableProps<T> {\r\n  @Input() cols: ITableColumn[] = [];\r\n  @Input() data: T[] = [];\r\n  @Input() headerTitle?: string;\r\n  @Input() footerTitle?: string;\r\n  @Input() showGridlines = false;\r\n  @Input() stripedRows = false;\r\n  @Input() rowsPerPage = 5;\r\n  @Input() rowsPerPageOptions: number[] = [5, 10, 20];\r\n  @Input() enablePaginator = true;\r\n  @Input() enableResizableColumns = true;\r\n  @Input() minWidth = '50rem';\r\n  @Input() showActions = true;\r\n  @Input() showSearchBar = true;\r\n  @Input() showActionButtons = true;\r\n  @Input() defaultSortField = 'name';\r\n  @Input() defaultSortOrder = 1;\r\n  @Input() loading = false;\r\n  @Input() totalRecords = 0;\r\n  @Input() paginatorPosition: Position = 'bottom';\r\n  @Input() contextMenuItems: MenuItem[] = [];\r\n  @Input() actionButtons: ITableActionButton[] = [\r\n    { icon: 'pi pi-download', ariaLabel: 'TABLE.DOWNLOAD', action: 'download' },\r\n    { icon: 'pi pi-eye', ariaLabel: 'TABLE.PREVIEW', action: 'preview' },\r\n    { icon: 'pi pi-trash', severity: 'danger', ariaLabel: 'TABLE.DELETE', action: 'delete' },\r\n  ];\r\n\r\n  @Output() onPageChange = new EventEmitter<{ page: number; rows: number }>();\r\n  @Output() onActionEvent = new EventEmitter<{ action: string; item: T }>();\r\n  @Output() onRefreshEvent = new EventEmitter<void>();\r\n  @Output() onContextMenuActionEvent = new EventEmitter<{ action: Event; item: T }>();\r\n\r\n  @ViewChild('dt') table!: Table;\r\n  @ViewChild('contextMenu') contextMenu!: ContextMenuComponent;\r\n\r\n  searchControl = new FormControl('');\r\n  selectedItem: T | null = null;\r\n\r\n  onGlobalFilter(table: Table, event: string): void {\r\n    table.filterGlobal(event, 'contains');\r\n  }\r\n\r\n  onRefresh(): void {\r\n    this.onRefreshEvent.emit();\r\n  }\r\n\r\n  onAction(action: string, item: T): void {\r\n    this.onActionEvent.emit({ action, item });\r\n  }\r\n\r\n  handleContextMenuAction(actionData: IContextMenuAction): void {\r\n    if (this.selectedItem) {\r\n      this.onContextMenuActionEvent.emit({\r\n        action: actionData.originalEvent,\r\n        item: this.selectedItem,\r\n      });\r\n    }\r\n  }\r\n\r\n  showContextMenu(event: MouseEvent, item: T): void {\r\n    this.selectedItem = item;\r\n    this.contextMenu.show(event);\r\n    event.preventDefault();\r\n  }\r\n}\r\n",
            "styleUrl": "./table.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ITableProps"
            ],
            "templateData": "<app-context-menu #contextMenu [items]=\"contextMenuItems\" (onItemSelect)=\"handleContextMenuAction($event)\">\r\n</app-context-menu>\r\n\r\n\r\n<p-table #dt [columns]=\"cols\" [value]=\"data\" [tableStyle]=\"{ 'min-width': minWidth }\" [showGridlines]=\"showGridlines\"\r\n  [stripedRows]=\"stripedRows\" [rowsPerPageOptions]=\"rowsPerPageOptions\" [paginator]=\"enablePaginator\"\r\n  [resizableColumns]=\"enableResizableColumns\" [rows]=\"rowsPerPage\" [loading]=\"loading\" [totalRecords]=\"totalRecords\"\r\n  [paginatorPosition]=\"paginatorPosition\"\r\n  (onPage)=\"onPageChange.emit({ page: $event.first / $event.rows, rows: $event.rows })\">\r\n  <ng-template pTemplate=\"caption\" *ngIf=\"headerTitle\">\r\n    <div class=\"flex items-center justify-between\">\r\n      <span class=\"text-xl font-bold\">{{headerTitle}}</span>\r\n    </div>\r\n    @if (showSearchBar) {\r\n    <div class=\"flex justify-content-between\">\r\n      <span>\r\n        <app-input [formControl]=\"searchControl\" [placeholder]=\"'TABLE.SEARCH_PLACEHOLDER' | translate\"\r\n          prefixIcon=\"search\" (ngModelChange)=\"onGlobalFilter(dt, $event)\" autocomplete=\"off\">\r\n        </app-input>\r\n      </span>\r\n      @if (showActionButtons) {\r\n      <span>\r\n        <app-button [label]=\"'TABLE.REFRESH' | translate\" icon=\"pi-refresh\" (onClick)=\"onRefresh()\">\r\n        </app-button>\r\n      </span>\r\n      }\r\n    </div>\r\n    }\r\n  </ng-template>\r\n  <ng-template pTemplate=\"header\" let-columns>\r\n    <tr>\r\n      <th *ngFor=\"let col of columns\">\r\n        {{ col.header }}\r\n      </th>\r\n      @if (showActions) {\r\n      <th>{{ 'EXAMPLE-CRUD.ACTIONS' | translate }}</th>\r\n      }\r\n    </tr>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"body\" let-rowData let-columns=\"columns\">\r\n    <tr (contextmenu)=\"showContextMenu($event, rowData)\">\r\n      <td *ngFor=\"let col of columns\">\r\n        {{ rowData[col.field] }}\r\n      </td>\r\n      @if (showActions) {\r\n      <td>\r\n        <div class=\"flex gap-2\">\r\n          <ng-container *ngFor=\"let button of actionButtons\">\r\n            <app-button [icon]=\"button.icon\" [severity]=\"'primary'\" variant=\"text\" [rounded]=\"true\"\r\n              [ariaLabel]=\"button.ariaLabel | translate\" (onClick)=\"onAction(button.action, rowData)\">\r\n            </app-button>\r\n          </ng-container>\r\n        </div>\r\n      </td>\r\n      }\r\n    </tr>\r\n  </ng-template>\r\n  <ng-template pTemplate=\"footer\" *ngIf=\"footerTitle\">\r\n    {{footerTitle}}\r\n  </ng-template>\r\n\r\n  <ng-template pTemplate=\"emptymessage\">\r\n    <tr>\r\n      <td [attr.colspan]=\"showActions ? cols.length + 1 : cols.length\" class=\"text-center p-4\">\r\n        <i class=\"pi pi-folder-open\" style=\"font-size: 2rem; opacity: 0.5\"></i>\r\n        <p>{{ 'TABLE.NO_ITEMS' | translate }}</p>\r\n      </td>\r\n    </tr>\r\n  </ng-template>\r\n</p-table>\r\n"
        },
        {
            "name": "ToastComponent",
            "id": "component-ToastComponent-f6940796b404d8d39296f2824080619643aef31c5f8bc6302593ff07e1d6ef7bb6e1da1fb99af4d26c8de40586517608b496db1f468ce9b34332b73391e855b4",
            "file": "src/app/shared/components/toast/toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toast",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ToastModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { ToastModule } from 'primeng/toast';\r\n\r\n@Component({\r\n  selector: 'app-toast',\r\n  standalone: true,\r\n  imports: [ToastModule],\r\n  templateUrl: './toast.component.html',\r\n  styleUrl: './toast.component.scss',\r\n})\r\nexport class ToastComponent {}\r\n",
            "styleUrl": "./toast.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p-toast></p-toast>\r\n"
        },
        {
            "name": "ToggleSwitchComponent",
            "id": "component-ToggleSwitchComponent-491b35d219ce4caa7c1fb791a0fbc4a2b9b461ad22e0754823aab8dc2b8ad0103ec385474094340ee74122ef252da8dec702da1d2cb86c3d5b371cabbfe88dea",
            "file": "src/app/shared/components/toggle-switch/toggle-switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleSwitchComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-toggle-switch",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toggle-switch.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "iconOff",
                    "defaultValue": "'pi-times'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconOn",
                    "defaultValue": "'pi-check'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelPosition",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`toggle-switch-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ToggleSwitchModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { ToggleSwitchModule } from 'primeng/toggleswitch';\r\nimport { IToggleSwitchProps } from '../../types/toogleSwitch.types';\r\n\r\n@Component({\r\n  selector: 'app-toggle-switch',\r\n  standalone: true,\r\n  imports: [ToggleSwitchModule, ReactiveFormsModule, FormsModule, CommonModule],\r\n  templateUrl: './toggle-switch.component.html',\r\n  styleUrl: './toggle-switch.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ToggleSwitchComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class ToggleSwitchComponent implements ControlValueAccessor, IToggleSwitchProps {\r\n  @Input() iconOn = 'pi-check';\r\n  @Input() iconOff = 'pi-times';\r\n  @Input() invalid = false;\r\n  @Input() label?: string;\r\n  @Input() labelPosition = 'right';\r\n  @Input() styleClass?: string;\r\n  @Input() errorMessage?: string;\r\n  @Input() required?: boolean;\r\n  @Input() formControl!: FormControl;\r\n\r\n  @Output() valueChange = new EventEmitter<boolean>();\r\n\r\n  id = `toggle-switch-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  private _value = false;\r\n  touched = false;\r\n\r\n  @Input()\r\n  get value(): boolean {\r\n    return this._value;\r\n  }\r\n\r\n  set value(val: boolean) {\r\n    if (this._value !== val) {\r\n      this._value = val;\r\n      this.onChange(val);\r\n      this.valueChange.emit(val);\r\n    }\r\n  }\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onChange: (value: boolean) => void = () => {};\r\n  onTouched = () => {\r\n    this.touched = true;\r\n  };\r\n\r\n  writeValue(value: boolean): void {\r\n    this._value = value !== null && value !== undefined ? value : false;\r\n  }\r\n\r\n  registerOnChange(fn: (value: boolean) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  onInput(event: boolean): void {\r\n    this.value = event;\r\n    this.onTouched();\r\n  }\r\n}\r\n",
            "styleUrl": "./toggle-switch.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "IToggleSwitchProps"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 46
                    }
                }
            },
            "templateData": "<div>\r\n  @if (label) {\r\n    <label [class.required]=\"required\" [for]=\"id\" class=\"ml-2\">\r\n      {{ label }}\r\n      @if (required) {\r\n        <span class=\"required-marker\">*</span>\r\n      }\r\n    </label>\r\n  }\r\n\r\n  @if (iconOff && iconOn) {\r\n    <p-toggleswitch\r\n      [formControl]=\"formControl\"\r\n      [class]=\"invalid ? styleClass + 'ng-dirty ng-invalid' : styleClass\"\r\n    >\r\n      <ng-template pTemplate=\"handle\" let-checked=\"checked\">\r\n        <i [ngClass]=\"['!text-xs', 'pi', checked ? iconOn : iconOff]\"></i>\r\n      </ng-template>\r\n    </p-toggleswitch>\r\n  } @else {\r\n    <p-toggleSwitch\r\n      [formControl]=\"formControl\"\r\n      [class]=\"invalid ? styleClass + 'ng-dirty ng-invalid' : styleClass\"\r\n    >\r\n    </p-toggleSwitch>\r\n  }\r\n\r\n  @if (invalid && errorMessage && touched) {\r\n    <small class=\"p-error\">{{ errorMessage }}</small>\r\n  }\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(\r\n      withInterceptors([errorInterceptor, authInterceptor, refreshTokenInterceptor])\r\n    ),\r\n    provideAnimationsAsync(),\r\n    ɵBrowserAnimationBuilder,\r\n    providePrimeNG({\r\n      theme: {\r\n        preset: Aura,\r\n      },\r\n    }),\r\n    MessageService,\r\n    importProvidersFrom([\r\n      TranslateModule.forRoot({\r\n        loader: {\r\n          provide: TranslateLoader,\r\n          useFactory: httpLoaderFactory,\r\n          deps: [HttpClient],\r\n        },\r\n      }),\r\n    ]),\r\n  ],\r\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  if (authService.isAuth()) {\r\n    return true;\r\n  }\r\n\r\n  const url = state.url;\r\n  if (url && url !== '/' && url !== `/${RouterEnum.login}`) {\r\n    router.navigate([RouterEnum.login], {\r\n      queryParams: { returnUrl: url },\r\n    });\r\n  } else {\r\n    router.navigate([RouterEnum.login]);\r\n  }\r\n\r\n  return false;\r\n}"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const tokenService = inject(TokenService);\r\n\r\n  const accessToken = tokenService.getAccessToken();\r\n\r\n  if (accessToken && tokenService.validateToken(accessToken)) {\r\n    const clonedReq = req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    });\r\n\r\n    return next(clonedReq);\r\n  } else {\r\n    return next(req);\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  apiURL: 'http://localhost:5238',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  apiURL: 'http://localhost:5238',\r\n}"
            },
            {
                "name": "equivalentValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/validators/equivalent.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  passwdControlName: string,\r\n  secondPasswdControlName: string\r\n): ValidatorFn => {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const passwdControl = control.get(passwdControlName);\r\n    const secondPasswdControl = control.get(secondPasswdControlName);\r\n\r\n    if (secondPasswdControl?.value && secondPasswdControl?.value !== passwdControl?.value) {\r\n      secondPasswdControl.setErrors({\r\n        passwordsNotEqual: true,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  };\r\n}"
            },
            {
                "name": "errorInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_interceptors/error.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const toastService = inject(ToastService);\r\n  const translateService = inject(TranslateService);\r\n  const tokenService = inject(TokenService);\r\n\r\n  return next(req).pipe(\r\n    catchError((err: HttpErrorResponse) => {\r\n      let errorMessage = '';\r\n\r\n      switch (err.status) {\r\n        case 400:\r\n          if (err.error.message.includes('User is already registered')) {\r\n            errorMessage = 'ERRORS.EMAIL_OR_USER_ALREADY_EXISTS';\r\n          } else {\r\n            errorMessage = 'ERRORS.BAD_REQUEST';\r\n          }\r\n          break;\r\n        case 401:\r\n          if (err.error.message.includes('Invalid credentials')) {\r\n            errorMessage = 'ERRORS.INVALID_CREDENTIALS';\r\n          } else {\r\n            errorMessage = 'ERRORS.UNAUTHORIZED';\r\n          }\r\n          break;\r\n        case 403:\r\n          errorMessage = 'ERRORS.FORBIDDEN';\r\n          break;\r\n        case 404:\r\n          errorMessage = 'ERRORS.NOT_FOUND';\r\n          break;\r\n        case 500:\r\n          errorMessage = 'ERRORS.INTERNAL_SERVER_ERROR';\r\n          break;\r\n        default:\r\n          errorMessage = 'ERRORS.UNKNOWN';\r\n          break;\r\n      }\r\n\r\n      if (err.status === 401 && tokenService.validateRefreshToken(tokenService.getRefreshToken())) {\r\n        return EMPTY;\r\n      }\r\n\r\n      translateService.get(['ERRORS.TITLE', errorMessage]).subscribe(translations => {\r\n        const translatedTitle = translations['ERRORS.TITLE'];\r\n        const translatedMessage = translations[errorMessage];\r\n        toastService.showError(translatedTitle, translatedMessage);\r\n        console.error(err.message);\r\n      });\r\n\r\n      return throwError(() => err);\r\n    })\r\n  );\r\n}"
            },
            {
                "name": "httpLoaderFactory",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "TranslateHttpLoader",
                "defaultValue": "(http: HttpClient) =>\r\n  new TranslateHttpLoader(http, 'localization/i18n/', '.json')"
            },
            {
                "name": "initExampleCrudForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initExampleCrudForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<ExampleCrudForm> => {\r\n  return new FormGroup({\r\n    id: new FormControl('', {\r\n      nonNullable: true,\r\n    }),\r\n    name: new FormControl('', {\r\n      validators: [\r\n        Validators.required,\r\n        Validators.minLength(VALIDATION_LENGTHS.MIN_NAME),\r\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_NAME),\r\n      ],\r\n      nonNullable: true,\r\n    }),\r\n    count: new FormControl(0, {\r\n      validators: [Validators.required, Validators.min(0)],\r\n      nonNullable: true,\r\n    }),\r\n    price: new FormControl(0, {\r\n      validators: [Validators.required, Validators.min(0)],\r\n      nonNullable: true,\r\n    }),\r\n    isZiemniak: new FormControl(false, {\r\n      validators: [Validators.required],\r\n      nonNullable: true,\r\n    }),\r\n    arrivalDate: new FormControl(new Date(), {\r\n      validators: [Validators.required],\r\n      nonNullable: true,\r\n    }),\r\n  });\r\n}"
            },
            {
                "name": "initLoginForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initLoginForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<LoginForm> => {\r\n  return new FormGroup({\r\n    email: new FormControl('', {\r\n      validators: [\r\n        Validators.required,\r\n        Validators.email,\r\n        Validators.minLength(VALIDATION_LENGTHS.MIN_EMAIL),\r\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_EMAIL),\r\n      ],\r\n      nonNullable: true,\r\n    }),\r\n    password: new FormControl('', {\r\n      validators: [\r\n        Validators.required,\r\n        Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n      ],\r\n      nonNullable: true,\r\n    }),\r\n  });\r\n}"
            },
            {
                "name": "initPasswdRecoveryForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initPasswdRecoveryForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<PasswdRecoveryForm> => {\r\n  return new FormGroup({\r\n    email: new FormControl('', {\r\n      validators: [Validators.required, Validators.email],\r\n      nonNullable: true,\r\n    }),\r\n  });\r\n}"
            },
            {
                "name": "initPasswordsForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initPasswordsForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<PasswordsForm> => {\r\n  return new FormGroup(\r\n    {\r\n      password: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      repeatedPassword: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n    },\r\n    { validators: [equivalentValidator('password', 'repeatedPassword')] }\r\n  );\r\n}"
            },
            {
                "name": "initRegisterForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initRegisterForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<RegisterForm> => {\r\n  return new FormGroup(\r\n    {\r\n      username: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      firstName: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      lastName: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      email: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_EMAIL),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_EMAIL),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      password: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      confirmPassword: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n    },\r\n    { validators: [equivalentValidator('password', 'confirmPassword')] }\r\n  );\r\n}"
            },
            {
                "name": "initThemeForm",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/services/forms/initThemeForm.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(): FormGroup<ThemeForm> => {\r\n  return new FormGroup({\r\n    theme: new FormControl(false, {\r\n      validators: [Validators.required],\r\n      nonNullable: true,\r\n    }),\r\n  });\r\n}"
            },
            {
                "name": "isRefreshing",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "false"
            },
            {
                "name": "MenuConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/menu.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  title: 'MENU.TITLE',\r\n  footerTitle: 'MENU.FOOTER_TITLE',\r\n  authMenuItems: [{ label: 'MENU.PROFILE', routerLink: `/${RouterEnum.settings}` }],\r\n  nonAuthMenuItems: [\r\n    { label: 'MENU.LOGIN', routerLink: `/${RouterEnum.login}` },\r\n    { label: 'MENU.REGISTER', routerLink: `/${RouterEnum.register}` },\r\n  ],\r\n  langs: [\r\n    { label: 'English', value: LanguageCode.ENGLISH },\r\n    { label: 'Polski', value: LanguageCode.POLISH },\r\n  ],\r\n}"
            },
            {
                "name": "refreshTokenInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const tokenService = inject(TokenService);\r\n\r\n  if (req.url.includes(ApiEndpoints.REFRESH_TOKEN)) {\r\n    return next(req);\r\n  }\r\n\r\n  return next(req).pipe(\r\n    catchError((error: HttpErrorResponse) => {\r\n      if (error.status === 401 && !isRefreshing) {\r\n        isRefreshing = true;\r\n\r\n        const accessToken = tokenService.getAccessToken();\r\n        const refreshToken = tokenService.getRefreshToken();\r\n\r\n        if (accessToken && refreshToken) {\r\n          return tokenService.refreshToken({ accessToken, refreshToken }).pipe(\r\n            switchMap((newTokens: IAuthTokensResponseDto) => {\r\n              const newAccessToken: IAccessToken = newTokens.accessToken;\r\n              const newRefreshToken: IRefreshToken = {\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresAt: newTokens.expiresAt,\r\n              };\r\n              tokenService.setTokens(newAccessToken, newRefreshToken);\r\n\r\n              const clonedReq = req.clone({\r\n                setHeaders: {\r\n                  Authorization: `Bearer ${newTokens.accessToken}`,\r\n                },\r\n              });\r\n              isRefreshing = false;\r\n              return next(clonedReq);\r\n            }),\r\n            catchError(refreshError => {\r\n              isRefreshing = false;\r\n              tokenService.removeTokens();\r\n              return throwError(() => refreshError);\r\n            })\r\n          );\r\n        } else {\r\n          isRefreshing = false;\r\n          tokenService.removeTokens();\r\n          return throwError(() => error);\r\n        }\r\n      } else {\r\n        return throwError(() => error);\r\n      }\r\n    })\r\n  );\r\n}"
            },
            {
                "name": "roleGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_guards/role.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n  const roleService = inject(RoleService);\r\n  const requiredRole = route.data['roles'];\r\n\r\n  return roleService.isAuthorized(requiredRole);\r\n}"
            },
            {
                "name": "unAuthGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_guards/unauth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  if (!authService.isAuth()) {\r\n    return true;\r\n  }\r\n\r\n  router.navigate([RouterEnum.home]);\r\n  return false;\r\n}"
            },
            {
                "name": "VALIDATION_LENGTHS",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/validations.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  MIN_EMAIL: 3,\r\n  MAX_EMAIL: 50,\r\n  MIN_PASSWORD: 8,\r\n  MAX_PASSWORD: 75,\r\n  MIN_USERNAME: 3,\r\n  MAX_USERNAME: 50,\r\n  MIN_NAME: 3,\r\n  MAX_NAME: 50,\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "AutocompleteBasic",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"on\" | \"off\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAccessToken",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "string",
                "file": "src/app/core/_models/tokens.model.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 154
            },
            {
                "name": "IAutocomplete",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "IAutocompletePassword | AutocompleteBasic | IAutocompletePersonalInfo | IAutocompleteAddress | IAutocompleteTelephone | IAutocompleteCreditCard | IAutocompleteDate | IAutocompleteTransaction | IAutocompleteMisc",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteAddress",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level1\" | \"address-level2\" | \"address-level3\" | \"address-level4\" | \"country\" | \"country-name\" | \"postal-code\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteCreditCard",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteDate",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteMisc",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"sex\" | \"photo\" | \"url\" | \"impp\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompletePassword",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"new-password\" | \"current-password\" | \"one-time-code\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompletePersonalInfo",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "AutocompleteBasic | \"name\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"organization-title\" | \"organization\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteTelephone",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IAutocompleteTransaction",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"transaction-currency\" | \"transaction-amount\" | \"language\"",
                "file": "src/app/shared/types/auto-complete.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IButtonBadgeSeverity",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IButtonIconPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"left\" | \"right\" | \"top\" | \"bottom\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IButtonSeverity",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"info\" | \"warn\" | \"help\" | \"danger\" | \"contrast\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"large\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"outlined\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IFileUploadMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"advanced\"",
                "file": "src/app/shared/types/fileUploader.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IInputIcons",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"user\" | \"map\" | \"clock\" | \"star\" | \"check\" | \"times\" | \"shopping-cart\" | \"search\"",
                "file": "src/app/shared/types/input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IInputTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"number\" | \"email\" | \"password\" | \"tel\" | \"url\"",
                "file": "src/app/shared/types/input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IKeys",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"tl\" | \"tc\" | \"tr\" | \"bl\" | \"bc\" | \"br\" | \"c\"",
                "file": "src/app/shared/types/toast.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ILabelVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"over\" | \"in\" | \"on\"",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ILangs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "Ilang[]",
                "file": "src/app/shared/types/navbar.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "IPositions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\" | \"center\"",
                "file": "src/app/shared/types/toast.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ISelectOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "ISelectOption[]",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "ISeverity",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                "file": "src/app/shared/types/toast.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ISize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"large\" | undefined",
                "file": "src/app/shared/types/password-input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ISize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"large\"",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"filled\" | \"outlined\"",
                "file": "src/app/shared/types/password-input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"filled\" | \"outlined\"",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Position",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"both\"",
                "file": "src/app/shared/types/file-type.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Position",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top\" | \"bottom\" | \"both\"",
                "file": "src/app/shared/types/table.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "ApiEndpoints",
                "childs": [
                    {
                        "name": "SIGN_IN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/login"
                    },
                    {
                        "name": "SIGN_UP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/register"
                    },
                    {
                        "name": "RESET_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "CHANGE_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "REFRESH_TOKEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/refresh-token"
                    },
                    {
                        "name": "REVOKE_TOKEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/revoke-token"
                    },
                    {
                        "name": "GET_USERS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/users"
                    },
                    {
                        "name": "GET_USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/users"
                    },
                    {
                        "name": "GET_FILE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files"
                    },
                    {
                        "name": "GET_FILES_LIST",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files"
                    },
                    {
                        "name": "SEND_FILE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files/upload"
                    },
                    {
                        "name": "DOWNLOAD_FILE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files/download"
                    },
                    {
                        "name": "EDIT_FILE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files"
                    },
                    {
                        "name": "DELETE_FILE",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files"
                    },
                    {
                        "name": "GET_FILES_STATS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/files/stats"
                    },
                    {
                        "name": "KARMELKI",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/karmelki"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enums/api-endpoints.enum.ts"
            },
            {
                "name": "LanguageCode",
                "childs": [
                    {
                        "name": "POLISH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "pl"
                    },
                    {
                        "name": "ENGLISH",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "en"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enums/LanguageCode.enum.ts"
            },
            {
                "name": "RolesEnum",
                "childs": [
                    {
                        "name": "USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "USER"
                    },
                    {
                        "name": "MOD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "MOD"
                    },
                    {
                        "name": "ADMIN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "ADMIN"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enums/roles.enum.ts"
            },
            {
                "name": "RouterEnum",
                "childs": [
                    {
                        "name": "home",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "login",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "login"
                    },
                    {
                        "name": "register",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "register"
                    },
                    {
                        "name": "logout",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "logout"
                    },
                    {
                        "name": "settings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "settings"
                    },
                    {
                        "name": "admin",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "admin"
                    },
                    {
                        "name": "changePassword",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "change-password"
                    },
                    {
                        "name": "deleteAccount",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "deleteAccount"
                    },
                    {
                        "name": "forgetPassword",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "forget-password"
                    },
                    {
                        "name": "preferences",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "preferences"
                    },
                    {
                        "name": "fileDetails",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "file-details"
                    },
                    {
                        "name": "notFound",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "not-found"
                    },
                    {
                        "name": "karmelki",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "karmelki"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/enums/router.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(\r\n      withInterceptors([errorInterceptor, authInterceptor, refreshTokenInterceptor])\r\n    ),\r\n    provideAnimationsAsync(),\r\n    ɵBrowserAnimationBuilder,\r\n    providePrimeNG({\r\n      theme: {\r\n        preset: Aura,\r\n      },\r\n    }),\r\n    MessageService,\r\n    importProvidersFrom([\r\n      TranslateModule.forRoot({\r\n        loader: {\r\n          provide: TranslateLoader,\r\n          useFactory: httpLoaderFactory,\r\n          deps: [HttpClient],\r\n        },\r\n      }),\r\n    ]),\r\n  ],\r\n}"
                },
                {
                    "name": "httpLoaderFactory",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "TranslateHttpLoader",
                    "defaultValue": "(http: HttpClient) =>\r\n  new TranslateHttpLoader(http, 'localization/i18n/', '.json')"
                }
            ],
            "src/app/core/_guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  if (authService.isAuth()) {\r\n    return true;\r\n  }\r\n\r\n  const url = state.url;\r\n  if (url && url !== '/' && url !== `/${RouterEnum.login}`) {\r\n    router.navigate([RouterEnum.login], {\r\n      queryParams: { returnUrl: url },\r\n    });\r\n  } else {\r\n    router.navigate([RouterEnum.login]);\r\n  }\r\n\r\n  return false;\r\n}"
                }
            ],
            "src/app/core/_interceptors/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const tokenService = inject(TokenService);\r\n\r\n  const accessToken = tokenService.getAccessToken();\r\n\r\n  if (accessToken && tokenService.validateToken(accessToken)) {\r\n    const clonedReq = req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    });\r\n\r\n    return next(clonedReq);\r\n  } else {\r\n    return next(req);\r\n  }\r\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  apiURL: 'http://localhost:5238',\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  apiURL: 'http://localhost:5238',\r\n}"
                }
            ],
            "src/app/shared/validators/equivalent.validator.ts": [
                {
                    "name": "equivalentValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/validators/equivalent.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  passwdControlName: string,\r\n  secondPasswdControlName: string\r\n): ValidatorFn => {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const passwdControl = control.get(passwdControlName);\r\n    const secondPasswdControl = control.get(secondPasswdControlName);\r\n\r\n    if (secondPasswdControl?.value && secondPasswdControl?.value !== passwdControl?.value) {\r\n      secondPasswdControl.setErrors({\r\n        passwordsNotEqual: true,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  };\r\n}"
                }
            ],
            "src/app/core/_interceptors/error.interceptor.ts": [
                {
                    "name": "errorInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_interceptors/error.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const toastService = inject(ToastService);\r\n  const translateService = inject(TranslateService);\r\n  const tokenService = inject(TokenService);\r\n\r\n  return next(req).pipe(\r\n    catchError((err: HttpErrorResponse) => {\r\n      let errorMessage = '';\r\n\r\n      switch (err.status) {\r\n        case 400:\r\n          if (err.error.message.includes('User is already registered')) {\r\n            errorMessage = 'ERRORS.EMAIL_OR_USER_ALREADY_EXISTS';\r\n          } else {\r\n            errorMessage = 'ERRORS.BAD_REQUEST';\r\n          }\r\n          break;\r\n        case 401:\r\n          if (err.error.message.includes('Invalid credentials')) {\r\n            errorMessage = 'ERRORS.INVALID_CREDENTIALS';\r\n          } else {\r\n            errorMessage = 'ERRORS.UNAUTHORIZED';\r\n          }\r\n          break;\r\n        case 403:\r\n          errorMessage = 'ERRORS.FORBIDDEN';\r\n          break;\r\n        case 404:\r\n          errorMessage = 'ERRORS.NOT_FOUND';\r\n          break;\r\n        case 500:\r\n          errorMessage = 'ERRORS.INTERNAL_SERVER_ERROR';\r\n          break;\r\n        default:\r\n          errorMessage = 'ERRORS.UNKNOWN';\r\n          break;\r\n      }\r\n\r\n      if (err.status === 401 && tokenService.validateRefreshToken(tokenService.getRefreshToken())) {\r\n        return EMPTY;\r\n      }\r\n\r\n      translateService.get(['ERRORS.TITLE', errorMessage]).subscribe(translations => {\r\n        const translatedTitle = translations['ERRORS.TITLE'];\r\n        const translatedMessage = translations[errorMessage];\r\n        toastService.showError(translatedTitle, translatedMessage);\r\n        console.error(err.message);\r\n      });\r\n\r\n      return throwError(() => err);\r\n    })\r\n  );\r\n}"
                }
            ],
            "src/app/shared/services/forms/initExampleCrudForm.ts": [
                {
                    "name": "initExampleCrudForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initExampleCrudForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<ExampleCrudForm> => {\r\n  return new FormGroup({\r\n    id: new FormControl('', {\r\n      nonNullable: true,\r\n    }),\r\n    name: new FormControl('', {\r\n      validators: [\r\n        Validators.required,\r\n        Validators.minLength(VALIDATION_LENGTHS.MIN_NAME),\r\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_NAME),\r\n      ],\r\n      nonNullable: true,\r\n    }),\r\n    count: new FormControl(0, {\r\n      validators: [Validators.required, Validators.min(0)],\r\n      nonNullable: true,\r\n    }),\r\n    price: new FormControl(0, {\r\n      validators: [Validators.required, Validators.min(0)],\r\n      nonNullable: true,\r\n    }),\r\n    isZiemniak: new FormControl(false, {\r\n      validators: [Validators.required],\r\n      nonNullable: true,\r\n    }),\r\n    arrivalDate: new FormControl(new Date(), {\r\n      validators: [Validators.required],\r\n      nonNullable: true,\r\n    }),\r\n  });\r\n}"
                }
            ],
            "src/app/shared/services/forms/initLoginForm.ts": [
                {
                    "name": "initLoginForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initLoginForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<LoginForm> => {\r\n  return new FormGroup({\r\n    email: new FormControl('', {\r\n      validators: [\r\n        Validators.required,\r\n        Validators.email,\r\n        Validators.minLength(VALIDATION_LENGTHS.MIN_EMAIL),\r\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_EMAIL),\r\n      ],\r\n      nonNullable: true,\r\n    }),\r\n    password: new FormControl('', {\r\n      validators: [\r\n        Validators.required,\r\n        Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n        Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n      ],\r\n      nonNullable: true,\r\n    }),\r\n  });\r\n}"
                }
            ],
            "src/app/shared/services/forms/initPasswdRecoveryForm.ts": [
                {
                    "name": "initPasswdRecoveryForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initPasswdRecoveryForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<PasswdRecoveryForm> => {\r\n  return new FormGroup({\r\n    email: new FormControl('', {\r\n      validators: [Validators.required, Validators.email],\r\n      nonNullable: true,\r\n    }),\r\n  });\r\n}"
                }
            ],
            "src/app/shared/services/forms/initPasswordsForm.ts": [
                {
                    "name": "initPasswordsForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initPasswordsForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<PasswordsForm> => {\r\n  return new FormGroup(\r\n    {\r\n      password: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      repeatedPassword: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n    },\r\n    { validators: [equivalentValidator('password', 'repeatedPassword')] }\r\n  );\r\n}"
                }
            ],
            "src/app/shared/services/forms/initRegisterForm.ts": [
                {
                    "name": "initRegisterForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initRegisterForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<RegisterForm> => {\r\n  return new FormGroup(\r\n    {\r\n      username: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      firstName: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      lastName: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_USERNAME),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_USERNAME),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      email: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_EMAIL),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_EMAIL),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      password: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      confirmPassword: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.minLength(VALIDATION_LENGTHS.MIN_PASSWORD),\r\n          Validators.maxLength(VALIDATION_LENGTHS.MAX_PASSWORD),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n    },\r\n    { validators: [equivalentValidator('password', 'confirmPassword')] }\r\n  );\r\n}"
                }
            ],
            "src/app/shared/services/forms/initThemeForm.ts": [
                {
                    "name": "initThemeForm",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/services/forms/initThemeForm.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(): FormGroup<ThemeForm> => {\r\n  return new FormGroup({\r\n    theme: new FormControl(false, {\r\n      validators: [Validators.required],\r\n      nonNullable: true,\r\n    }),\r\n  });\r\n}"
                }
            ],
            "src/app/core/_interceptors/refresh-token.interceptor.ts": [
                {
                    "name": "isRefreshing",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "false"
                },
                {
                    "name": "refreshTokenInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const tokenService = inject(TokenService);\r\n\r\n  if (req.url.includes(ApiEndpoints.REFRESH_TOKEN)) {\r\n    return next(req);\r\n  }\r\n\r\n  return next(req).pipe(\r\n    catchError((error: HttpErrorResponse) => {\r\n      if (error.status === 401 && !isRefreshing) {\r\n        isRefreshing = true;\r\n\r\n        const accessToken = tokenService.getAccessToken();\r\n        const refreshToken = tokenService.getRefreshToken();\r\n\r\n        if (accessToken && refreshToken) {\r\n          return tokenService.refreshToken({ accessToken, refreshToken }).pipe(\r\n            switchMap((newTokens: IAuthTokensResponseDto) => {\r\n              const newAccessToken: IAccessToken = newTokens.accessToken;\r\n              const newRefreshToken: IRefreshToken = {\r\n                refreshToken: newTokens.refreshToken,\r\n                expiresAt: newTokens.expiresAt,\r\n              };\r\n              tokenService.setTokens(newAccessToken, newRefreshToken);\r\n\r\n              const clonedReq = req.clone({\r\n                setHeaders: {\r\n                  Authorization: `Bearer ${newTokens.accessToken}`,\r\n                },\r\n              });\r\n              isRefreshing = false;\r\n              return next(clonedReq);\r\n            }),\r\n            catchError(refreshError => {\r\n              isRefreshing = false;\r\n              tokenService.removeTokens();\r\n              return throwError(() => refreshError);\r\n            })\r\n          );\r\n        } else {\r\n          isRefreshing = false;\r\n          tokenService.removeTokens();\r\n          return throwError(() => error);\r\n        }\r\n      } else {\r\n        return throwError(() => error);\r\n      }\r\n    })\r\n  );\r\n}"
                }
            ],
            "src/app/config/menu.config.ts": [
                {
                    "name": "MenuConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/menu.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  title: 'MENU.TITLE',\r\n  footerTitle: 'MENU.FOOTER_TITLE',\r\n  authMenuItems: [{ label: 'MENU.PROFILE', routerLink: `/${RouterEnum.settings}` }],\r\n  nonAuthMenuItems: [\r\n    { label: 'MENU.LOGIN', routerLink: `/${RouterEnum.login}` },\r\n    { label: 'MENU.REGISTER', routerLink: `/${RouterEnum.register}` },\r\n  ],\r\n  langs: [\r\n    { label: 'English', value: LanguageCode.ENGLISH },\r\n    { label: 'Polski', value: LanguageCode.POLISH },\r\n  ],\r\n}"
                }
            ],
            "src/app/core/_guards/role.guard.ts": [
                {
                    "name": "roleGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_guards/role.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n  const roleService = inject(RoleService);\r\n  const requiredRole = route.data['roles'];\r\n\r\n  return roleService.isAuthorized(requiredRole);\r\n}"
                }
            ],
            "src/app/core/_guards/unauth.guard.ts": [
                {
                    "name": "unAuthGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_guards/unauth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  if (!authService.isAuth()) {\r\n    return true;\r\n  }\r\n\r\n  router.navigate([RouterEnum.home]);\r\n  return false;\r\n}"
                }
            ],
            "src/app/config/validations.config.ts": [
                {
                    "name": "VALIDATION_LENGTHS",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/validations.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  MIN_EMAIL: 3,\r\n  MAX_EMAIL: 50,\r\n  MIN_PASSWORD: 8,\r\n  MAX_PASSWORD: 75,\r\n  MIN_USERNAME: 3,\r\n  MAX_USERNAME: 50,\r\n  MIN_NAME: 3,\r\n  MAX_NAME: 50,\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/enums/api-endpoints.enum.ts": [
                {
                    "name": "ApiEndpoints",
                    "childs": [
                        {
                            "name": "SIGN_IN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/login"
                        },
                        {
                            "name": "SIGN_UP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/register"
                        },
                        {
                            "name": "RESET_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "CHANGE_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "REFRESH_TOKEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/refresh-token"
                        },
                        {
                            "name": "REVOKE_TOKEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/revoke-token"
                        },
                        {
                            "name": "GET_USERS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/users"
                        },
                        {
                            "name": "GET_USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/users"
                        },
                        {
                            "name": "GET_FILE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files"
                        },
                        {
                            "name": "GET_FILES_LIST",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files"
                        },
                        {
                            "name": "SEND_FILE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files/upload"
                        },
                        {
                            "name": "DOWNLOAD_FILE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files/download"
                        },
                        {
                            "name": "EDIT_FILE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files"
                        },
                        {
                            "name": "DELETE_FILE",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files"
                        },
                        {
                            "name": "GET_FILES_STATS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/files/stats"
                        },
                        {
                            "name": "KARMELKI",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/karmelki"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enums/api-endpoints.enum.ts"
                }
            ],
            "src/app/enums/LanguageCode.enum.ts": [
                {
                    "name": "LanguageCode",
                    "childs": [
                        {
                            "name": "POLISH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "pl"
                        },
                        {
                            "name": "ENGLISH",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "en"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enums/LanguageCode.enum.ts"
                }
            ],
            "src/app/enums/roles.enum.ts": [
                {
                    "name": "RolesEnum",
                    "childs": [
                        {
                            "name": "USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "USER"
                        },
                        {
                            "name": "MOD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "MOD"
                        },
                        {
                            "name": "ADMIN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "ADMIN"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enums/roles.enum.ts"
                }
            ],
            "src/app/enums/router.enum.ts": [
                {
                    "name": "RouterEnum",
                    "childs": [
                        {
                            "name": "home",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "login"
                        },
                        {
                            "name": "register",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "register"
                        },
                        {
                            "name": "logout",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "logout"
                        },
                        {
                            "name": "settings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "settings"
                        },
                        {
                            "name": "admin",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "admin"
                        },
                        {
                            "name": "changePassword",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "change-password"
                        },
                        {
                            "name": "deleteAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "deleteAccount"
                        },
                        {
                            "name": "forgetPassword",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "forget-password"
                        },
                        {
                            "name": "preferences",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "preferences"
                        },
                        {
                            "name": "fileDetails",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "file-details"
                        },
                        {
                            "name": "notFound",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "not-found"
                        },
                        {
                            "name": "karmelki",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "karmelki"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/enums/router.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/types/auto-complete.types.ts": [
                {
                    "name": "AutocompleteBasic",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"on\" | \"off\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocomplete",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "IAutocompletePassword | AutocompleteBasic | IAutocompletePersonalInfo | IAutocompleteAddress | IAutocompleteTelephone | IAutocompleteCreditCard | IAutocompleteDate | IAutocompleteTransaction | IAutocompleteMisc",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteAddress",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"street-address\" | \"address-line1\" | \"address-line2\" | \"address-line3\" | \"address-level1\" | \"address-level2\" | \"address-level3\" | \"address-level4\" | \"country\" | \"country-name\" | \"postal-code\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteCreditCard",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"cc-name\" | \"cc-given-name\" | \"cc-additional-name\" | \"cc-family-name\" | \"cc-number\" | \"cc-exp\" | \"cc-exp-month\" | \"cc-exp-year\" | \"cc-csc\" | \"cc-type\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteDate",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"bday\" | \"bday-day\" | \"bday-month\" | \"bday-year\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteMisc",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"sex\" | \"photo\" | \"url\" | \"impp\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompletePassword",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"new-password\" | \"current-password\" | \"one-time-code\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompletePersonalInfo",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "AutocompleteBasic | \"name\" | \"honorific-prefix\" | \"given-name\" | \"additional-name\" | \"family-name\" | \"honorific-suffix\" | \"nickname\" | \"email\" | \"username\" | \"organization-title\" | \"organization\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteTelephone",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"tel\" | \"tel-country-code\" | \"tel-national\" | \"tel-area-code\" | \"tel-local\" | \"tel-extension\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IAutocompleteTransaction",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"transaction-currency\" | \"transaction-amount\" | \"language\"",
                    "file": "src/app/shared/types/auto-complete.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/core/_models/tokens.model.ts": [
                {
                    "name": "IAccessToken",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "string",
                    "file": "src/app/core/_models/tokens.model.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 154
                }
            ],
            "src/app/shared/types/button.types.ts": [
                {
                    "name": "IButtonBadgeSeverity",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IButtonIconPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"left\" | \"right\" | \"top\" | \"bottom\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IButtonSeverity",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"info\" | \"warn\" | \"help\" | \"danger\" | \"contrast\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"large\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"outlined\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/fileUploader.types.ts": [
                {
                    "name": "IFileUploadMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"advanced\"",
                    "file": "src/app/shared/types/fileUploader.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/input.types.ts": [
                {
                    "name": "IInputIcons",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"user\" | \"map\" | \"clock\" | \"star\" | \"check\" | \"times\" | \"shopping-cart\" | \"search\"",
                    "file": "src/app/shared/types/input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IInputTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"number\" | \"email\" | \"password\" | \"tel\" | \"url\"",
                    "file": "src/app/shared/types/input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/toast.types.ts": [
                {
                    "name": "IKeys",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"tl\" | \"tc\" | \"tr\" | \"bl\" | \"bc\" | \"br\" | \"c\"",
                    "file": "src/app/shared/types/toast.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IPositions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\" | \"center\"",
                    "file": "src/app/shared/types/toast.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ISeverity",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                    "file": "src/app/shared/types/toast.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/select.types.ts": [
                {
                    "name": "ILabelVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"over\" | \"in\" | \"on\"",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ISelectOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "ISelectOption[]",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                },
                {
                    "name": "ISize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"large\"",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"filled\" | \"outlined\"",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/navbar.types.ts": [
                {
                    "name": "ILangs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "Ilang[]",
                    "file": "src/app/shared/types/navbar.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                }
            ],
            "src/app/shared/types/password-input.types.ts": [
                {
                    "name": "ISize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"large\" | undefined",
                    "file": "src/app/shared/types/password-input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "IVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"filled\" | \"outlined\"",
                    "file": "src/app/shared/types/password-input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/file-type.types.ts": [
                {
                    "name": "Position",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"both\"",
                    "file": "src/app/shared/types/file-type.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/table.types.ts": [
                {
                    "name": "Position",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top\" | \"bottom\" | \"both\"",
                    "file": "src/app/shared/types/table.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "httpLoaderFactory",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/menu.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MenuConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/validations.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "VALIDATION_LENGTHS",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_guards/role.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "roleGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_guards/unauth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_interceptors/error.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "errorInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "isRefreshing",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthRefreshTokensRequestDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthTokensResponseDto",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILoginDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRegisterDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRevokeTokenRequestDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/fileDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileEditRequestDto",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/fileDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileListResponseDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/fileDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileStatsDto",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/fileDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPageableFileResponseDto",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/base-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseResponse",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/base-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseResponseWithoutData",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/base-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPagination",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/decoded-token.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDecodedToken",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/file.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFile",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/file.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileList",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/karmelki.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IKarmelki",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/karmelki.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IKarmelkiResponse",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/language.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILanguage",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/paged-query-params.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPagedQueryParams",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/query-params.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IQueryParams",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/tokens.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRefreshToken",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/tokens.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITokens",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/tokens.model.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAccessToken",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/example-crud.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ExampleCrudService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/file/file.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FileService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/httpRequestFactory/request-factory.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RequestFactoryService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/language/language.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "LanguageService",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/role/role.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RoleService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/token/token.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TokenService",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/features/example-crud-view/example-crud-view.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ExampleCrudViewComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/features/not-found/not-found.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NotFoundComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/accordion/accordion.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AccordionComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/altcha/altcha.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AltchaComponent",
                "coveragePercent": 0,
                "coverageCount": "0/16",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/confirm-modal/confirm-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/context-menu/context-menu.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ContextMenuComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/donut-chart/donut-chart.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DonutChartComponent",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/editor/editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-table/file-table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileTableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/32",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-uploader/file-uploader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/20",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/image/image.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ImageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/info-modal/info-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/22",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/34",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/password-input/password-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/reusable-modal/reusable-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ReusableModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/37",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/table/table.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "TableComponent",
                "coveragePercent": 0,
                "coverageCount": "0/35",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/toggle-switch/toggle-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/21",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/has-role.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "HasRoleDirective",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/is-logged-in.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "IsLoggedInDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/directives/not-logged-in.directive.ts",
                "type": "directive",
                "linktype": "directive",
                "name": "NotLoggedInDirective",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/altcha.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAltchaStatus",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ExampleCrudForm",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswdRecoveryForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswordsForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterForm",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ThemeForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/error.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ErrorService",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initExampleCrudForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initExampleCrudForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initLoginForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initLoginForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initPasswdRecoveryForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initPasswdRecoveryForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initPasswordsForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initPasswordsForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initRegisterForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initRegisterForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/forms/initThemeForm.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initThemeForm",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/accordion.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAccordionPanelItem",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/accordion.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAccordionProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/altcha.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAltchaProps",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "AutocompleteBasic",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocomplete",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteCreditCard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteDate",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteMisc",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompletePassword",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompletePersonalInfo",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteTelephone",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/auto-complete.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IAutocompleteTransaction",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IButtonProps",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IButtonBadgeSeverity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IButtonIconPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IButtonSeverity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IButtonSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IButtonVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/checkbox.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ICheckboxProps",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/context-menu.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContextMenuEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/context-menu.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContextMenuProps",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/donut-chart.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IChartDataset",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/donut-chart.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDonutChartData",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/donut-chart.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDonutChartOptions",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/donut-chart.type.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDonutChartProps",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/editor.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEditorProps",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/editor.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITextChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/file-type.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileItem",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/file-type.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileTableProps",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/file-type.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Position",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/fileUploader.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileUploadProps",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/fileUploader.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUploadEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/fileUploader.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IFileUploadMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/footer.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFooterProps",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/image.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IImageProps",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/input.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInputProps",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IInputIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IInputTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/modal.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IConfirmModalProps",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/modal.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IInfoModalProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "Ilang",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IMenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "INavbarProps",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUser",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ILangs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/password-input.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPasswordInputProps",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/password-input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ISize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/password-input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/resuable-modal.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IReusableModalProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ISelectProps",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ILabelVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ISelectOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ISize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IContextMenuAction",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableActionButton",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableColumn",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/table.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITableProps",
                "coveragePercent": 0,
                "coverageCount": "0/26",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/table.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Position",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toast.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IKeys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toast.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IPositions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toast.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ISeverity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toogleSwitch.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IToggleSwitchProps",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/equivalent.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "equivalentValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}