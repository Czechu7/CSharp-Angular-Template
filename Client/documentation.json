{
    "pipes": [],
    "interfaces": [
        {
            "name": "ButtonProps",
            "id": "interface-ButtonProps-d389222a32c212341e1eb0218ce955ef806bc25f165a884b9440eb10da568ac28c01da04a217a4bb3339c6ecabe5ebcfcded9b91ca5686588999420eedabf042",
            "file": "src/app/shared/types/button.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export type ButtonIconPosition = 'left' | 'right' | 'top' | 'bottom';\r\n\r\nexport type ButtonSeverity =\r\n  | 'primary'\r\n  | 'secondary'\r\n  | 'success'\r\n  | 'info'\r\n  | 'warn'\r\n  | 'help'\r\n  | 'danger'\r\n  | 'contrast';\r\n\r\nexport type ButtonVariant = 'text' | 'outlined';\r\n\r\nexport type ButtonSize = 'small' | 'large';\r\n\r\nexport type ButtonBadgeSeverity = 'info' | 'success' | 'warn' | 'danger' | 'contrast';\r\n\r\nexport interface ButtonProps {\r\n  label?: string;\r\n  icon?: string;\r\n  iconPos?: ButtonIconPosition;\r\n  badge?: string;\r\n  badgeSeverity?: ButtonBadgeSeverity;\r\n  severity?: ButtonSeverity;\r\n  raised?: boolean;\r\n  rounded?: boolean;\r\n  loading?: boolean;\r\n  disabled?: boolean;\r\n  variant?: ButtonVariant;\r\n  size?: ButtonSize;\r\n  styleClass?: string;\r\n  ariaLabel?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "badgeSeverity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonBadgeSeverity",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "iconPos",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonIconPosition",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "raised",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "rounded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "severity",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonSeverity",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonSize",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonVariant",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "CheckboxProps",
            "id": "interface-CheckboxProps-d031801463f2cecdbbe4b8cf02067dbf82bd606c44c198f0d058144b742c0b0111329c6188bf7fd2fcc949c1260efde4a5f173257e3bf932e8bd574b56ef73e2",
            "file": "src/app/shared/types/checkbox.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface CheckboxProps {\n  label?: string;\n  inputId?: string;\n  name?: string;\n  disabled?: boolean;\n  required?: boolean;\n  formControlName?: string;\n  value?: boolean;\n  inavlid?: boolean;\n  errorMessage?: string;\n}\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "inavlid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ConfirmModalProps",
            "id": "interface-ConfirmModalProps-0eea838c37e4d2ed7e96b819c5f3863b17fcdaf91271f549955410810218bc3eaec00c3d38bd5f39510d2e0d1541f660a7dbde2d6f297de12bbaf5bc556208b7",
            "file": "src/app/shared/types/modal.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConfirmModalProps {\r\n  header: string;\r\n  visible: boolean;\r\n  message: string;\r\n  yesLabel: string;\r\n  noLabel: string;\r\n  onYes: () => void;\r\n  onNo: () => void;\r\n}\r\n\r\nexport interface InfoModalProps {\r\n  header: string;\r\n  visible: boolean;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "noLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "onNo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "onYes",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "yesLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "FooterProps",
            "id": "interface-FooterProps-5d21e8605e987fdbe95f60ced3d16f852cbb4a6fcd13b6c718d9c1142dcbb1613ddb8ed5aa56590c60996d573845bbaa396509b89f99f58c592e3f40d275873f",
            "file": "src/app/shared/types/footer.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { MenuItem } from './navbar.types';\n\nexport interface FooterProps {\n  logo?: string;\n  title?: string;\n  links?: MenuItem[];\n  socialLinks?: MenuItem[];\n  customClass?: string;\n}\n",
            "properties": [
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "links",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "socialLinks",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IBaseResponse",
            "id": "interface-IBaseResponse-2c19b14c1890f84477d952b8058f6f9ccb14c6670f5a4aa6575fdb6def6fa268ef65f518712ecd87a3ff33206a1ec279bdf5aee82a9cd798d804e573f02f2296",
            "file": "src/app/core/_models/base-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBaseResponse<T> {\r\n  success: boolean;\r\n  statusCode: number;\r\n  message: string;\r\n  data: T;\r\n  pagination?: IPagination;\r\n  errors?: string[];\r\n}\r\n\r\ninterface IPagination {\r\n  pageSize: number;\r\n  pageNumber: number;\r\n  totalCount: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "data",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "errors",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "pagination",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPagination",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "statusCode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "success",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IDecodedToken",
            "id": "interface-IDecodedToken-7779b79cadadbba4c27f2cff6a06011850968cb022f4e48119620ca2ab17624cc9ae1fb66cdc76ea1795a7c7ec0931af90733af596b0103ef9e87f98773c91a3",
            "file": "src/app/core/_models/decoded-token.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IDecodedToken {\r\n  sub: string;\r\n  name: string;\r\n  iat: number;\r\n  exp: number;\r\n  roles: string[];\r\n}\r\n",
            "properties": [
                {
                    "name": "exp",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "iat",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "roles",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "sub",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IEditorProps",
            "id": "interface-IEditorProps-c49e131cd87fd162e9cb099c4b2f6dea154c288e2b6d5025a055c0c6c3ba802eff8cea89d8494c0f2d514caaaf0a7174659cd824955cc25050ca8ec44fb01cec",
            "file": "src/app/shared/types/editor.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IEditorProps {\r\n  style?: Record<string, string>;\r\n  styleClass?: string;\r\n  placeholder?: string;\r\n  formats?: string[];\r\n  modules?: Record<string, unknown>;\r\n  readOnly?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport interface ITextChangeEvent {\r\n  htmlValue: string;\r\n  textValue: string;\r\n  delta: unknown;\r\n  source: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "formats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | >",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "readOnly",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "style",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IFileUploadProps",
            "id": "interface-IFileUploadProps-9ed5beea1cd12733bedf60e7308812271173ce19e6e97286610d34a963fb061b714b70d528c61b5772b2d06da818b00fdeb671db229cbaffbae6bc416421e85d",
            "file": "src/app/shared/types/fileUploader.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpEvent } from '@angular/common/http';\r\n\r\nexport type IFileUploadMode = 'basic' | 'advanced';\r\n\r\nexport interface IFileUploadProps {\r\n  url: string;\r\n  multiple: boolean;\r\n  accept: string;\r\n  maxFileSize: number;\r\n  mode: IFileUploadMode;\r\n  emptyMessage: string;\r\n  name: string;\r\n  auto?: boolean;\r\n  showCancelButton?: boolean;\r\n  showUploadButton?: boolean;\r\n}\r\n\r\nexport interface IUploadEvent {\r\n  originalEvent: HttpEvent<unknown>;\r\n  files: File[];\r\n}\r\n",
            "properties": [
                {
                    "name": "accept",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "auto",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "emptyMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "maxFileSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "mode",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IFileUploadMode",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "multiple",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "showCancelButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "showUploadButton",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ILoginDto",
            "id": "interface-ILoginDto-09c3b1dfe502240c1c9fedb4e899d4fbfea6fab551794753e79b4e3ada3c879ac08a80603310ddbb6957336ea8b4e3febc0f69738489cafdfe65bdef4998daf5",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILoginDto {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface IRegisterDto extends ILoginDto {\r\n  confirmPassword: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InfoModalProps",
            "id": "interface-InfoModalProps-0eea838c37e4d2ed7e96b819c5f3863b17fcdaf91271f549955410810218bc3eaec00c3d38bd5f39510d2e0d1541f660a7dbde2d6f297de12bbaf5bc556208b7",
            "file": "src/app/shared/types/modal.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ConfirmModalProps {\r\n  header: string;\r\n  visible: boolean;\r\n  message: string;\r\n  yesLabel: string;\r\n  noLabel: string;\r\n  onYes: () => void;\r\n  onNo: () => void;\r\n}\r\n\r\nexport interface InfoModalProps {\r\n  header: string;\r\n  visible: boolean;\r\n  message: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "header",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "message",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "InputProps",
            "id": "interface-InputProps-1e4ea5e24b789bc036812aa3b42b15b4bc56a9c6ece01546e013e84423a6d8dface00b352ffe20e683adaf39d9fad0021fdbaa85a736d4537deb597f966b151f",
            "file": "src/app/shared/types/input.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport type InputTypes = 'text' | 'number' | 'email' | 'password' | 'tel' | 'url';\r\n\r\nexport type InputIcons = 'user' | 'map' | 'clock' | 'star' | 'check' | 'times' | 'shopping-cart';\r\n\r\nexport interface InputProps {\r\n  label?: string;\r\n  placeholder?: string;\r\n  type?: InputTypes;\r\n  disabled?: boolean;\r\n  required?: boolean;\r\n  errorMessage?: string;\r\n  prefixIcon?: InputIcons;\r\n  prefixText?: string;\r\n  suffixIcon?: InputIcons;\r\n  suffixText?: string;\r\n  inavlid?: boolean;\r\n  autocomplete?: string;\r\n  formControl: FormControl;\r\n}\r\n",
            "properties": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "inavlid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "prefixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputIcons",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "prefixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputIcons",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "suffixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "type",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputTypes",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPagedQueryParams",
            "id": "interface-IPagedQueryParams-8f0cd356ddcd6ea370b9cbdf27361d5a20796f7d669e06ce583f1404a37df7c24ade6133c4a169373e73a803cefadf2390a5303ff8989f4785702a4413ac1cf7",
            "file": "src/app/core/_models/paged-query-params.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IPagedQueryParams {\r\n  pageNumber: number;\r\n  pageSize: number;\r\n  filter?: string;\r\n  sortBy?: string;\r\n  sortDescending?: boolean;\r\n  includeInactive?: boolean;\r\n}\r\n",
            "properties": [
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "includeInactive",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "sortBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "sortDescending",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPagination",
            "id": "interface-IPagination-2c19b14c1890f84477d952b8058f6f9ccb14c6670f5a4aa6575fdb6def6fa268ef65f518712ecd87a3ff33206a1ec279bdf5aee82a9cd798d804e573f02f2296",
            "file": "src/app/core/_models/base-response.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IBaseResponse<T> {\r\n  success: boolean;\r\n  statusCode: number;\r\n  message: string;\r\n  data: T;\r\n  pagination?: IPagination;\r\n  errors?: string[];\r\n}\r\n\r\ninterface IPagination {\r\n  pageSize: number;\r\n  pageNumber: number;\r\n  totalCount: number;\r\n}\r\n",
            "properties": [
                {
                    "name": "pageNumber",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "pageSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "totalCount",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IQueryParams",
            "id": "interface-IQueryParams-3c1191acc2b8c432ae31ab1a2f181c6f3b94c671c3e1f787f778798b3a89ff4b036d716f363faf355566bc0ffd8bd72b0ccb337b2d198a3e6e7ce301fa54ed32",
            "file": "src/app/core/_models/query-params.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpHeaders, HttpParams } from '@angular/common/http';\r\n\r\nexport interface IQueryParams {\r\n  params?: HttpParams;\r\n  headers?: HttpHeaders;\r\n}\r\n",
            "properties": [
                {
                    "name": "headers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpHeaders",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "params",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpParams",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IRegisterDto",
            "id": "interface-IRegisterDto-09c3b1dfe502240c1c9fedb4e899d4fbfea6fab551794753e79b4e3ada3c879ac08a80603310ddbb6957336ea8b4e3febc0f69738489cafdfe65bdef4998daf5",
            "file": "src/app/core/_models/DTOs/authDto.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ILoginDto {\r\n  email: string;\r\n  password: string;\r\n}\r\n\r\nexport interface IRegisterDto extends ILoginDto {\r\n  confirmPassword: string;\r\n  firstName: string;\r\n  lastName: string;\r\n  username: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "ILoginDto"
            ]
        },
        {
            "name": "ITextChangeEvent",
            "id": "interface-ITextChangeEvent-c49e131cd87fd162e9cb099c4b2f6dea154c288e2b6d5025a055c0c6c3ba802eff8cea89d8494c0f2d514caaaf0a7174659cd824955cc25050ca8ec44fb01cec",
            "file": "src/app/shared/types/editor.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface IEditorProps {\r\n  style?: Record<string, string>;\r\n  styleClass?: string;\r\n  placeholder?: string;\r\n  formats?: string[];\r\n  modules?: Record<string, unknown>;\r\n  readOnly?: boolean;\r\n  disabled?: boolean;\r\n}\r\n\r\nexport interface ITextChangeEvent {\r\n  htmlValue: string;\r\n  textValue: string;\r\n  delta: unknown;\r\n  source: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "delta",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "htmlValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "source",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "textValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ITokens",
            "id": "interface-ITokens-f684637b9e6b17d89e67e90f3815dd0257565b8c8a057f5a918841aa7171be8f9f3e4e1435c1c1531481fec2a74ff95f2089d767f1d6199ebb0bf8254bf2af28",
            "file": "src/app/core/_models/tokens.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface ITokens {\r\n  accessToken: string;\r\n  refreshToken: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "accessToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "refreshToken",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IUploadEvent",
            "id": "interface-IUploadEvent-9ed5beea1cd12733bedf60e7308812271173ce19e6e97286610d34a963fb061b714b70d528c61b5772b2d06da818b00fdeb671db229cbaffbae6bc416421e85d",
            "file": "src/app/shared/types/fileUploader.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { HttpEvent } from '@angular/common/http';\r\n\r\nexport type IFileUploadMode = 'basic' | 'advanced';\r\n\r\nexport interface IFileUploadProps {\r\n  url: string;\r\n  multiple: boolean;\r\n  accept: string;\r\n  maxFileSize: number;\r\n  mode: IFileUploadMode;\r\n  emptyMessage: string;\r\n  name: string;\r\n  auto?: boolean;\r\n  showCancelButton?: boolean;\r\n  showUploadButton?: boolean;\r\n}\r\n\r\nexport interface IUploadEvent {\r\n  originalEvent: HttpEvent<unknown>;\r\n  files: File[];\r\n}\r\n",
            "properties": [
                {
                    "name": "files",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "originalEvent",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpEvent<>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "LoginForm",
            "id": "interface-LoginForm-53a0dffb4d0b0bf5b48921dd783a449e5114889b61384c7b95185c044588c72f75c3b356d0d8df9fa6f3544ed3f1b5a2685614f190184ac4293b169fe7404204",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "MenuItem",
            "id": "interface-MenuItem-15f92bea936be8440c85ec2ca52b143fce9aff6f9f93b446f3b8576db632509bfbfba32e90f3d33ef8930710b34aee20543b56fb41254fa0b05aa367b77772bb",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MenuItem {\r\n  label: string;\r\n  icon?: string;\r\n  routerLink?: string;\r\n  url?: string;\r\n  target?: string;\r\n  command?: () => void;\r\n  queryParams?: Record<string, string>;\r\n  items?: MenuItem[];\r\n  visible?: boolean;\r\n  disabled?: boolean;\r\n  expanded?: boolean;\r\n}\r\nexport interface User {\r\n  name: string;\r\n  avatar?: string;\r\n  id?: string;\r\n  role?: string;\r\n}\r\n\r\nexport type Langs = { label: string; value: string }[];\r\n\r\nexport interface NavbarProps {\r\n  title: string;\r\n  logo?: string;\r\n  commonMenuItems: MenuItem[];\r\n  authMenuItems: MenuItem[];\r\n  nonAuthMenuItems: MenuItem[];\r\n  sticky?: boolean;\r\n  customClass?: string;\r\n  showSwitchTheme?: boolean;\r\n  showSwtichLang?: boolean;\r\n  langs: Langs;\r\n  isAuthenticated?: boolean;\r\n  user?: User;\r\n}\r\n",
            "properties": [
                {
                    "name": "command",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "expanded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 3
                },
                {
                    "name": "items",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "queryParams",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Record<string | string>",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "routerLink",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "target",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "url",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "visible",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "NavbarProps",
            "id": "interface-NavbarProps-15f92bea936be8440c85ec2ca52b143fce9aff6f9f93b446f3b8576db632509bfbfba32e90f3d33ef8930710b34aee20543b56fb41254fa0b05aa367b77772bb",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MenuItem {\r\n  label: string;\r\n  icon?: string;\r\n  routerLink?: string;\r\n  url?: string;\r\n  target?: string;\r\n  command?: () => void;\r\n  queryParams?: Record<string, string>;\r\n  items?: MenuItem[];\r\n  visible?: boolean;\r\n  disabled?: boolean;\r\n  expanded?: boolean;\r\n}\r\nexport interface User {\r\n  name: string;\r\n  avatar?: string;\r\n  id?: string;\r\n  role?: string;\r\n}\r\n\r\nexport type Langs = { label: string; value: string }[];\r\n\r\nexport interface NavbarProps {\r\n  title: string;\r\n  logo?: string;\r\n  commonMenuItems: MenuItem[];\r\n  authMenuItems: MenuItem[];\r\n  nonAuthMenuItems: MenuItem[];\r\n  sticky?: boolean;\r\n  customClass?: string;\r\n  showSwitchTheme?: boolean;\r\n  showSwtichLang?: boolean;\r\n  langs: Langs;\r\n  isAuthenticated?: boolean;\r\n  user?: User;\r\n}\r\n",
            "properties": [
                {
                    "name": "authMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "commonMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "isAuthenticated",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "langs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Langs",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "nonAuthMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "showSwitchTheme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "showSwtichLang",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "sticky",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "user",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PasswdRecoveryForm",
            "id": "interface-PasswdRecoveryForm-53a0dffb4d0b0bf5b48921dd783a449e5114889b61384c7b95185c044588c72f75c3b356d0d8df9fa6f3544ed3f1b5a2685614f190184ac4293b169fe7404204",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n",
            "properties": [
                {
                    "name": "email",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 4
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PasswordInputProps",
            "id": "interface-PasswordInputProps-582881588ec4af7b940da73635ed89a0716b944f8a42c5aa73eee86d08d9b1976e1e9f21f8b8b0928022c09b25736604d47a60d3f5f88ee84085c09a148df1e2",
            "file": "src/app/shared/types/password-input.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport type Size = 'small' | 'large' | undefined;\r\n\r\nexport type Variant = 'filled' | 'outlined';\r\n\r\nexport interface PasswordInputProps {\r\n  label?: string;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  required?: boolean;\r\n  invalid?: boolean;\r\n  errorMessage?: string;\r\n  feedback?: boolean;\r\n  promptLabel?: string;\r\n  weakLabel?: string;\r\n  mediumLabel?: string;\r\n  strongLabel?: string;\r\n  // size?: Size;\r\n  variant: Variant;\r\n  inavlid?: boolean;\r\n  formControl: FormControl;\r\n}\r\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "feedback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "inavlid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "mediumLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "promptLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "strongLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Variant",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "weakLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "PasswordsForm",
            "id": "interface-PasswordsForm-53a0dffb4d0b0bf5b48921dd783a449e5114889b61384c7b95185c044588c72f75c3b356d0d8df9fa6f3544ed3f1b5a2685614f190184ac4293b169fe7404204",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n",
            "properties": [
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "repeatedPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "RegisterForm",
            "id": "interface-RegisterForm-53a0dffb4d0b0bf5b48921dd783a449e5114889b61384c7b95185c044588c72f75c3b356d0d8df9fa6f3544ed3f1b5a2685614f190184ac4293b169fe7404204",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n",
            "properties": [
                {
                    "name": "confirmPassword",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "firstName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "lastName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "username",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<string>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "LoginForm"
            ]
        },
        {
            "name": "SelectOption",
            "id": "interface-SelectOption-0dac918b1fec705d1bc6a42a4d1e49fd3e2015b14a58e0a12dd3ddc09f676371603f5959e838048c6d39cd14fd663536f19c16cba9c68c536aba441bc77d505a",
            "file": "src/app/shared/types/select.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SelectOption {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nexport type SelectOptions = SelectOption[];\r\n\r\nexport type Variant = 'filled' | 'outlined';\r\n\r\nexport type Size = 'small' | 'large';\r\n\r\nexport type LabelVariant = 'over' | 'in' | 'on';\r\n\r\nexport interface SelectProps<T = any> {\r\n  formControlName?: string;\r\n  checkmark: boolean;\r\n  showClear: boolean;\r\n  editable: boolean;\r\n  loading: boolean;\r\n  options?: T[];\r\n  optionLabel?: string;\r\n  optionValue?: string;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  required?: boolean;\r\n  filter?: boolean;\r\n  filterBy?: string;\r\n  virtualScroll?: boolean;\r\n  virtualScrollItemSize?: number;\r\n  value?: T;\r\n  variant?: Variant;\r\n  size?: Size;\r\n  label?: string;\r\n  labelVariant?: LabelVariant;\r\n  inputId?: string;\r\n  inavlid?: boolean;\r\n  errorMessage?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 3
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SelectProps",
            "id": "interface-SelectProps-0dac918b1fec705d1bc6a42a4d1e49fd3e2015b14a58e0a12dd3ddc09f676371603f5959e838048c6d39cd14fd663536f19c16cba9c68c536aba441bc77d505a",
            "file": "src/app/shared/types/select.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface SelectOption {\r\n  label: string;\r\n  value: string;\r\n}\r\n\r\nexport type SelectOptions = SelectOption[];\r\n\r\nexport type Variant = 'filled' | 'outlined';\r\n\r\nexport type Size = 'small' | 'large';\r\n\r\nexport type LabelVariant = 'over' | 'in' | 'on';\r\n\r\nexport interface SelectProps<T = any> {\r\n  formControlName?: string;\r\n  checkmark: boolean;\r\n  showClear: boolean;\r\n  editable: boolean;\r\n  loading: boolean;\r\n  options?: T[];\r\n  optionLabel?: string;\r\n  optionValue?: string;\r\n  placeholder?: string;\r\n  disabled?: boolean;\r\n  required?: boolean;\r\n  filter?: boolean;\r\n  filterBy?: string;\r\n  virtualScroll?: boolean;\r\n  virtualScrollItemSize?: number;\r\n  value?: T;\r\n  variant?: Variant;\r\n  size?: Size;\r\n  label?: string;\r\n  labelVariant?: LabelVariant;\r\n  inputId?: string;\r\n  inavlid?: boolean;\r\n  errorMessage?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "checkmark",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "editable",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "filterBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "inavlid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 36
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 33
                },
                {
                    "name": "labelVariant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "LabelVariant",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "loading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T[]",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "showClear",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Size",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Variant",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "virtualScroll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "virtualScrollItemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ThemeForm",
            "id": "interface-ThemeForm-53a0dffb4d0b0bf5b48921dd783a449e5114889b61384c7b95185c044588c72f75c3b356d0d8df9fa6f3544ed3f1b5a2685614f190184ac4293b169fe7404204",
            "file": "src/app/shared/models/form.model.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface PasswdRecoveryForm {\r\n  email: FormControl<string>;\r\n}\r\n\r\nexport interface PasswordsForm {\r\n  password: FormControl<string>;\r\n  repeatedPassword: FormControl<string>;\r\n}\r\n\r\nexport interface LoginForm {\r\n  email: FormControl<string>;\r\n  password: FormControl<string>;\r\n}\r\n\r\nexport interface RegisterForm extends LoginForm {\r\n  firstName: FormControl<string>;\r\n  lastName: FormControl<string>;\r\n  username: FormControl<string>;\r\n  confirmPassword: FormControl<string>;\r\n}\r\n\r\nexport interface ThemeForm {\r\n  theme: FormControl<boolean>;\r\n}\r\n",
            "properties": [
                {
                    "name": "theme",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl<boolean>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "ToggleSwitchProps",
            "id": "interface-ToggleSwitchProps-9fc3bf472d36ad7c03dbfef3f193ca87d0b25cf45e0ba169c4d47ac5825362ca703a08a493a67a7d99752ed97bdf6a835c4e2f6062f99a80a10404cd6929231f",
            "file": "src/app/shared/types/toogleSwitch.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { FormControl } from '@angular/forms';\r\n\r\nexport interface ToggleSwitchProps {\r\n  formControl?: FormControl;\r\n  disabled: boolean;\r\n  iconOn?: string;\r\n  iconOff?: string;\r\n  invalid?: boolean;\r\n  errorMessage?: string;\r\n  required?: boolean;\r\n  label?: string;\r\n}\r\n",
            "properties": [
                {
                    "name": "disabled",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 5
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormControl",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 4
                },
                {
                    "name": "iconOff",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 7
                },
                {
                    "name": "iconOn",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 6
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "User",
            "id": "interface-User-15f92bea936be8440c85ec2ca52b143fce9aff6f9f93b446f3b8576db632509bfbfba32e90f3d33ef8930710b34aee20543b56fb41254fa0b05aa367b77772bb-1",
            "file": "src/app/shared/types/navbar.types.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface MenuItem {\r\n  label: string;\r\n  icon?: string;\r\n  routerLink?: string;\r\n  url?: string;\r\n  target?: string;\r\n  command?: () => void;\r\n  queryParams?: Record<string, string>;\r\n  items?: MenuItem[];\r\n  visible?: boolean;\r\n  disabled?: boolean;\r\n  expanded?: boolean;\r\n}\r\nexport interface User {\r\n  name: string;\r\n  avatar?: string;\r\n  id?: string;\r\n  role?: string;\r\n}\r\n\r\nexport type Langs = { label: string; value: string }[];\r\n\r\nexport interface NavbarProps {\r\n  title: string;\r\n  logo?: string;\r\n  commonMenuItems: MenuItem[];\r\n  authMenuItems: MenuItem[];\r\n  nonAuthMenuItems: MenuItem[];\r\n  sticky?: boolean;\r\n  customClass?: string;\r\n  showSwitchTheme?: boolean;\r\n  showSwtichLang?: boolean;\r\n  langs: Langs;\r\n  isAuthenticated?: boolean;\r\n  user?: User;\r\n}\r\n",
            "properties": [
                {
                    "name": "avatar",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "role",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 18
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "User-1"
        }
    ],
    "injectables": [
        {
            "name": "AuthService",
            "id": "injectable-AuthService-0cce49418c259ef919ef7dd1f476cd86f4ba77c9990837fda1ca26d7d7018db0d2d935c02f0cfdb9c412d41ecafae9a6201213503d046508177bd7e725c2072f",
            "file": "src/app/core/_services/auth/auth.service.ts",
            "properties": [
                {
                    "name": "requestFactory",
                    "defaultValue": "inject(RequestFactoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "changePassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 39,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "resetPassword",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signIn",
                    "args": [
                        {
                            "name": "loginData",
                            "type": "ILoginDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "loginData",
                            "type": "ILoginDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "signOut",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "signUp",
                    "args": [
                        {
                            "name": "registerData",
                            "type": "IRegisterDto",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "registerData",
                            "type": "IRegisterDto",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { RequestFactoryService } from '../httpRequestFactory/request-factory.service';\r\nimport { ApiEndpoints } from '../../_models/api-endpoints.enum';\r\nimport { tap } from 'rxjs';\r\nimport { IBaseResponse } from '../../_models/base-response.model';\r\nimport { ITokens } from '../../_models/tokens.model';\r\nimport { ILoginDto, IRegisterDto } from '../../_models/DTOs/authDto.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class AuthService {\r\n  private requestFactory = inject(RequestFactoryService);\r\n\r\n  signIn(loginData: ILoginDto) {\r\n    return this.requestFactory.post<ITokens, ILoginDto>(ApiEndpoints.SIGN_IN, loginData).pipe(\r\n      tap((res: IBaseResponse<ITokens>) => {\r\n        localStorage.setItem('accessToken', res.data.accessToken);\r\n        localStorage.setItem('refreshToken', res.data.refreshToken);\r\n      })\r\n    );\r\n  }\r\n\r\n  signUp(registerData: IRegisterDto) {\r\n    return this.requestFactory.post<ITokens, IRegisterDto>(ApiEndpoints.SIGN_UP, registerData).pipe(\r\n      tap((res: IBaseResponse<ITokens>) => {\r\n        localStorage.setItem('accessToken', res.data.accessToken);\r\n        localStorage.setItem('refreshToken', res.data.refreshToken);\r\n      })\r\n    );\r\n  }\r\n\r\n  signOut(): void {\r\n    this.requestFactory.post(ApiEndpoints.SIGN_OUT, null);\r\n  }\r\n\r\n  resetPassword() {}\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  changePassword() {}\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "FormService",
            "id": "injectable-FormService-a968a686f6b42fea2c805ca756644a405baef184a0eee333a6dce8241e8c394f1c3733fbf6ed9a8eeb40d09a91768d9b37f0b67990b2312ff03847e97611d572",
            "file": "src/app/shared/services/form.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "string",
                    "typeParameters": [],
                    "line": 97,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "initLoginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<LoginForm>",
                    "typeParameters": [],
                    "line": 32,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initPasswdRecoveryForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<PasswdRecoveryForm>",
                    "typeParameters": [],
                    "line": 88,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initPasswordsForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<PasswordsForm>",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initRegisterForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<RegisterForm>",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "initThemeForm",
                    "args": [],
                    "optional": false,
                    "returnType": "FormGroup<ThemeForm>",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport {\r\n  PasswordsForm,\r\n  LoginForm,\r\n  RegisterForm,\r\n  PasswdRecoveryForm,\r\n  ThemeForm,\r\n} from '../models/form.model';\r\nimport { equivalentValidator } from '../validators/equivalent.validator';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class FormService {\r\n  initPasswordsForm(): FormGroup<PasswordsForm> {\r\n    return new FormGroup(\r\n      {\r\n        password: new FormControl('', {\r\n          validators: [Validators.required, Validators.minLength(8), Validators.maxLength(75)],\r\n          nonNullable: true,\r\n        }),\r\n        repeatedPassword: new FormControl('', {\r\n          validators: [Validators.required, Validators.minLength(8), Validators.maxLength(75)],\r\n          nonNullable: true,\r\n        }),\r\n      },\r\n      { validators: [equivalentValidator('password', 'repeatedPassword')] }\r\n    );\r\n  }\r\n\r\n  initLoginForm(): FormGroup<LoginForm> {\r\n    return new FormGroup({\r\n      email: new FormControl('', {\r\n        validators: [\r\n          Validators.required,\r\n          Validators.email,\r\n          Validators.minLength(3),\r\n          Validators.maxLength(50),\r\n        ],\r\n        nonNullable: true,\r\n      }),\r\n      password: new FormControl('', {\r\n        validators: [Validators.required, Validators.minLength(8), Validators.maxLength(75)],\r\n        nonNullable: true,\r\n      }),\r\n    });\r\n  }\r\n\r\n  initRegisterForm(): FormGroup<RegisterForm> {\r\n    return new FormGroup({\r\n      username: new FormControl('', {\r\n        validators: [Validators.required, Validators.minLength(3), Validators.maxLength(50)],\r\n        nonNullable: true,\r\n      }),\r\n      firstName: new FormControl('', {\r\n        validators: [Validators.required, Validators.minLength(3), Validators.maxLength(50)],\r\n        nonNullable: true,\r\n      }),\r\n      lastName: new FormControl('', {\r\n        validators: [Validators.required, Validators.minLength(3), Validators.maxLength(50)],\r\n        nonNullable: true,\r\n      }),\r\n      email: new FormControl('', {\r\n        validators: [Validators.required, Validators.minLength(3), Validators.maxLength(50)],\r\n        nonNullable: true,\r\n      }),\r\n      password: new FormControl('', {\r\n        validators: [Validators.required, Validators.minLength(8), Validators.maxLength(75)],\r\n        nonNullable: true,\r\n      }),\r\n      confirmPassword: new FormControl('', {\r\n        validators: [Validators.required, Validators.minLength(8), Validators.maxLength(75)],\r\n        nonNullable: true,\r\n      }),\r\n    });\r\n  }\r\n\r\n  initThemeForm(): FormGroup<ThemeForm> {\r\n    return new FormGroup({\r\n      theme: new FormControl(false, {\r\n        validators: [Validators.required],\r\n        nonNullable: true,\r\n      }),\r\n    });\r\n  }\r\n\r\n  initPasswdRecoveryForm(): FormGroup<PasswdRecoveryForm> {\r\n    return new FormGroup({\r\n      email: new FormControl('', {\r\n        validators: [Validators.required, Validators.email],\r\n        nonNullable: true,\r\n      }),\r\n    });\r\n  }\r\n\r\n  getErrorMessage(control: FormControl): string {\r\n    if (control.hasError('required')) {\r\n      return 'Ta kontrolka jest wymagana.';\r\n    }\r\n\r\n    if (\r\n      control.hasError('pattern') &&\r\n      control.errors?.['pattern']?.['requiredPattern'] === '/^\\\\d{2}-\\\\d{3}$/'\r\n    ) {\r\n      return 'Podano kod pocztowy w niepoprawnym formacie.';\r\n    }\r\n\r\n    if (control.hasError('minlength')) {\r\n      return `Minimalna ilość znaków: ${control.errors?.['minlength']?.requiredLength}.`;\r\n    }\r\n\r\n    if (control.hasError('maxlength')) {\r\n      return `Maksymalna ilość znaków: ${control.errors?.['maxlength']?.requiredLength}.`;\r\n    }\r\n\r\n    if (control.hasError('email')) {\r\n      return `Niepoprawny adres e-mail.`;\r\n    }\r\n\r\n    if (control.hasError('passwordsNotEqual')) {\r\n      return 'Hasła muszą być takie same.';\r\n    }\r\n\r\n    return '';\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RequestFactoryService",
            "id": "injectable-RequestFactoryService-1322358444fe8e563a265fe315715de75290f757a89b8b0d601fb40ae6d88ec18f1886c877ce2faf900660706283d290f86d8777110ceb3086c478d66fb71590",
            "file": "src/app/core/_services/httpRequestFactory/request-factory.service.ts",
            "properties": [
                {
                    "name": "http",
                    "defaultValue": "inject(HttpClient)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "create",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "delete",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 122,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAll",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getById",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getDefaultHeaders",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpHeaders",
                    "typeParameters": [],
                    "line": 16,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getDefaultParams",
                    "args": [],
                    "optional": false,
                    "returnType": "HttpParams",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getPaged",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "queryParams",
                            "type": "IPagedQueryParams",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T"
                    ],
                    "line": 66,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "queryParams",
                            "type": "IPagedQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "patch",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 113,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "post",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "request",
                    "args": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints | string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "modifierKind": [
                        123
                    ],
                    "jsdoctags": [
                        {
                            "name": "method",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints | string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B | null | undefined",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "update",
                    "args": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<IBaseResponse<T>>",
                    "typeParameters": [
                        "T",
                        "B"
                    ],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "endpoint",
                            "type": "ApiEndpoints",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "id",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "body",
                            "type": "B",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "options",
                            "type": "IQueryParams",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http';\r\nimport { inject, Injectable } from '@angular/core';\r\nimport { Observable } from 'rxjs';\r\nimport { environment } from '../../../../environments/environment.development';\r\nimport { ApiEndpoints } from '../../_models/api-endpoints.enum';\r\nimport { IBaseResponse } from '../../_models/base-response.model';\r\nimport { IPagedQueryParams } from '../../_models/paged-query-params.model';\r\nimport { IQueryParams } from '../../_models/query-params.model';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class RequestFactoryService {\r\n  private http = inject(HttpClient);\r\n\r\n  private getDefaultHeaders(): HttpHeaders {\r\n    return new HttpHeaders({ 'Content-Type': 'application/json' });\r\n  }\r\n\r\n  private getDefaultParams(): HttpParams {\r\n    return new HttpParams();\r\n  }\r\n\r\n  private request<T, B = undefined>(\r\n    method: string,\r\n    endpoint: ApiEndpoints | string,\r\n    body?: B | null | undefined,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    const headers = options?.headers ? options.headers : this.getDefaultHeaders();\r\n    const params = options?.params ? options.params : this.getDefaultParams();\r\n\r\n    const configuration = {\r\n      headers,\r\n      params,\r\n      body,\r\n    };\r\n\r\n    return this.http.request<IBaseResponse<T>>(\r\n      method,\r\n      `${environment.apiURL}/${endpoint}`,\r\n      configuration\r\n    );\r\n  }\r\n\r\n  post<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('POST', endpoint, body, options);\r\n  }\r\n\r\n  getAll<T>(endpoint: ApiEndpoints, options?: IQueryParams): Observable<IBaseResponse<T>> {\r\n    return this.request<T>('GET', endpoint, null, options);\r\n  }\r\n\r\n  getById<T>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T>('GET', `${endpoint}/${id}`, null, options);\r\n  }\r\n\r\n  getPaged<T>(\r\n    endpoint: ApiEndpoints,\r\n    queryParams: IPagedQueryParams,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    const pageNumber = queryParams.pageNumber > 0 ? queryParams.pageNumber : 1;\r\n    const pageSize = queryParams.pageSize > 0 ? queryParams.pageSize : 10;\r\n\r\n    let params = options?.params ? options.params : this.getDefaultParams();\r\n    params = params.set('pageNumber', pageNumber.toString()).set('pageSize', pageSize.toString());\r\n\r\n    if (queryParams.filter) {\r\n      params = params.set('filter', queryParams.filter);\r\n    }\r\n\r\n    if (queryParams.sortBy) {\r\n      params = params.set('sortBy', queryParams.sortBy);\r\n    }\r\n\r\n    if (queryParams.sortDescending) {\r\n      params = params.set('sortDescending', queryParams.sortDescending.toString());\r\n    }\r\n\r\n    if (queryParams.includeInactive) {\r\n      params = params.set('includeInactive', queryParams.includeInactive.toString());\r\n    }\r\n\r\n    return this.request<T>('GET', endpoint, null, { params });\r\n  }\r\n\r\n  create<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('POST', endpoint, body, options);\r\n  }\r\n\r\n  update<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('PUT', `${endpoint}/${id}`, body, options);\r\n  }\r\n\r\n  patch<T, B>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    body: B,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, B>('PATCH', `${endpoint}/${id}`, body, options);\r\n  }\r\n\r\n  delete<T>(\r\n    endpoint: ApiEndpoints,\r\n    id: string,\r\n    options?: IQueryParams\r\n  ): Observable<IBaseResponse<T>> {\r\n    return this.request<T, { isDeleted: number }>(\r\n      'PATCH',\r\n      `${endpoint}/${id}`,\r\n      { isDeleted: 1 },\r\n      options\r\n    );\r\n  }\r\n}\r\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "ToastService",
            "id": "injectable-ToastService-d3d741cf5f53ff83a4c7ef3d2eff891fe71463bf9bda86e15dd9b597fa92c4be597b6317224ad356c9bfbd9655f5ea1efd2925e7721c3725869c8f388278bee0",
            "file": "src/app/shared/services/toast.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "clear",
                    "args": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "key",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "show",
                    "args": [
                        {
                            "name": "severity",
                            "type": "Severity",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "Keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "severity",
                            "type": "Severity",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "Keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showError",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "Keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "Keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showInfo",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "Keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 25,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "Keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showSuccess",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "Keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 21,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "Keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "showWarning",
                    "args": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "key",
                            "type": "Keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "summary",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "detail",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "key",
                            "type": "Keys",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "life",
                            "type": "number",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "optional": true,
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\r\nimport { MessageService } from 'primeng/api';\r\nimport type { Keys, Severity } from '../types/toast.types';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class ToastService {\r\n  constructor(private messageService: MessageService) {}\r\n\r\n  show(severity: Severity, summary: string, detail: string, key?: Keys, life?: number) {\r\n    this.messageService.add({\r\n      severity,\r\n      summary,\r\n      detail,\r\n      key,\r\n      life,\r\n    });\r\n  }\r\n\r\n  showSuccess(summary: string, detail: string, key?: Keys, life?: number) {\r\n    this.show('success', summary, detail, key, life);\r\n  }\r\n\r\n  showInfo(summary: string, detail: string, key?: Keys, life?: number) {\r\n    this.show('info', summary, detail, key, life);\r\n  }\r\n\r\n  showWarning(summary: string, detail: string, key?: Keys, life?: number) {\r\n    this.show('warn', summary, detail, key, life);\r\n  }\r\n\r\n  showError(summary: string, detail: string, key?: Keys, life?: number) {\r\n    this.show('error', summary, detail, key, life);\r\n  }\r\n\r\n  clear(key?: string) {\r\n    this.messageService.clear(key);\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 8,
                "jsdoctags": [
                    {
                        "name": "messageService",
                        "type": "MessageService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "TokenService",
            "id": "injectable-TokenService-ca6bb989c27c11aac9f6278daf00b939872ab1972f9a5e770c8d6a69d1597e06d463ecb031f3bc500798c4f34abc1467a6c1e7516ad844f0c9b3c2cb046b58c6",
            "file": "src/app/core/_services/token/token.service.ts",
            "properties": [
                {
                    "name": "requestFactory",
                    "defaultValue": "inject(RequestFactoryService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "decodeToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "IDecodedToken | null",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "getAccessToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getRefreshToken",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "getUserId",
                    "args": [],
                    "optional": false,
                    "returnType": "string | null",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "isAuth",
                    "args": [],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "loadTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 82,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "refreshToken",
                    "args": [
                        {
                            "name": "tokens",
                            "type": "ITokens",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<ITokens>",
                    "typeParameters": [],
                    "line": 18,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "tokens",
                            "type": "ITokens",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "removeTokens",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 62,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "saveTokens",
                    "args": [
                        {
                            "name": "accessToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 77,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "accessToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "refreshToken",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setAccessToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 44,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setRefreshToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "validateToken",
                    "args": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "boolean",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "token",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { inject, Injectable } from '@angular/core';\r\nimport { jwtDecode } from 'jwt-decode';\r\nimport { map, Observable } from 'rxjs';\r\nimport { ApiEndpoints } from '../../_models/api-endpoints.enum';\r\nimport { IBaseResponse } from '../../_models/base-response.model';\r\nimport { IDecodedToken } from '../../_models/decoded-token.model';\r\nimport { ITokens } from '../../_models/tokens.model';\r\nimport { RequestFactoryService } from '../httpRequestFactory/request-factory.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root',\r\n})\r\nexport class TokenService {\r\n  private requestFactory = inject(RequestFactoryService);\r\n\r\n  constructor() {}\r\n\r\n  refreshToken(tokens: ITokens): Observable<ITokens> {\r\n    return this.requestFactory\r\n      .post<ITokens, { refreshToken: string }>(ApiEndpoints.REFRESH_TOKEN, tokens)\r\n      .pipe(map((response: IBaseResponse<ITokens>) => response.data));\r\n  }\r\n\r\n  isAuth(): boolean {\r\n    const accessToken = this.getAccessToken();\r\n    const refreshToken = this.getRefreshToken();\r\n\r\n    if (!accessToken || !refreshToken) {\r\n      return false;\r\n    }\r\n\r\n    if (this.validateToken(accessToken) && this.validateToken(refreshToken)) {\r\n      return true;\r\n    }\r\n\r\n    if (!this.validateToken(accessToken) && this.validateToken(refreshToken)) {\r\n      return true;\r\n    }\r\n\r\n    this.removeTokens();\r\n    return false;\r\n  }\r\n\r\n  setAccessToken(token: string): void {\r\n    localStorage.setItem('accessToken', token);\r\n  }\r\n\r\n  setRefreshToken(token: string): void {\r\n    localStorage.setItem('refreshToken', token);\r\n  }\r\n\r\n  getAccessToken(): string | null {\r\n    const accessToken = localStorage.getItem('accessToken');\r\n    return accessToken;\r\n  }\r\n\r\n  getRefreshToken(): string | null {\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n    return refreshToken;\r\n  }\r\n\r\n  removeTokens(): void {\r\n    localStorage.removeItem('accessToken');\r\n    localStorage.removeItem('refreshToken');\r\n  }\r\n\r\n  getUserId(): string | null {\r\n    const accessToken = this.getAccessToken();\r\n    if (accessToken !== null) {\r\n      const decodedToken = this.decodeToken(accessToken);\r\n      return decodedToken ? decodedToken.sub : null;\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  saveTokens(accessToken: string, refreshToken: string): void {\r\n    localStorage.setItem('accessToken', accessToken);\r\n    localStorage.setItem('refreshToken', refreshToken);\r\n  }\r\n\r\n  loadTokens(): void {\r\n    const accessToken = localStorage.getItem('accessToken');\r\n    const refreshToken = localStorage.getItem('refreshToken');\r\n\r\n    if (accessToken === null || refreshToken === null) {\r\n      return;\r\n    }\r\n\r\n    if (this.validateToken(accessToken) && this.validateToken(refreshToken)) {\r\n      this.setAccessToken(accessToken);\r\n      this.setRefreshToken(refreshToken);\r\n    }\r\n  }\r\n\r\n  decodeToken(token: string): IDecodedToken | null {\r\n    if (token !== null) {\r\n      return jwtDecode<IDecodedToken>(token);\r\n    } else {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  validateToken(token: string): boolean {\r\n    const decodedToken = this.decodeToken(token);\r\n    try {\r\n      if (decodedToken !== null) {\r\n        return decodedToken.exp * 1000 > Date.now();\r\n      } else {\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      return false;\r\n    }\r\n  }\r\n}\r\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 14
            },
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-a719abc76bc179dd8f42de53ac11eab0ee4b9f36aa667e3d397f298c3a570aefa21ceaeacda7ea297617648d263bbde315e08d22ebf39d102797ca762af69b81",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "authMenuItems",
                    "defaultValue": "MenuConfig.authMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "footerTitle",
                    "defaultValue": "MenuConfig.footerTitle",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "langs",
                    "defaultValue": "MenuConfig.langs",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "nonAuthMenuItems",
                    "defaultValue": "MenuConfig.nonAuthMenuItems",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "title",
                    "defaultValue": "MenuConfig.title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RouterOutlet"
                },
                {
                    "name": "NavbarComponent",
                    "type": "component"
                },
                {
                    "name": "FooterComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { RouterOutlet } from '@angular/router';\r\nimport { FooterComponent } from './shared/components/footer/footer.component';\r\nimport { NavbarComponent } from './shared/components/navbar/navbar.component';\r\nimport { MenuConfig } from './config/menu.config';\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  standalone: true,\r\n  imports: [RouterOutlet, NavbarComponent, FooterComponent],\r\n  templateUrl: './app.component.html',\r\n  styleUrl: './app.component.scss',\r\n})\r\nexport class AppComponent {\r\n  title = MenuConfig.title;\r\n  langs = MenuConfig.langs;\r\n  authMenuItems = MenuConfig.authMenuItems;\r\n  nonAuthMenuItems = MenuConfig.nonAuthMenuItems;\r\n  footerTitle = MenuConfig.footerTitle;\r\n}\r\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-navbar [title]=\"title\" [showSwitchTheme]='true' [showSwtichLang]=\"true\" [langs]=\"langs\"\r\n  [authMenuItems]=\"authMenuItems\" [nonAuthMenuItems]=\"nonAuthMenuItems\"></app-navbar>\r\n<main class=\"main-container\">\r\n  <router-outlet></router-outlet>\r\n</main>\r\n<app-footer [title]=\"footerTitle\"></app-footer>\r\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-08d0f67011ce94fd5f2b65c4db53e47c775d95fc415b95d2707db104deec745822742d834416f1161b9e95efb24c38982f431b0c7737ba5ed0f76e7dff9f4f8a",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": "<button   type=\"button\"\n   (click)=\"onClick.emit($event)\"\n   [ngClass]=\"classes\"\n   [ngStyle]=\"{ 'background-color': backgroundColor }\"\n >\n   {{ label }}\n </button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 807,
                            "end": 821,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 808,
                                "end": 816,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'storybook-button',\r\n  standalone: true,\r\n  imports: [CommonModule],\r\n  template: ` <button\r\n    type=\"button\"\r\n    (click)=\"onClick.emit($event)\"\r\n    [ngClass]=\"classes\"\r\n    [ngStyle]=\"{ 'background-color': backgroundColor }\"\r\n  >\r\n    {{ label }}\r\n  </button>`,\r\n  styleUrls: ['./button.css'],\r\n})\r\nexport class ButtonComponent {\r\n  /** Is this the principal call to action on the page? */\r\n  @Input()\r\n  primary = false;\r\n\r\n  /** What background color to use */\r\n  @Input()\r\n  backgroundColor?: string;\r\n\r\n  /** How large should the button be? */\r\n  @Input()\r\n  size: 'small' | 'medium' | 'large' = 'medium';\r\n\r\n  /**\r\n   * Button contents\r\n   *\r\n   * @required\r\n   */\r\n  @Input()\r\n  label = 'Button';\r\n\r\n  /** Optional click handler */\r\n  @Output()\r\n  onClick = new EventEmitter<Event>();\r\n\r\n  public get classes(): string[] {\r\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\r\n\r\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\r\n  display: inline-block;\r\n  cursor: pointer;\r\n  border: 0;\r\n  border-radius: 3em;\r\n  font-weight: 700;\r\n  line-height: 1;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n.storybook-button--primary {\r\n  background-color: #555ab9;\r\n  color: white;\r\n}\r\n.storybook-button--secondary {\r\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\r\n  background-color: transparent;\r\n  color: #333;\r\n}\r\n.storybook-button--small {\r\n  padding: 10px 16px;\r\n  font-size: 12px;\r\n}\r\n.storybook-button--medium {\r\n  padding: 11px 20px;\r\n  font-size: 14px;\r\n}\r\n.storybook-button--large {\r\n  padding: 12px 24px;\r\n  font-size: 16px;\r\n}\r\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-30e6fb88bcaf0350fe88344c9aa86e89cf37b5915a025344ff5c89d40e285d249f7c5b418d6fe7bc266395323fdc21bd776322ef5794f430eb869df66940a6f1-1",
            "file": "src/app/shared/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "ariaLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "badge",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "badgeSeverity",
                    "defaultValue": "'info'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "ButtonBadgeSeverity",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "icon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconPos",
                    "defaultValue": "'left'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 23,
                    "type": "ButtonIconPosition",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "outlined",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "raised",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "rounded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "severity",
                    "defaultValue": "'primary'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "ButtonSeverity",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "ButtonSize",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "\"button\" | \"submit\" | \"reset\"",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "ButtonVariant",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<MouseEvent>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  ButtonIconPosition,\r\n  ButtonBadgeSeverity,\r\n  ButtonSeverity,\r\n  ButtonVariant,\r\n  ButtonSize,\r\n  ButtonProps,\r\n} from '../../types/button.types';\r\nimport { ButtonModule } from 'primeng/button';\r\n\r\n@Component({\r\n  selector: 'app-button',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonModule],\r\n  templateUrl: './button.component.html',\r\n  styleUrls: ['./button.component.scss'],\r\n})\r\nexport class ButtonComponent implements ButtonProps {\r\n  @Input() label?: string;\r\n  @Input() icon?: string;\r\n  @Input() iconPos: ButtonIconPosition = 'left';\r\n  @Input() badge?: string;\r\n  @Input() badgeSeverity: ButtonBadgeSeverity = 'info';\r\n  @Input() severity: ButtonSeverity = 'primary';\r\n  @Input() raised = false;\r\n  @Input() rounded = false;\r\n  @Input() loading = false;\r\n  @Input() disabled = false;\r\n  @Input() variant?: ButtonVariant;\r\n  @Input() outlined = false;\r\n  @Input() size?: ButtonSize;\r\n  @Input() styleClass?: string;\r\n  @Input() ariaLabel?: string;\r\n  @Input() type: 'button' | 'submit' | 'reset' = 'button';\r\n\r\n  @Output() onClick = new EventEmitter<MouseEvent>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "ButtonProps"
            ],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<p-button [label]=\"label\" [icon]=\"icon\" [iconPos]=\"iconPos\" [loading]=\"loading\" [severity]=\"severity\"\r\n  [badgeSeverity]=\"badgeSeverity\" [raised]=\"raised\" [rounded]=\"rounded\" [variant]=\"variant\" [outlined]=\"outlined\"\r\n  [badge]=\"badge\" [disabled]=\"disabled\" [size]=\"size\" [styleClass]=\"styleClass\" [ariaLabel]=\"ariaLabel\"\r\n  (onClick)=\"onClick.emit($event)\" [type]=\"type\" />\r\n"
        },
        {
            "name": "CheckboxComponent",
            "id": "component-CheckboxComponent-94e18eb726a8917aa94a8fea3076ed72495fd314aaa9c51efc106782c075217b37bc651a189e176b75ab6e8856d820adc1d1f0052ee4d81e6ccaadd5745bf942",
            "file": "src/app/shared/components/checkbox/checkbox.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => CheckboxComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-checkbox",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./checkbox.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControlName",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "checked",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                }
            ],
            "methodsClass": [
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 54,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 58,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "CheckboxModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, forwardRef, Input } from '@angular/core';\nimport {\n  ControlValueAccessor,\n  FormsModule,\n  NG_VALUE_ACCESSOR,\n  ReactiveFormsModule,\n} from '@angular/forms';\nimport { CheckboxModule } from 'primeng/checkbox';\nimport { CheckboxProps } from '../../types/checkbox.types';\n\n@Component({\n  selector: 'app-checkbox',\n  standalone: true,\n  imports: [CommonModule, CheckboxModule, FormsModule, ReactiveFormsModule],\n  templateUrl: './checkbox.component.html',\n  styleUrl: './checkbox.component.scss',\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => CheckboxComponent),\n      multi: true,\n    },\n  ],\n})\nexport class CheckboxComponent implements CheckboxProps, ControlValueAccessor {\n  @Input() inputId?: string;\n  @Input() name?: string;\n  @Input() disabled = false;\n  @Input() required = false;\n  @Input() label?: string;\n  @Input() formControlName?: string;\n  @Input() value?: boolean;\n  @Input() errorMessage?: string;\n  @Input() invalid?: boolean;\n\n  onChange: (value: boolean) => void = () => {};\n\n  checked = false;\n  touched = false;\n\n  onTouched = () => {\n    this.touched = true;\n  };\n\n  writeValue(value: boolean): void {\n    this.checked = value;\n  }\n\n  registerOnChange(fn: (value: boolean) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n}\n",
            "styleUrl": "./checkbox.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "CheckboxProps",
                "ControlValueAccessor"
            ],
            "templateData": "<div class=\"field\">\r\n  <p-checkbox\r\n    [inputId]=\"inputId\"\r\n    [name]=\"name\"\r\n    [value]=\"value\"\r\n    [(ngModel)]=\"checked\"\r\n    [disabled]=\"disabled\"\r\n    [required]=\"required\"\r\n    [formControlName]=\"\r\n      formControlName !== undefined && formControlName !== '' ? formControlName : null\r\n    \"\r\n    >></p-checkbox\r\n  >\r\n  @if (label) {\r\n    <label [class.required]=\"required\" [for]=\"inputId\" class=\"ml-2\"> {{ label }} </label>\r\n    @if (required) {\r\n      <span class=\"required-marker\">*</span>\r\n    }\r\n  }\r\n  @if (invalid && errorMessage && touched) {\r\n    <small class=\"p-error\">{{ errorMessage }}</small>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "ConfirmModalComponent",
            "id": "component-ConfirmModalComponent-928d1c95b72a625fab955e613fa1e55fb7f2d4953d193f0e6785db84834f5ab6789c6f3d25f8138b49c88e26101e755197672e01ddd6106758ef5d01e82cb42b",
            "file": "src/app/shared/components/confirm-modal/confirm-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-confirm-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./confirm-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "defaultValue": "'Confirm'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "'Are you sure?'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "noLabel",
                    "defaultValue": "'No'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "yesLabel",
                    "defaultValue": "'Yes'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "no",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                },
                {
                    "name": "yes",
                    "defaultValue": "new EventEmitter<void>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "onNo",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 29,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onYes",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\nimport { DialogModule } from 'primeng/dialog';\nimport { ConfirmModalProps } from '../../types/modal.types';\nimport { ButtonModule } from 'primeng/button';\nimport { ButtonComponent } from '../button/button.component';\n\n@Component({\n  selector: 'app-confirm-modal',\n  standalone: true,\n  imports: [DialogModule, CommonModule, ButtonModule, ButtonComponent],\n  templateUrl: './confirm-modal.component.html',\n  styleUrl: './confirm-modal.component.scss',\n})\nexport class ConfirmModalComponent implements ConfirmModalProps {\n  @Input() header = 'Confirm';\n  @Input() visible = false;\n  @Input() message = 'Are you sure?';\n  @Input() yesLabel = 'Yes';\n  @Input() noLabel = 'No';\n  @Output() yes = new EventEmitter<void>();\n  @Output() no = new EventEmitter<void>();\n\n  onYes() {\n    this.yes.emit();\n    this.visible = false;\n  }\n\n  onNo() {\n    this.no.emit();\n    this.visible = false;\n  }\n}\n",
            "styleUrl": "./confirm-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ConfirmModalProps"
            ],
            "templateData": "<p-dialog [header]=\"header\" [modal]=\"true\" [(visible)]=\"visible\" [style]=\"{ width: '20rem' }\">\n  <span class=\"p-text-secondary block mb-4\">{{ message }}</span>\n  <div class=\"flex justify-end gap-2\">\n    <app-button label=\"{{ noLabel }}\" type=\"secondary\" (click)=\"onNo()\"></app-button>\n    <app-button label=\"{{ yesLabel }}\" type=\"warn\" (click)=\"onYes()\"></app-button>\n  </div>\n</p-dialog>\n"
        },
        {
            "name": "DashboardComponent",
            "id": "component-DashboardComponent-8297f01e690fcce231cd2f22f4312d966401aa19e1141245592319f359fe7452013d73660321941eff1483aa8e0c6cc3b7e465a4102c8820bee29bbf74471747",
            "file": "src/app/features/dashboard/dashboard/dashboard.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-dashboard",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./dashboard.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "accept",
                    "defaultValue": "'image/*'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Drag and drop files to here to upload.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "maxFileSize",
                    "defaultValue": "1000000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "mode",
                    "defaultValue": "'advanced'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "name",
                    "defaultValue": "'demo[]'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "url",
                    "defaultValue": "'https://www.primefaces.org/primeng'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [
                {
                    "name": "handleUploadedFiles",
                    "args": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "files",
                            "type": "File[]",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FileUploaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { FileUploaderComponent } from '../../../shared/components/file-uploader/file-uploader.component';\r\n\r\n@Component({\r\n  selector: 'app-dashboard',\r\n  standalone: true,\r\n  imports: [FileUploaderComponent],\r\n  templateUrl: './dashboard.component.html',\r\n  styleUrl: './dashboard.component.scss',\r\n})\r\nexport class DashboardComponent {\r\n  url = 'https://www.primefaces.org/primeng';\r\n  multiple = true;\r\n  accept = 'image/*';\r\n  maxFileSize = 1000000;\r\n  mode = 'advanced';\r\n  emptyMessage = 'Drag and drop files to here to upload.';\r\n  name = 'demo[]';\r\n\r\n  handleUploadedFiles(files: File[]) {\r\n    console.log('Uploaded files:', files);\r\n    // Zrób coś z przesłanymi plikami\r\n  }\r\n}\r\n",
            "styleUrl": "./dashboard.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>dashboard works!</p>\r\n<app-file-uploader  (onFileUpload)=\"handleUploadedFiles($event)\"></app-file-uploader>\r\n"
        },
        {
            "name": "EditorComponent",
            "id": "component-EditorComponent-7da6ff0aa94fc7e73d43a0eb448985d650b66ac98b2d4f6a476720e876d843b42eb34c428c5238857c9009f6f846c2348b03218ca6f266acf5818f2846f49c60",
            "file": "src/app/shared/components/editor/editor.component.ts",
            "encapsulation": [
                "ViewEncapsulation.None"
            ],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => EditorComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-editor",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./editor.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formats",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "defaultValue": "new FormControl()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "modules",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "Record<string | >",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "readOnly",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "style",
                    "defaultValue": "{ height: '320px' }",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "Record<string | string>",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "onTouch",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "value",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "methodsClass": [
                {
                    "name": "onTextChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "ITextChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "ITextChangeEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "string",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 52,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 43,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "Editor"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef, ViewEncapsulation } from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { Editor } from 'primeng/editor';\r\nimport { IEditorProps, ITextChangeEvent } from '../../types/editor.types';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-editor',\r\n  templateUrl: './editor.component.html',\r\n  standalone: true,\r\n  imports: [ReactiveFormsModule, Editor, CommonModule],\r\n  encapsulation: ViewEncapsulation.None,\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => EditorComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class EditorComponent implements ControlValueAccessor, IEditorProps {\r\n  @Input() formControl: FormControl = new FormControl();\r\n  @Input() style?: Record<string, string> = { height: '320px' };\r\n  @Input() styleClass?: string;\r\n  @Input() placeholder?: string;\r\n  @Input() formats?: string[];\r\n  @Input() modules?: Record<string, unknown>;\r\n  @Input() readOnly = false;\r\n  @Input() disabled = false;\r\n\r\n  value = '';\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onChange: (value: string) => void = () => {};\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onTouch: () => void = () => {};\r\n\r\n  // Implementacja ControlValueAccessor\r\n  writeValue(value: string): void {\r\n    this.value = value;\r\n    this.formControl.setValue(value, { emitEvent: false });\r\n  }\r\n\r\n  registerOnChange(fn: (value: string) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouch = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n    if (isDisabled) {\r\n      this.formControl.disable();\r\n    } else {\r\n      this.formControl.enable();\r\n    }\r\n  }\r\n\r\n  onTextChange(event: ITextChangeEvent): void {\r\n    this.value = event.htmlValue || '';\r\n    this.onChange(this.value);\r\n    this.onTouch();\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "IEditorProps"
            ],
            "templateData": "<div class=\"card\">\r\n  <p-editor [formControl]=\"formControl\" [style]=\"style\" [styleClass]=\"styleClass\" [placeholder]=\"placeholder\"\r\n    [formats]=\"formats\" [modules]=\"modules\" [readonly]=\"readOnly\" [disabled]=\"disabled\"\r\n    (onTextChange)=\"onTextChange($event)\">\r\n  </p-editor>\r\n</div>\r\n"
        },
        {
            "name": "FileUploaderComponent",
            "id": "component-FileUploaderComponent-a5506cc3764bad5796ddc39e07d3fdd134a8032fdfe2843104744a2bf13215c99a50e24ed9efbdf69bb4360e68498b6f5afa78a2d29edcda65a39862ef9db133",
            "file": "src/app/shared/components/file-uploader/file-uploader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-file-uploader",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./file-uploader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "accept",
                    "defaultValue": "'image/*'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "auto",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "emptyMessage",
                    "defaultValue": "'Drag and drop files to here to upload.'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "maxFileSize",
                    "defaultValue": "1000000",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "number",
                    "decorators": []
                },
                {
                    "name": "mode",
                    "defaultValue": "'advanced'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "IFileUploadMode",
                    "decorators": []
                },
                {
                    "name": "multiple",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "name",
                    "defaultValue": "'demo[]'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "showCancelButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showUploadButton",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "url",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onFileUpload",
                    "defaultValue": "new EventEmitter<File[]>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "uploadedFiles",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "File[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                }
            ],
            "methodsClass": [
                {
                    "name": "clearUploadedFiles",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onUpload",
                    "args": [
                        {
                            "name": "event",
                            "type": "IUploadEvent",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 27,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "IUploadEvent",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FileUpload"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, Input, Output } from '@angular/core';\r\nimport { FileUpload } from 'primeng/fileupload';\r\nimport { IFileUploadMode, IFileUploadProps, IUploadEvent } from '../../types/fileUploader.types';\r\n\r\n@Component({\r\n  selector: 'app-file-uploader',\r\n  templateUrl: './file-uploader.component.html',\r\n  standalone: true,\r\n  imports: [FileUpload, CommonModule],\r\n})\r\nexport class FileUploaderComponent implements IFileUploadProps {\r\n  @Input() url = '';\r\n  @Input() multiple = true;\r\n  @Input() accept = 'image/*';\r\n  @Input() maxFileSize = 1000000;\r\n  @Input() mode: IFileUploadMode = 'advanced';\r\n  @Input() emptyMessage = 'Drag and drop files to here to upload.';\r\n  @Input() name = 'demo[]';\r\n  @Input() auto = false;\r\n  @Input() showCancelButton = true;\r\n  @Input() showUploadButton = true;\r\n\r\n  @Output() onFileUpload = new EventEmitter<File[]>();\r\n  uploadedFiles: File[] = [];\r\n\r\n  onUpload(event: IUploadEvent) {\r\n    for (const file of event.files) {\r\n      this.uploadedFiles.push(file);\r\n    }\r\n    this.onFileUpload.emit(event.files);\r\n  }\r\n\r\n  clearUploadedFiles() {\r\n    this.uploadedFiles = [];\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "IFileUploadProps"
            ],
            "templateData": "<div class=\"card\">\r\n  <p-fileupload [name]=\"name\" [url]=\"url\" (onUpload)=\"onUpload($event)\" [multiple]=\"multiple\" [accept]=\"accept\"\r\n    [maxFileSize]=\"maxFileSize\" [mode]=\"mode\" [auto]=\"auto\" [showCancelButton]=\"showCancelButton\"\r\n    [showUploadButton]=\"showUploadButton\">\r\n    <ng-template #empty>\r\n      <div>{{emptyMessage}}</div>\r\n    </ng-template>\r\n    <ng-template #content>\r\n      <ul *ngIf=\"uploadedFiles.length\">\r\n        <li *ngFor=\"let file of uploadedFiles\">{{ file.name }} - {{ file.size }} bytes</li>\r\n      </ul>\r\n    </ng-template>\r\n  </p-fileupload>\r\n</div>\r\n"
        },
        {
            "name": "FooterComponent",
            "id": "component-FooterComponent-5dc3688775f0f5a3e34d5a0c4b3c617a72572b1fd756f310a55b384f675b9f603f0fc79f7bad046c15457a427780e6ef8d4b37982d511780e5e7dd72aab580d8",
            "file": "src/app/shared/components/footer/footer.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-footer",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./footer.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "customClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "links",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "socialLinks",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { FooterProps } from '../../types/footer.types';\nimport { MenuItem } from '../../types/navbar.types';\nimport { RouterModule } from '@angular/router';\n\n@Component({\n  selector: 'app-footer',\n  standalone: true,\n  imports: [CommonModule, RouterModule],\n  templateUrl: './footer.component.html',\n  styleUrl: './footer.component.scss',\n})\nexport class FooterComponent implements FooterProps {\n  @Input() logo?: string;\n  @Input() title?: string;\n  @Input() links: MenuItem[] = [];\n  @Input() socialLinks: MenuItem[] = [];\n  @Input() customClass?: string;\n\n  get currentYear(): number {\n    return new Date().getFullYear();\n  }\n}\n",
            "styleUrl": "./footer.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "FooterProps"
            ],
            "accessors": {
                "currentYear": {
                    "name": "currentYear",
                    "getSignature": {
                        "name": "currentYear",
                        "type": "number",
                        "returnType": "number",
                        "line": 21
                    }
                }
            },
            "templateData": "<footer [class]=\"['footer', customClass]\">\r\n  <div class=\"container\">\r\n    <div class=\"branding\">\r\n      @if (logo) {\r\n        <img [src]=\"logo\" alt=\"Logo\" class=\"logo-img\" />\r\n      }\r\n      @if (title) {\r\n        <span class=\"title\">{{ title }}</span>\r\n      }\r\n    </div>\r\n\r\n    @if (links && links.length) {\r\n      <div class=\"links\">\r\n        @for (link of links; track link) {\r\n          @if (link.routerLink) {\r\n            <a [routerLink]=\"link.routerLink\" [queryParams]=\"link.queryParams\">\r\n              @if (link.icon) {\r\n                <i class=\"{{ link.icon }}\"></i>\r\n              }\r\n              {{ link.label }}\r\n            </a>\r\n          }\r\n          @if (link.url) {\r\n            <a [href]=\"link.url\" [target]=\"link.target\">\r\n              @if (link.icon) {\r\n                <i class=\"{{ link.icon }}\"></i>\r\n              }\r\n              {{ link.label }}\r\n            </a>\r\n          }\r\n        }\r\n      </div>\r\n    }\r\n\r\n    @if (socialLinks && socialLinks.length) {\r\n      <div class=\"social-links\">\r\n        @for (social of socialLinks; track social) {\r\n          @if (social.url) {\r\n            <a [href]=\"social.url\" [target]=\"social.target\">\r\n              @if (social.icon) {\r\n                <i class=\"{{ social.icon }}\"></i>\r\n              }\r\n              {{ social.label }}\r\n            </a>\r\n          }\r\n        }\r\n      </div>\r\n    }\r\n\r\n    <div class=\"copyright\">\r\n      &copy; {{ currentYear }} {{ title || 'Twoja Firma' }}. Wszelkie prawa zastrzeżone.\r\n    </div>\r\n  </div>\r\n</footer>\r\n"
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-07f894be6f38e12f30e1e7e5d9e999c27c78ce2f0be03c15c8c5f39207229e147892a2fd1fdb54e935c4f04f03c2162e39a22c28cdc64e027ea15824ddf0f3c9",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>    <div class=\"storybook-header\">\n      <div>\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n              fill=\"#FFF\"\n            />\n            <path\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n              fill=\"#555AB9\"\n            />\n            <path\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\n              fill=\"#91BAF8\"\n            />\n          </g>\n        </svg>\n        <h1>Acme</h1>\n      </div>\n      <div>\n        <div *ngIf=\"user\">\n          <span class=\"welcome\">\n            Welcome, <b>{{ user.name }}</b\n            >!\n          </span>\n          <storybook-button\n            *ngIf=\"user\"\n            size=\"small\"\n            (onClick)=\"onLogout.emit($event)\"\n            label=\"Log out\"\n          ></storybook-button>\n        </div>\n        <div *ngIf=\"!user\">\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            class=\"margin-left\"\n            (onClick)=\"onLogin.emit($event)\"\n            label=\"Log in\"\n          ></storybook-button>\n          <storybook-button\n            *ngIf=\"!user\"\n            size=\"small\"\n            [primary]=\"true\"\n            class=\"margin-left\"\n            (onClick)=\"onCreateAccount.emit($event)\"\n            label=\"Sign up\"\n          ></storybook-button>\n        </div>\n      </div>\n    </div>\n  </header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 78,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { ButtonComponent } from './button.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-header',\r\n  standalone: true,\r\n  imports: [CommonModule, ButtonComponent],\r\n  template: `<header>\r\n    <div class=\"storybook-header\">\r\n      <div>\r\n        <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\r\n              fill=\"#FFF\"\r\n            />\r\n            <path\r\n              d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\r\n              fill=\"#555AB9\"\r\n            />\r\n            <path\r\n              d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\"\r\n              fill=\"#91BAF8\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        <h1>Acme</h1>\r\n      </div>\r\n      <div>\r\n        <div *ngIf=\"user\">\r\n          <span class=\"welcome\">\r\n            Welcome, <b>{{ user.name }}</b\r\n            >!\r\n          </span>\r\n          <storybook-button\r\n            *ngIf=\"user\"\r\n            size=\"small\"\r\n            (onClick)=\"onLogout.emit($event)\"\r\n            label=\"Log out\"\r\n          ></storybook-button>\r\n        </div>\r\n        <div *ngIf=\"!user\">\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onLogin.emit($event)\"\r\n            label=\"Log in\"\r\n          ></storybook-button>\r\n          <storybook-button\r\n            *ngIf=\"!user\"\r\n            size=\"small\"\r\n            [primary]=\"true\"\r\n            class=\"margin-left\"\r\n            (onClick)=\"onCreateAccount.emit($event)\"\r\n            label=\"Sign up\"\r\n          ></storybook-button>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  </header>`,\r\n  styleUrls: ['./header.css'],\r\n})\r\nexport class HeaderComponent {\r\n  @Input()\r\n  user: User | null = null;\r\n\r\n  @Output()\r\n  onLogin = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onLogout = new EventEmitter<Event>();\r\n\r\n  @Output()\r\n  onCreateAccount = new EventEmitter<Event>();\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\r\n  padding: 15px 20px;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.storybook-header svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n}\r\n\r\n.storybook-header h1 {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin: 6px 0 6px 10px;\r\n  font-weight: 700;\r\n  font-size: 20px;\r\n  line-height: 1;\r\n}\r\n\r\n.storybook-header button + button {\r\n  margin-left: 10px;\r\n}\r\n\r\n.storybook-header .welcome {\r\n  margin-right: 10px;\r\n  color: #333;\r\n  font-size: 14px;\r\n}\r\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "InfoModalComponent",
            "id": "component-InfoModalComponent-447c397c8db144621db6d6e2746f180c0f5cadfb738fb6f96b37a099f9f17ca691a24c763504cbd7573568d6a7add9409b47a92cf63dfefbd17be0063628ec19",
            "file": "src/app/shared/components/info-modal/info-modal.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info-modal",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./info-modal.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "header",
                    "defaultValue": "'Information'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "message",
                    "defaultValue": "'Default information message'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "visible",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "DialogModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input } from '@angular/core';\nimport { DialogModule } from 'primeng/dialog';\nimport { InfoModalProps } from '../../types/modal.types';\nimport { ButtonModule } from 'primeng/button';\nimport { ButtonComponent } from '../button/button.component';\n\n@Component({\n  selector: 'app-info-modal',\n  standalone: true,\n  imports: [DialogModule, CommonModule, ButtonModule, ButtonComponent],\n  templateUrl: './info-modal.component.html',\n  styleUrl: './info-modal.component.scss',\n})\nexport class InfoModalComponent implements InfoModalProps {\n  @Input() header = 'Information';\n  @Input() visible = false;\n  @Input() message = 'Default information message';\n}\n",
            "styleUrl": "./info-modal.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "InfoModalProps"
            ],
            "templateData": "<p-dialog header=\"Information\" [modal]=\"true\" [(visible)]=\"visible\" [style]=\"{ width: '20rem' }\">\n  <span class=\"p-text-secondary block mb-4\">{{ message }}</span>\n  <div class=\"flex justify-end\">\n    <app-button label=\"OK\" (click)=\"visible = false\"></app-button>\n  </div>\n</p-dialog>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-e341bd7e53ffa4d1d2639951f048c309d87b28f5dbff2dc06c157b867b73ba166dc369968e62c9f604246cf9e547a627af06fad4db79144822eb92346b2e056b",
            "file": "src/app/shared/components/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => InputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "autocomplete",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 51,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "prefixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "InputIcons",
                    "decorators": []
                },
                {
                    "name": "prefixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "suffixIcon",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "InputIcons",
                    "decorators": []
                },
                {
                    "name": "suffixText",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "type",
                    "defaultValue": "'text'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "InputTypes",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "`input-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 53
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 58,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 54
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 55
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 67,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 63,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "InputTextModule",
                    "type": "module"
                },
                {
                    "name": "InputNumberModule",
                    "type": "module"
                },
                {
                    "name": "InputGroupModule",
                    "type": "module"
                },
                {
                    "name": "InputGroupAddonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, forwardRef } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport {\r\n  FormControl,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n  type ControlValueAccessor,\r\n} from '@angular/forms';\r\nimport { InputTextModule } from 'primeng/inputtext';\r\nimport { InputNumberModule } from 'primeng/inputnumber';\r\nimport { InputGroupModule } from 'primeng/inputgroup';\r\nimport { InputGroupAddonModule } from 'primeng/inputgroupaddon';\r\nimport { InputProps, InputTypes, InputIcons } from '../../types/input.types';\r\n\r\n@Component({\r\n  selector: 'app-input',\r\n  standalone: true,\r\n  imports: [\r\n    CommonModule,\r\n    FormsModule,\r\n    InputTextModule,\r\n    InputNumberModule,\r\n    InputGroupModule,\r\n    InputGroupAddonModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  templateUrl: './input.component.html',\r\n  styleUrls: ['./input.component.scss'],\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => InputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class InputComponent<T> implements ControlValueAccessor, InputProps {\r\n  @Input() label?: string;\r\n  @Input() placeholder?: string = '';\r\n  @Input() type: InputTypes = 'text';\r\n  @Input() disabled = false;\r\n  @Input() required = false;\r\n  @Input() errorMessage?: string;\r\n  @Input() invalid?: boolean;\r\n  @Input() prefixIcon?: InputIcons;\r\n  @Input() prefixText?: string;\r\n  @Input() suffixIcon?: InputIcons;\r\n  @Input() suffixText?: string;\r\n  @Input() formControl!: FormControl;\r\n  @Input() autocomplete?: string;\r\n\r\n  id = `input-${Math.random().toString(36).substr(2, 9)}`;\r\n  touched = false;\r\n  value: T | null = null;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\r\n  private onChange = (_value: T) => {};\r\n  onTouched = () => {\r\n    this.touched = true;\r\n  };\r\n\r\n  writeValue(value: T): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: (value: T) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  onInput(value: T): void {\r\n    this.value = value;\r\n    this.onChange(value);\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "@import '../../../../styles/utils/extends';\r\n.field {\r\n  @extend %field-layout;\r\n}\r\n\r\nlabel {\r\n  @extend %label-style;\r\n}\r\n",
                    "styleUrl": "./input.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "InputProps"
            ],
            "templateData": "<div class=\"field\">\r\n  @if (label) {\r\n  <label [for]=\"id\" [class.required]=\"required\">{{ label }}</label>\r\n  }\r\n\r\n  <p-inputgroup>\r\n    @if (prefixIcon || prefixText) {\r\n    <p-inputgroup-addon>\r\n      @if (prefixIcon) {\r\n      <i class=\"pi pi-{{ prefixIcon }}\"></i>\r\n      }\r\n      @if (prefixText) {\r\n      {{ prefixText }}\r\n      }\r\n    </p-inputgroup-addon>\r\n    }\r\n    @if (type === 'number') {\r\n    <p-inputnumber [id]=\"id\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [required]=\"required\" [(ngModel)]=\"value\"\r\n      (ngModelChange)=\"onInput($event)\" (onBlur)=\"onTouched()\" [useGrouping]=\"false\" [formControl]=\"formControl\"\r\n      [class.ng-invalid]=\"invalid && errorMessage\" />\r\n    } @else {\r\n    <input [id]=\"id\" pInputText [type]=\"type\" [placeholder]=\"placeholder\" [disabled]=\"disabled\" [required]=\"required\"\r\n      [ngModel]=\"value\" (ngModelChange)=\"onInput($event)\" (blur)=\"onTouched()\" [formControl]=\"formControl\"\r\n      [class.ng-invalid]=\"invalid && errorMessage\" />\r\n    }\r\n    @if (suffixIcon || suffixText) {\r\n    <p-inputgroup-addon>\r\n      @if (suffixIcon) {\r\n      <i class=\"pi pi-{{ suffixIcon }}\"></i>\r\n      }\r\n      @if (suffixText) {\r\n      {{ suffixText }}\r\n      }\r\n    </p-inputgroup-addon>\r\n    }\r\n  </p-inputgroup>\r\n\r\n  @if (invalid && errorMessage) {\r\n  <small class=\"p-error\">{{ errorMessage }}</small>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "LoginComponent",
            "id": "component-LoginComponent-a700455d791eff33020143c08825c2bcb8ade236f03f5b1ecb4b5699a20fb56db96c9b3c954a1f397309e17edec803cb16fce2be74e273c4ebcee4dc8d8344f0",
            "file": "src/app/features/auth/login/login.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<LoginForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "RouterEnum",
                    "defaultValue": "RouterEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 45,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 49,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PasswordInputComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { FormControl, FormGroup, ReactiveFormsModule } from '@angular/forms';\r\nimport { LoginForm } from '../../../shared/models/form.model';\r\nimport { FormService } from '../../../shared/services/form.service';\r\nimport { InputComponent } from '../../../shared/components/input/input.component';\r\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { PasswordInputComponent } from '../../../shared/components/password-input/password-input.component';\r\nimport { RouterModule } from '@angular/router';\r\nimport { AuthService } from '../../../core/_services/auth/auth.service';\r\nimport { RouterEnum } from '../../../config/router.enum';\r\nimport { ILoginDto } from '../../../core/_models/DTOs/authDto.model';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  standalone: true,\r\n  imports: [\r\n    ButtonComponent,\r\n    InputComponent,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    PasswordInputComponent,\r\n    RouterModule,\r\n  ],\r\n  templateUrl: './login.component.html',\r\n  styleUrl: './login.component.scss',\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm!: FormGroup<LoginForm>;\r\n  RouterEnum = RouterEnum;\r\n\r\n  constructor(\r\n    private formService: FormService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.loginForm = this.formService.initLoginForm();\r\n  }\r\n\r\n  get controls() {\r\n    return this.loginForm.controls;\r\n  }\r\n\r\n  getErrorMessage(control: FormControl) {\r\n    return this.formService.getErrorMessage(control);\r\n  }\r\n\r\n  onLogin() {\r\n    this.authService.signIn(this.loginForm.getRawValue() as ILoginDto).subscribe({\r\n      next: res => {\r\n        console.log('Login successful');\r\n        console.log(res);\r\n      },\r\n      error: error => {\r\n        console.error('Login failed');\r\n        console.error(error);\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./login.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 30,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 41
                    }
                }
            },
            "templateData": "<div class=\"login-page\">\r\n  <h1>Zaloguj się</h1>\r\n  <form [formGroup]=\"loginForm\" (ngSubmit)=\"onLogin()\">\r\n    <app-input [formControl]=\"controls.email\" formControlName=\"email\" placeholder=\"Email\" type=\"email\"\r\n      autocomplete=\"email\" [errorMessage]=\"getErrorMessage(controls.email)\"\r\n      [invalid]=\"controls.email.invalid &&  controls.email.touched\">\r\n    </app-input>\r\n\r\n    <app-password-input [formControl]=\"controls.password\" formControlName=\"password\" placeholder=\"Hasło\"\r\n      autocomplete=\"current-password\" [errorMessage]=\"getErrorMessage(controls.password)\"\r\n      [invalid]=\"controls.password.invalid &&  controls.password.touched\">\r\n    </app-password-input>\r\n    <div class=\"submit-button\">\r\n      <app-button type=\"submit\" [disabled]=\"loginForm.invalid\" severity=\"primary\" [label]=\"'Zaloguj się'\">\r\n      </app-button>\r\n    </div>\r\n    <p class=\"text-center\">Zapomniałeś hasła? <a routerLink=\"/{{RouterEnum.forgetPassword}}\">Odzyskaj hasło</a></p>\r\n    <p class=\"text-center\">Nie masz konta? <a routerLink=\"/{{RouterEnum.register}}\">Zarejestruj się</a></p>\r\n  </form>\r\n\r\n</div>\r\n"
        },
        {
            "name": "NavbarComponent",
            "id": "component-NavbarComponent-964ca514f5ff5010add124cbbc0afff4f02607061175d486c4c9ed495f8331240a37d086a4b931394e46f11b64c0739b1bf5339ebcfb30d8591ecb6bb428ca69",
            "file": "src/app/shared/components/navbar/navbar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-navbar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./navbar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "authMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "commonMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "isAuthenticated",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "langs",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "Langs",
                    "decorators": []
                },
                {
                    "name": "logo",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "menuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "nonAuthMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "MenuItem[]",
                    "decorators": []
                },
                {
                    "name": "showSwitchTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showSwtichLang",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'My Application'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 27,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userAvatar",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "userName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "combinedMenuItems",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MenuItem[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 40
                },
                {
                    "name": "currentLang",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "isDarkTheme",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                },
                {
                    "name": "mobileMenuOpen",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "themeForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<ThemeForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "checkCurrentTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 125,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "logout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 110,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 98,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnChanges",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 74,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 55,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "switchLanguage",
                    "args": [
                        {
                            "name": "_langValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 141,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "_langValue",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleDropdown",
                    "args": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 94,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "item",
                            "type": "MenuItem",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleMobileMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 90,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "toggleTheme",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 116,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "updateMenu",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 78,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MenubarModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "ToggleSwitchComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, Input, type OnInit } from '@angular/core';\r\nimport { FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { MenubarModule } from 'primeng/menubar';\r\nimport type { Langs, MenuItem, NavbarProps } from '../../types/navbar.types';\r\nimport { ButtonComponent } from '../button/button.component';\r\nimport { ToggleSwitchComponent } from '../toggle-switch/toggle-switch.component';\r\nimport { ThemeForm } from '../../models/form.model';\r\nimport { FormService } from '../../services/form.service';\r\n\r\n@Component({\r\n  selector: 'app-navbar',\r\n  standalone: true,\r\n  imports: [\r\n    MenubarModule,\r\n    CommonModule,\r\n    ButtonComponent,\r\n    ToggleSwitchComponent,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n  ],\r\n  templateUrl: './navbar.component.html',\r\n  styleUrl: './navbar.component.scss',\r\n})\r\nexport class NavbarComponent implements OnInit, NavbarProps {\r\n  @Input() title = 'My Application';\r\n  @Input() logo?: string;\r\n  @Input() menuItems: MenuItem[] = [];\r\n  @Input() authMenuItems: MenuItem[] = [];\r\n  @Input() nonAuthMenuItems: MenuItem[] = [];\r\n  @Input() isAuthenticated = false;\r\n  @Input() userName = '';\r\n  @Input() userAvatar = '';\r\n  @Input() showSwitchTheme = false;\r\n  @Input() showSwtichLang = false;\r\n  @Input() commonMenuItems: MenuItem[] = [];\r\n  @Input() langs: Langs = [];\r\n\r\n  combinedMenuItems: MenuItem[] = [];\r\n  mobileMenuOpen = false;\r\n  isDarkTheme = false;\r\n  currentLang = '';\r\n  themeForm!: FormGroup<ThemeForm>;\r\n\r\n  constructor(\r\n    private router: Router,\r\n    private formService: FormService\r\n  ) {}\r\n\r\n  get controls() {\r\n    return this.themeForm.controls;\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.updateMenu();\r\n    if (this.langs.length > 0) {\r\n      this.currentLang = this.langs[0].value;\r\n    }\r\n    this.checkCurrentTheme();\r\n\r\n    this.themeForm = this.formService.initThemeForm();\r\n\r\n    this.controls.theme.setValue(this.isDarkTheme);\r\n\r\n    this.controls.theme.valueChanges.subscribe(isDark => {\r\n      if (isDark !== this.isDarkTheme) {\r\n        this.isDarkTheme = isDark;\r\n        this.toggleTheme();\r\n      }\r\n    });\r\n  }\r\n\r\n  ngOnChanges() {\r\n    this.updateMenu();\r\n  }\r\n\r\n  updateMenu() {\r\n    this.combinedMenuItems = [...this.menuItems];\r\n\r\n    if (this.isAuthenticated) {\r\n      this.combinedMenuItems = [...this.combinedMenuItems, ...this.authMenuItems];\r\n    } else {\r\n      this.combinedMenuItems = [...this.combinedMenuItems, ...this.nonAuthMenuItems];\r\n    }\r\n\r\n    this.combinedMenuItems = this.combinedMenuItems.filter(item => item.visible !== false);\r\n  }\r\n\r\n  toggleMobileMenu() {\r\n    this.mobileMenuOpen = !this.mobileMenuOpen;\r\n  }\r\n\r\n  toggleDropdown(item: MenuItem) {\r\n    item.expanded = !item.expanded;\r\n  }\r\n\r\n  navigateTo(item: MenuItem) {\r\n    if (item.routerLink) {\r\n      this.router.navigate([item.routerLink]);\r\n    } else if (item.url) {\r\n      window.open(item.url, item.target || '_self');\r\n    } else if (item.command) {\r\n      item.command();\r\n    }\r\n\r\n    this.mobileMenuOpen = false;\r\n  }\r\n\r\n  logout() {\r\n    this.isAuthenticated = false;\r\n    this.updateMenu();\r\n    this.router.navigate(['/login']);\r\n  }\r\n\r\n  toggleTheme() {\r\n    if (this.isDarkTheme) {\r\n      document.body.classList.add('dark-theme');\r\n    } else {\r\n      document.body.classList.remove('dark-theme');\r\n    }\r\n    localStorage.setItem('theme', this.isDarkTheme ? 'dark' : 'light');\r\n  }\r\n\r\n  checkCurrentTheme() {\r\n    const savedTheme = localStorage.getItem('theme');\r\n    if (savedTheme === 'dark') {\r\n      this.isDarkTheme = true;\r\n      document.body.classList.add('dark-theme');\r\n    } else if (savedTheme === 'light') {\r\n      this.isDarkTheme = false;\r\n      document.body.classList.remove('dark-theme');\r\n    } else {\r\n      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n      this.isDarkTheme = prefersDark;\r\n      if (prefersDark) document.body.classList.add('dark-theme');\r\n    }\r\n  }\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\r\n  switchLanguage(_langValue: string) {\r\n    // this.currentLang = langValue;\r\n    // localStorage.setItem('language', langValue);\r\n  }\r\n}\r\n",
            "styleUrl": "./navbar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 44,
                "jsdoctags": [
                    {
                        "name": "router",
                        "type": "Router",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit",
                "NavbarProps"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 51
                    }
                }
            },
            "templateData": "<nav class=\"navbar\">\r\n  <div class=\"navbar-container\">\r\n    <div class=\"navbar-brand\">\r\n      @if (logo) {\r\n      <img [src]=\"logo\" alt=\"Logo\" class=\"navbar-logo\" />\r\n      }\r\n      <h1 class=\"navbar-title\">{{ title }}</h1>\r\n    </div>\r\n\r\n    <button class=\"navbar-mobile-toggle\" (click)=\"toggleMobileMenu()\">\r\n      <span class=\"toggle-icon\"></span>\r\n    </button>\r\n\r\n    <div class=\"navbar-menu\" [class.open]=\"mobileMenuOpen\">\r\n      <ul class=\"navbar-nav\">\r\n        @for (item of combinedMenuItems; track item) {\r\n        <li class=\"nav-item\" [class.has-dropdown]=\"item.items?.length\">\r\n          @if (item.items?.length) {\r\n          <div class=\"nav-link dropdown-toggle\" (click)=\"toggleDropdown(item)\">\r\n            @if (item.icon) {\r\n            <i class=\"nav-icon {{ item.icon }}\"></i>\r\n            }\r\n            {{ item.label }}\r\n            <i class=\"dropdown-arrow\" [class.expanded]=\"item.expanded\"></i>\r\n          </div>\r\n\r\n          <ul class=\"dropdown-menu\" [class.show]=\"item.expanded\">\r\n            @for (subItem of item.items; track subItem) {\r\n            <li class=\"dropdown-item\" [class.disabled]=\"subItem.disabled\"\r\n              (click)=\"!subItem.disabled && navigateTo(subItem)\">\r\n              @if (subItem.icon) {\r\n              <i class=\"nav-icon {{ subItem.icon }}\"></i>\r\n              }\r\n              {{ subItem.label }}\r\n            </li>\r\n            }\r\n          </ul>\r\n          } @else {\r\n          <div class=\"nav-link\" [class.disabled]=\"item.disabled\" (click)=\"!item.disabled && navigateTo(item)\">\r\n            @if (item.icon) {\r\n            <i class=\"nav-icon {{ item.icon }}\"></i>\r\n            }\r\n            {{ item.label }}\r\n          </div>\r\n          }\r\n        </li>\r\n        }\r\n      </ul>\r\n\r\n      @if (showSwtichLang && langs.length > 0) {\r\n      <div class=\"language-switcher\">\r\n        @for (lang of langs; track lang) {\r\n        <app-button [label]=\"lang.label\" [styleClass]=\"currentLang === lang.value ? 'active-lang' : ''\"\r\n          [variant]=\"currentLang === lang.value ? 'outlined' : 'text'\"\r\n          [severity]=\"currentLang === lang.value ? 'primary' : 'secondary'\" (onClick)=\"switchLanguage(lang.value)\">\r\n        </app-button>\r\n        }\r\n      </div>\r\n      }\r\n\r\n      @if (showSwitchTheme) {\r\n      <div class=\"theme-switcher\">\r\n        <form [formGroup]=\"themeForm\">\r\n          <app-toggle-switch [formControl]=\"controls.theme\" [iconOn]=\"'pi-moon'\" [iconOff]=\"'pi-sun'\"\r\n            (onChange)=\"toggleTheme()\">\r\n          </app-toggle-switch>\r\n        </form>\r\n      </div>\r\n      }\r\n\r\n      @if (isAuthenticated) {\r\n      <div class=\"user-section\">\r\n        <div class=\"user-info\">\r\n          <span class=\"user-name\">{{ userName }}</span>\r\n          <div class=\"user-avatar\">\r\n            @if (userAvatar) {\r\n            <img [src]=\"userAvatar\" alt=\"User Avatar\" />\r\n            } @else {\r\n            <div class=\"avatar-placeholder\">\r\n              {{ userName.charAt(0).toUpperCase() }}\r\n            </div>\r\n            }\r\n          </div>\r\n        </div>\r\n        <button class=\"logout-button\" (click)=\"logout()\">\r\n          <i class=\"logout-icon\"></i>\r\n          Logout\r\n        </button>\r\n      </div>\r\n      }\r\n    </div>\r\n  </div>\r\n</nav>\r\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-92f4cc9cc0054ccf9d578fc1ebe06b6d7ed1424277151dbedd6cfe73ba15609d9919dcba6e9acbd021b43117d9ce1f28adf6630c681037299b01a4c726c15a8e",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>    <storybook-header\n      [user]=\"user\"\n      (onLogout)=\"doLogout()\"\n      (onLogin)=\"doLogin()\"\n      (onCreateAccount)=\"doCreateAccount()\"\n    ></storybook-header>\n    <section class=\"storybook-page\">\n      <h2>Pages in Storybook</h2>\n      <p>\n        We recommend building UIs with a\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n          <strong>component-driven</strong>\n        </a>\n        process starting with atomic components and ending with pages.\n      </p>\n      <p>\n        Render pages with mock data. This makes it easy to build and review page states without\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\n        in Storybook:\n      </p>\n      <ul>\n        <li>\n          Use a higher-level connected component. Storybook helps you compose such data from the\n          \"args\" of child component stories\n        </li>\n        <li>\n          Assemble data in the page component from your services. You can mock these services out\n          using Storybook.\n        </li>\n      </ul>\n      <p>\n        Get a guided tutorial on component-driven development at\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n          Storybook tutorials\n        </a>\n        . Read more in the\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n        .\n      </p>\n      <div class=\"tip-wrapper\">\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n          <g fill=\"none\" fillRule=\"evenodd\">\n            <path\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n              id=\"a\"\n              fill=\"#999\"\n            />\n          </g>\n        </svg>\n        Viewports addon in the toolbar\n      </div>\n    </section>\n  </article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport { HeaderComponent } from './header.component';\r\nimport type { User } from './user';\r\n\r\n@Component({\r\n  selector: 'storybook-page',\r\n  standalone: true,\r\n  imports: [CommonModule, HeaderComponent],\r\n  template: `<article>\r\n    <storybook-header\r\n      [user]=\"user\"\r\n      (onLogout)=\"doLogout()\"\r\n      (onLogin)=\"doLogin()\"\r\n      (onCreateAccount)=\"doCreateAccount()\"\r\n    ></storybook-header>\r\n    <section class=\"storybook-page\">\r\n      <h2>Pages in Storybook</h2>\r\n      <p>\r\n        We recommend building UIs with a\r\n        <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          <strong>component-driven</strong>\r\n        </a>\r\n        process starting with atomic components and ending with pages.\r\n      </p>\r\n      <p>\r\n        Render pages with mock data. This makes it easy to build and review page states without\r\n        needing to navigate to them in your app. Here are some handy patterns for managing page data\r\n        in Storybook:\r\n      </p>\r\n      <ul>\r\n        <li>\r\n          Use a higher-level connected component. Storybook helps you compose such data from the\r\n          \"args\" of child component stories\r\n        </li>\r\n        <li>\r\n          Assemble data in the page component from your services. You can mock these services out\r\n          using Storybook.\r\n        </li>\r\n      </ul>\r\n      <p>\r\n        Get a guided tutorial on component-driven development at\r\n        <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\r\n          Storybook tutorials\r\n        </a>\r\n        . Read more in the\r\n        <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\r\n        .\r\n      </p>\r\n      <div class=\"tip-wrapper\">\r\n        <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\r\n        <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\r\n          <g fill=\"none\" fillRule=\"evenodd\">\r\n            <path\r\n              d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\r\n              id=\"a\"\r\n              fill=\"#999\"\r\n            />\r\n          </g>\r\n        </svg>\r\n        Viewports addon in the toolbar\r\n      </div>\r\n    </section>\r\n  </article>`,\r\n  styleUrls: ['./page.css'],\r\n})\r\nexport class PageComponent {\r\n  user: User | null = null;\r\n\r\n  doLogout() {\r\n    this.user = null;\r\n  }\r\n\r\n  doLogin() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n\r\n  doCreateAccount() {\r\n    this.user = { name: 'Jane Doe' };\r\n  }\r\n}\r\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\r\n  margin: 0 auto;\r\n  padding: 48px 20px;\r\n  max-width: 600px;\r\n  color: #333;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\r\n}\r\n\r\n.storybook-page h2 {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin: 0 0 4px;\r\n  font-weight: 700;\r\n  font-size: 32px;\r\n  line-height: 1;\r\n}\r\n\r\n.storybook-page p {\r\n  margin: 1em 0;\r\n}\r\n\r\n.storybook-page a {\r\n  color: inherit;\r\n}\r\n\r\n.storybook-page ul {\r\n  margin: 1em 0;\r\n  padding-left: 30px;\r\n}\r\n\r\n.storybook-page li {\r\n  margin-bottom: 8px;\r\n}\r\n\r\n.storybook-page .tip {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin-right: 10px;\r\n  border-radius: 1em;\r\n  background: #e7fdd8;\r\n  padding: 4px 12px;\r\n  color: #357a14;\r\n  font-weight: 700;\r\n  font-size: 11px;\r\n  line-height: 12px;\r\n}\r\n\r\n.storybook-page .tip-wrapper {\r\n  margin-top: 40px;\r\n  margin-bottom: 40px;\r\n  font-size: 13px;\r\n  line-height: 20px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg {\r\n  display: inline-block;\r\n  vertical-align: top;\r\n  margin-top: 3px;\r\n  margin-right: 4px;\r\n  width: 12px;\r\n  height: 12px;\r\n}\r\n\r\n.storybook-page .tip-wrapper svg path {\r\n  fill: #1ea7fd;\r\n}\r\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PasswordInputComponent",
            "id": "component-PasswordInputComponent-a6658eee8b1314a83327b47c792c76827401011f209f96da0fb5f7db533d4fd8a950f99f50aad46ffba14ade226cb6ab8f7fa42617b0085294a7739369618b5d",
            "file": "src/app/shared/components/password-input/password-input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => PasswordInputComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-password-input",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./password-input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "feedback",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "mediumLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "promptLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "strongLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'outlined'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "Variant",
                    "decorators": []
                },
                {
                    "name": "weakLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "id",
                    "defaultValue": "`input-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 48,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 49
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "value",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 45
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 69,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 57,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 61,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 65,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 53,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PasswordModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, forwardRef, Input } from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { PasswordModule } from 'primeng/password';\r\nimport { PasswordInputProps, Variant } from '../../types/password-input.types';\r\n\r\n@Component({\r\n  selector: 'app-password-input',\r\n  standalone: true,\r\n  imports: [PasswordModule, CommonModule, ReactiveFormsModule, FormsModule],\r\n  templateUrl: './password-input.component.html',\r\n  styleUrl: './password-input.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => PasswordInputComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class PasswordInputComponent<T> implements ControlValueAccessor, PasswordInputProps {\r\n  @Input() label?: string;\r\n  @Input() placeholder?: string = '';\r\n  @Input() disabled = false;\r\n  @Input() required = false;\r\n  @Input() invalid = false;\r\n  @Input() errorMessage?: string;\r\n  @Input() formControl!: FormControl;\r\n  @Input() feedback?: boolean;\r\n  @Input() promptLabel?: string;\r\n  @Input() weakLabel?: string;\r\n  @Input() mediumLabel?: string;\r\n  @Input() strongLabel?: string;\r\n  // @Input() size?: Size;\r\n  @Input() variant: Variant = 'outlined';\r\n\r\n  id = `input-${Math.random().toString(36).substr(2, 9)}`;\r\n  touched = false;\r\n  value: T | null = null;\r\n\r\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars, @typescript-eslint/no-empty-function\r\n  private onChange = (_value: T) => {};\r\n  onTouched = () => {\r\n    this.touched = true;\r\n  };\r\n\r\n  writeValue(value: T): void {\r\n    this.value = value;\r\n  }\r\n\r\n  registerOnChange(fn: (value: T) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  onInput(value: T): void {\r\n    this.value = value;\r\n    this.onChange(value);\r\n  }\r\n}\r\n",
            "styleUrl": "./password-input.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "PasswordInputProps"
            ],
            "templateData": "<div class=\"field\">\r\n  @if (label) {\r\n  <label [for]=\"id\" class=\"field-label\">\r\n    {{ label }}\r\n    @if (required) {\r\n    <span class=\"required-marker\">*</span>\r\n    }\r\n  </label>\r\n  }\r\n\r\n  <p-password [formControl]=\"formControl\" [id]=\"id\" [(ngModel)]=\"value\" (ngModelChange)=\"onInput($event)\"\r\n    (blur)=\"onTouched()\" [disabled]=\"disabled\" [placeholder]=\"placeholder\" [feedback]=\"feedback\"\r\n    [promptLabel]=\"promptLabel\" [weakLabel]=\"weakLabel\" [mediumLabel]=\"mediumLabel\" [strongLabel]=\"strongLabel\"\r\n    [variant]=\"variant\" fluid=\"true\" [class.ng-invalid]=\"invalid && errorMessage\" [required]=\"required\">\r\n  </p-password>\r\n\r\n  @if (invalid && errorMessage) {\r\n  <small class=\"p-error\">{{ errorMessage }}</small>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "RegisterComponent",
            "id": "component-RegisterComponent-1b9087e9ee6209fbdb9d250ce66b82097207bf5300b21dbdfd6cbb0ce03d3c9c83b97d145004045728cb981b33287c4d5e91eae9623bba5e0518e7489723e2ed",
            "file": "src/app/features/auth/register/register.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./register.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "registerForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup<RegisterForm>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "RouterEnum",
                    "defaultValue": "RouterEnum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                }
            ],
            "methodsClass": [
                {
                    "name": "getErrorMessage",
                    "args": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "any",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "control",
                            "type": "FormControl",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRegister",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 50,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "InputComponent",
                    "type": "component"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "PasswordInputComponent",
                    "type": "component"
                },
                {
                    "name": "RouterModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, OnInit } from '@angular/core';\r\nimport { PasswordInputComponent } from '../../../shared/components/password-input/password-input.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { FormControl, FormGroup, FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { RouterModule } from '@angular/router';\r\nimport { InputComponent } from '../../../shared/components/input/input.component';\r\nimport { RegisterForm } from '../../../shared/models/form.model';\r\nimport { FormService } from '../../../shared/services/form.service';\r\nimport { ButtonComponent } from '../../../shared/components/button/button.component';\r\nimport { AuthService } from '../../../core/_services/auth/auth.service';\r\nimport { RouterEnum } from '../../../config/router.enum';\r\nimport { IRegisterDto } from '../../../core/_models/DTOs/authDto.model';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  standalone: true,\r\n  imports: [\r\n    ButtonComponent,\r\n    InputComponent,\r\n    ReactiveFormsModule,\r\n    CommonModule,\r\n    PasswordInputComponent,\r\n    RouterModule,\r\n    FormsModule,\r\n  ],\r\n  templateUrl: './register.component.html',\r\n  styleUrl: './register.component.scss',\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm!: FormGroup<RegisterForm>;\r\n  RouterEnum = RouterEnum;\r\n\r\n  constructor(\r\n    private formService: FormService,\r\n    private authService: AuthService\r\n  ) {}\r\n\r\n  ngOnInit() {\r\n    this.registerForm = this.formService.initRegisterForm();\r\n  }\r\n\r\n  get controls() {\r\n    return this.registerForm.controls;\r\n  }\r\n\r\n  getErrorMessage(control: FormControl) {\r\n    return this.formService.getErrorMessage(control);\r\n  }\r\n\r\n  onRegister() {\r\n    this.authService.signUp(this.registerForm.getRawValue() as IRegisterDto).subscribe({\r\n      next: res => {\r\n        console.log('Register successful');\r\n        console.log(res);\r\n      },\r\n      error: error => {\r\n        console.error('Register failed');\r\n        console.error(error);\r\n      },\r\n    });\r\n  }\r\n}\r\n",
            "styleUrl": "./register.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 31,
                "jsdoctags": [
                    {
                        "name": "formService",
                        "type": "FormService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "authService",
                        "type": "AuthService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "accessors": {
                "controls": {
                    "name": "controls",
                    "getSignature": {
                        "name": "controls",
                        "type": "",
                        "returnType": "",
                        "line": 42
                    }
                }
            },
            "templateData": "<div class=\"register-page\">\r\n  <h1>Zarejestruj się</h1>\r\n  <form [formGroup]=\"registerForm\" (ngSubmit)=\"onRegister()\">\r\n\r\n    <app-input [formControl]=\"controls.username\" placeholder=\"Username\" type=\"text\" autocomplete=\"name\"\r\n      [errorMessage]=\"getErrorMessage(controls.username)\"\r\n      [invalid]=\"controls.username.invalid &&  controls.username.touched\">\r\n    </app-input>\r\n\r\n    <app-input [formControl]=\"controls.firstName\" placeholder=\"Imię\" type=\"text\" autocomplete=\"given-name\"\r\n      [errorMessage]=\"getErrorMessage(controls.firstName)\"\r\n      [invalid]=\"controls.firstName.invalid &&  controls.firstName.touched\">\r\n    </app-input>\r\n\r\n    <app-input [formControl]=\"controls.lastName\" placeholder=\"Nazwisko\" type=\"text\" autocomplete=\"family-name\"\r\n      [errorMessage]=\"getErrorMessage(controls.lastName)\"\r\n      [invalid]=\"controls.lastName.invalid &&  controls.lastName.touched\">\r\n    </app-input>\r\n\r\n    <app-input [formControl]=\"controls.email\" placeholder=\"Email\" type=\"email\" autocomplete=\"email\"\r\n      [errorMessage]=\"getErrorMessage(controls.email)\" [invalid]=\"controls.email.invalid &&  controls.email.touched\">\r\n    </app-input>\r\n\r\n    <app-password-input [formControl]=\"controls.password\" placeholder=\"Hasło\" autocomplete=\"current-password\"\r\n      [errorMessage]=\"getErrorMessage(controls.password)\"\r\n      [invalid]=\"controls.password.invalid &&  controls.password.touched\" promptLabel=\"Choose a password\"\r\n      weakLabel=\"Too simple\" mediumLabel=\"Average complexity\" strongLabel=\"Complex password\" [feedback]=\"true\">\r\n    </app-password-input>\r\n\r\n    <app-password-input [formControl]=\"controls.confirmPassword\" placeholder=\"Powtórz hasło\"\r\n      autocomplete=\"current-password\" [errorMessage]=\"getErrorMessage(controls.confirmPassword)\"\r\n      [invalid]=\"controls.confirmPassword.invalid &&  controls.confirmPassword.touched\">\r\n    </app-password-input>\r\n\r\n    <div class=\"submit-button\">\r\n      <app-button type=\"submit\" [disabled]=\"registerForm.invalid\" severity=\"primary\" [label]=\"'Zarejestruj się'\">\r\n      </app-button>\r\n    </div>\r\n    <p class=\"text-center\">Zapomniałeś hasła? <a routerLink=\"/{{RouterEnum.forgetPassword}}\">Odzyskaj hasło</a></p>\r\n    <p class=\"text-center\">Masz konto? <a routerLink=\"/{{RouterEnum.login}}\">Zaloguj się</a></p>\r\n  </form>\r\n\r\n</div>\r\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-8023dbf0f24798403da8d720fc56475ee8b14ca4d7a2655655e05053e3c50b70919a77e39607a83218f79bc6efaf75e152b1ce3065ad62a6f6613e016502de31",
            "file": "src/app/shared/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => SelectComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "checkmark",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "editable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 48,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "filter",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "filterBy",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControlName",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "inputId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 49,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 45,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelVariant",
                    "defaultValue": "'over'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 46,
                    "type": "LabelVariant",
                    "decorators": []
                },
                {
                    "name": "loading",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 38,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "optionLabel",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "options",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "T[]",
                    "decorators": []
                },
                {
                    "name": "optionValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 44,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "showClear",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 43,
                    "type": "Size",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 50,
                    "type": "T | null",
                    "decorators": []
                },
                {
                    "name": "variant",
                    "defaultValue": "'filled'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 42,
                    "type": "Variant",
                    "decorators": []
                },
                {
                    "name": "virtualScroll",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 40,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "virtualScrollItemSize",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 41,
                    "type": "number",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onChangeEvent",
                    "defaultValue": "new EventEmitter<{\r\n    originalEvent: Event;\r\n    value: T;\r\n  }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 61,
                    "type": "EventEmitter"
                },
                {
                    "name": "onSelect",
                    "defaultValue": "new EventEmitter<{ originalEvent: Event; value: T }>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 60,
                    "type": "EventEmitter"
                },
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<T>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 59,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "defaultValue": "undefined",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "T | undefined",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 68
                },
                {
                    "name": "id",
                    "defaultValue": "`input-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 66
                },
                {
                    "name": "onChangeCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 80,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouchCallback",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 81,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 76
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 74
                }
            ],
            "methodsClass": [
                {
                    "name": "handleChange",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 104,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "handleSelect",
                    "args": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 100,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "literal type",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 89,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "T | null",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 93,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 96,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 83,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "T",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SelectModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "FloatLabelModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output, forwardRef } from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { SelectModule } from 'primeng/select';\r\nimport { FloatLabelModule } from 'primeng/floatlabel';\r\nimport { SelectProps, Size, Variant, LabelVariant } from '../../types/select.types';\r\nimport { CommonModule } from '@angular/common';\r\n\r\n@Component({\r\n  selector: 'app-select',\r\n  standalone: true,\r\n  imports: [SelectModule, ReactiveFormsModule, FormsModule, FloatLabelModule, CommonModule],\r\n  templateUrl: './select.component.html',\r\n  styleUrl: './select.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => SelectComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class SelectComponent<T = any> implements SelectProps<T>, ControlValueAccessor {\r\n  @Input() formControlName = '';\r\n  @Input() options?: T[];\r\n  @Input() optionLabel?: string;\r\n  @Input() optionValue?: string;\r\n  @Input() placeholder?: string;\r\n  @Input() disabled = false;\r\n  @Input() filter?: boolean;\r\n  @Input() checkmark = false;\r\n  @Input() editable = false;\r\n  @Input() filterBy?: string;\r\n  @Input() loading = false;\r\n  @Input() showClear = false;\r\n  @Input() virtualScroll?: boolean;\r\n  @Input() virtualScrollItemSize?: number;\r\n  @Input() variant: Variant = 'filled';\r\n  @Input() size?: Size;\r\n  @Input() required?: boolean;\r\n  @Input() label?: string;\r\n  @Input() labelVariant: LabelVariant = 'over';\r\n  @Input() inputId?: string;\r\n  @Input() errorMessage?: string;\r\n  @Input() invalid?: boolean;\r\n  @Input() set value(val: T | null) {\r\n    if (val !== this._value) {\r\n      this._value = val === null ? undefined : val;\r\n      this.onChangeCallback(val);\r\n      this.onTouchCallback();\r\n      this.valueChange.emit(val === null ? undefined : val);\r\n    }\r\n  }\r\n\r\n  @Output() valueChange = new EventEmitter<T>();\r\n  @Output() onSelect = new EventEmitter<{ originalEvent: Event; value: T }>();\r\n  @Output() onChangeEvent = new EventEmitter<{\r\n    originalEvent: Event;\r\n    value: T;\r\n  }>();\r\n\r\n  id = `input-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  _value: T | undefined = undefined;\r\n\r\n  get value(): T | undefined {\r\n    return this._value;\r\n  }\r\n\r\n  touched = false;\r\n\r\n  onTouched = () => {\r\n    this.touched = true;\r\n  };\r\n\r\n  private onChangeCallback: (value: T | null) => void = () => {};\r\n  private onTouchCallback: () => void = () => {};\r\n\r\n  writeValue(value: T): void {\r\n    if (value !== this._value) {\r\n      this._value = value;\r\n    }\r\n  }\r\n\r\n  registerOnChange(fn: (value: T | null) => void): void {\r\n    this.onChangeCallback = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  handleSelect(event: { originalEvent: Event; value: T }): void {\r\n    this.onSelect.emit(event);\r\n  }\r\n\r\n  handleChange(event: { originalEvent: Event; value: T }): void {\r\n    this.onChangeCallback(event.value);\r\n    this.onTouchCallback();\r\n    this.valueChange.emit(event.value);\r\n    this.onChangeEvent.emit(event);\r\n  }\r\n}\r\n",
            "styleUrl": "./select.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "SelectProps",
                "ControlValueAccessor"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "T | null",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 50,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "T | null",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "",
                        "returnType": "T | undefined",
                        "line": 70
                    }
                }
            },
            "templateData": "<div class=\"field\">\r\n  @if (!label) {\r\n    <p-select\r\n      [formControlName]=\"formControlName\"\r\n      [checkmark]=\"checkmark\"\r\n      [showClear]=\"showClear\"\r\n      [editable]=\"editable\"\r\n      [filter]=\"filter\"\r\n      [filterBy]=\"filterBy\"\r\n      [loading]=\"loading\"\r\n      [virtualScroll]=\"virtualScroll\"\r\n      [virtualScrollItemSize]=\"virtualScrollItemSize\"\r\n      [options]=\"options\"\r\n      [(ngModel)]=\"value\"\r\n      [optionLabel]=\"optionLabel\"\r\n      [optionValue]=\"optionValue\"\r\n      [placeholder]=\"placeholder\"\r\n      [variant]=\"variant\"\r\n      [size]=\"size\"\r\n      [disabled]=\"disabled\"\r\n      class=\"w-full md:w-56\"\r\n      (onChange)=\"handleChange($event)\"\r\n      (onSelect)=\"handleSelect($event)\"\r\n    >\r\n    </p-select>\r\n  } @else {\r\n    <p-floatlabel class=\"w-full md:w-56\" [variant]=\"labelVariant\">\r\n      <p-select\r\n        [formControlName]=\"formControlName\"\r\n        [inputId]=\"inputId || formControlName\"\r\n        [checkmark]=\"checkmark\"\r\n        [showClear]=\"showClear\"\r\n        [editable]=\"editable\"\r\n        [filter]=\"filter\"\r\n        [filterBy]=\"filterBy\"\r\n        [loading]=\"loading\"\r\n        [virtualScroll]=\"virtualScroll\"\r\n        [virtualScrollItemSize]=\"virtualScrollItemSize\"\r\n        [options]=\"options\"\r\n        [(ngModel)]=\"value\"\r\n        [optionLabel]=\"optionLabel\"\r\n        [optionValue]=\"optionValue\"\r\n        [variant]=\"variant\"\r\n        [size]=\"size\"\r\n        [disabled]=\"disabled\"\r\n        styleClass=\"w-full\"\r\n        (onChange)=\"handleChange($event)\"\r\n        (onSelect)=\"handleSelect($event)\"\r\n      >\r\n      </p-select>\r\n      <label [for]=\"inputId || formControlName\" [class.required-label]=\"required\">\r\n        {{ label }}\r\n      </label>\r\n    </p-floatlabel>\r\n  }\r\n\r\n  @if (invalid && errorMessage && touched) {\r\n    <small class=\"p-error\">{{ errorMessage }}</small>\r\n  }\r\n</div>\r\n"
        },
        {
            "name": "ToastComponent",
            "id": "component-ToastComponent-81b90679872b2e08ad33f41fac29f7ff2e731644168f1a3310de0e2e55c3dc670cdf96a643acb914b746087baa5a4b306b7b714052b818609d6b653486212bb2",
            "file": "src/app/shared/components/toast/toast.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-toast",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toast.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ToastModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { ToastModule } from 'primeng/toast';\n\n@Component({\n  selector: 'app-toast',\n  standalone: true,\n  imports: [ToastModule],\n  templateUrl: './toast.component.html',\n  styleUrl: './toast.component.scss',\n})\nexport class ToastComponent {}\n",
            "styleUrl": "./toast.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p-toast></p-toast>\n"
        },
        {
            "name": "ToggleSwitchComponent",
            "id": "component-ToggleSwitchComponent-6dc8f1bd1433bfaac5264b22046aa49bfa58a7b7b88fed9b238160f0805ba1b9363c85e53d5783ee94e68a9cf93001f590bd6f6bfc2f65e7e93771d900cc42c6",
            "file": "src/app/shared/components/toggle-switch/toggle-switch.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [
                {
                    "name": "{\n    provide: NG_VALUE_ACCESSOR, useExisting: forwardRef(() => ToggleSwitchComponent), multi: true,\n}",
                    "type": "component"
                }
            ],
            "selector": "app-toggle-switch",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./toggle-switch.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "disabled",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "errorMessage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 35,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "formControl",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 37,
                    "type": "FormControl",
                    "decorators": []
                },
                {
                    "name": "iconOff",
                    "defaultValue": "'pi-times'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "iconOn",
                    "defaultValue": "'pi-check'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "invalid",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "label",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 32,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "labelPosition",
                    "defaultValue": "'right'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 33,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "required",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 36,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "styleClass",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 34,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "value",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 47,
                    "type": "boolean",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "valueChange",
                    "defaultValue": "new EventEmitter<boolean>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 39,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "_value",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "id",
                    "defaultValue": "`toggle-switch-${Math.random().toString(36).substr(2, 9)}`",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "onChange",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "function",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 59
                },
                {
                    "name": "onTouched",
                    "defaultValue": "() => {...}",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 60
                },
                {
                    "name": "touched",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                }
            ],
            "methodsClass": [
                {
                    "name": "onInput",
                    "args": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 80,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnChange",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ]
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 68,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [
                                {
                                    "name": "value",
                                    "type": "boolean",
                                    "deprecated": false,
                                    "deprecationMessage": ""
                                }
                            ],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "registerOnTouched",
                    "args": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": []
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 72,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "fn",
                            "type": "function",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "function": [],
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setDisabledState",
                    "args": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 76,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "isDisabled",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "writeValue",
                    "args": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 64,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "value",
                            "type": "boolean",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ToggleSwitchModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\r\nimport { Component, EventEmitter, forwardRef, Input, Output } from '@angular/core';\r\nimport {\r\n  ControlValueAccessor,\r\n  FormControl,\r\n  FormsModule,\r\n  NG_VALUE_ACCESSOR,\r\n  ReactiveFormsModule,\r\n} from '@angular/forms';\r\nimport { ToggleSwitchModule } from 'primeng/toggleswitch';\r\nimport { ToggleSwitchProps } from '../../types/toogleSwitch.types';\r\n\r\n@Component({\r\n  selector: 'app-toggle-switch',\r\n  standalone: true,\r\n  imports: [ToggleSwitchModule, ReactiveFormsModule, FormsModule, CommonModule],\r\n  templateUrl: './toggle-switch.component.html',\r\n  styleUrl: './toggle-switch.component.scss',\r\n  providers: [\r\n    {\r\n      provide: NG_VALUE_ACCESSOR,\r\n      useExisting: forwardRef(() => ToggleSwitchComponent),\r\n      multi: true,\r\n    },\r\n  ],\r\n})\r\nexport class ToggleSwitchComponent implements ControlValueAccessor, ToggleSwitchProps {\r\n  @Input() disabled = false;\r\n  @Input() iconOn = 'pi-check';\r\n  @Input() iconOff = 'pi-times';\r\n  @Input() invalid = false;\r\n  @Input() label?: string;\r\n  @Input() labelPosition = 'right';\r\n  @Input() styleClass?: string;\r\n  @Input() errorMessage?: string;\r\n  @Input() required?: boolean;\r\n  @Input() formControl!: FormControl;\r\n\r\n  @Output() valueChange = new EventEmitter<boolean>();\r\n\r\n  id = `toggle-switch-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n  private _value = false;\r\n  touched = false;\r\n\r\n  @Input()\r\n  get value(): boolean {\r\n    return this._value;\r\n  }\r\n\r\n  set value(val: boolean) {\r\n    if (this._value !== val) {\r\n      this._value = val;\r\n      this.onChange(val);\r\n      this.valueChange.emit(val);\r\n    }\r\n  }\r\n  // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n  onChange: (value: boolean) => void = () => {};\r\n  onTouched = () => {\r\n    this.touched = true;\r\n  };\r\n\r\n  writeValue(value: boolean): void {\r\n    this._value = value !== null && value !== undefined ? value : false;\r\n  }\r\n\r\n  registerOnChange(fn: (value: boolean) => void): void {\r\n    this.onChange = fn;\r\n  }\r\n\r\n  registerOnTouched(fn: () => void): void {\r\n    this.onTouched = fn;\r\n  }\r\n\r\n  setDisabledState(isDisabled: boolean): void {\r\n    this.disabled = isDisabled;\r\n  }\r\n\r\n  onInput(event: boolean): void {\r\n    this.value = event;\r\n    this.onTouched();\r\n  }\r\n}\r\n",
            "styleUrl": "./toggle-switch.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "ControlValueAccessor",
                "ToggleSwitchProps"
            ],
            "accessors": {
                "value": {
                    "name": "value",
                    "setSignature": {
                        "name": "value",
                        "type": "void",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "args": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": ""
                            }
                        ],
                        "returnType": "void",
                        "line": 51,
                        "jsdoctags": [
                            {
                                "name": "val",
                                "type": "boolean",
                                "deprecated": false,
                                "deprecationMessage": "",
                                "tagName": {
                                    "text": "param"
                                }
                            }
                        ]
                    },
                    "getSignature": {
                        "name": "value",
                        "type": "boolean",
                        "returnType": "boolean",
                        "line": 47
                    }
                }
            },
            "templateData": "<div>\r\n  @if (label) {\r\n  <label [class.required]=\"required\" [for]=\"id\" class=\"ml-2\">\r\n    {{ label }}\r\n    @if (required) {\r\n    <span class=\"required-marker\">*</span>\r\n    }\r\n  </label>\r\n  }\r\n\r\n  @if (iconOff && iconOn) {\r\n  <p-toggleswitch [formControl]=\"formControl\" [class]=\"invalid ? styleClass + 'ng-dirty ng-invalid' : styleClass\"\r\n    [disabled]=\"disabled\">\r\n    <ng-template pTemplate=\"handle\" let-checked=\"checked\">\r\n      <i [ngClass]=\"['!text-xs', 'pi', checked ? iconOn : iconOff]\"></i>\r\n    </ng-template>\r\n  </p-toggleswitch>\r\n  } @else {\r\n  <p-toggleSwitch [formControl]=\"formControl\" [class]=\"invalid ? styleClass + 'ng-dirty ng-invalid' : styleClass\"\r\n    [disabled]=\"disabled\">\r\n  </p-toggleSwitch>\r\n  }\r\n\r\n  @if (invalid && errorMessage && touched) {\r\n  <small class=\"p-error\">{{ errorMessage }}</small>\r\n  }\r\n</div>\r\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(withInterceptors([authInterceptor, refreshTokenInterceptor])),\r\n    provideAnimationsAsync(),\r\n    ɵBrowserAnimationBuilder,\r\n    providePrimeNG({\r\n      theme: {\r\n        preset: Aura,\r\n      },\r\n    }),\r\n    MessageService,\r\n  ],\r\n}"
            },
            {
                "name": "authGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_guards/auth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  return authService.isAuth().pipe(\r\n    map(isLoggedIn => {\r\n      if (isLoggedIn) {\r\n        return true;\r\n      } else {\r\n        router.navigate([RouterEnum.home]);\r\n        return false;\r\n      }\r\n    }),\r\n    catchError(() => {\r\n      router.navigate([RouterEnum.home]);\r\n      return of(false);\r\n    })\r\n  );\r\n}"
            },
            {
                "name": "authInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_interceptors/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const tokenService = inject(TokenService);\r\n\r\n  const accessToken = tokenService.getAccessToken();\r\n\r\n  if (accessToken && tokenService.validateToken(accessToken)) {\r\n    const clonedReq = req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    });\r\n\r\n    return next(clonedReq);\r\n  } else {\r\n    return next(req);\r\n  }\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.development.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: false,\r\n  apiURL: 'http://localhost:5238',\r\n}"
            },
            {
                "name": "environment",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/environments/environment.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  production: true,\r\n  apiURL: 'http://localhost:5238',\r\n}"
            },
            {
                "name": "equivalentValidator",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/shared/validators/equivalent.validator.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "(\r\n  passwdControlName: string,\r\n  secondPasswdControlName: string\r\n): ValidatorFn => {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const passwdControl = control.get(passwdControlName);\r\n    const secondPasswdControl = control.get(secondPasswdControlName);\r\n\r\n    if (\r\n      secondPasswdControl?.value &&\r\n      secondPasswdControl?.value !== passwdControl?.value\r\n    ) {\r\n      secondPasswdControl.setErrors({\r\n        passwordsNotEqual: true,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  };\r\n}"
            },
            {
                "name": "formCanDeactivateGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_guards/form-can-deactivate.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanDeactivateFn<>",
                "defaultValue": "(\r\n  component: unknown,\r\n  currentRoute: ActivatedRouteSnapshot,\r\n  currentState: RouterStateSnapshot,\r\n  nextState: RouterStateSnapshot\r\n) => {\r\n  if (component instanceof PreferencesComponent) {\r\n    return component.activeButton\r\n      ? window.confirm('Do you really leave this page without save?')\r\n      : true;\r\n  }\r\n\r\n  if (component instanceof ChangePasswordComponent) {\r\n    return component.changePasswordForm.dirty\r\n      ? window.confirm('Do you really leave this page without save?')\r\n      : true;\r\n  }\r\n\r\n  if (component instanceof SettingsComponent) {\r\n    return component.activeButton\r\n      ? window.confirm('Do you really leave this page without save?')\r\n      : true;\r\n  }\r\n\r\n  return true;\r\n}"
            },
            {
                "name": "MenuConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/config/menu.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "object",
                "defaultValue": "{\r\n  title: 'Angular Template',\r\n  footerTitle: 'Karmelki',\r\n  authMenuItems: [\r\n    { label: 'Profile', routerLink: `/${RouterEnum.settings}` },\r\n    { label: 'Logout', command: () => {} },\r\n  ],\r\n  nonAuthMenuItems: [\r\n    { label: 'Login', routerLink: `/${RouterEnum.login}` },\r\n    { label: 'Register', routerLink: `/${RouterEnum.register}` },\r\n  ],\r\n  langs: [\r\n    { label: 'English', value: 'en' },\r\n    { label: 'Polski', value: 'pl' },\r\n  ],\r\n}"
            },
            {
                "name": "refreshTokenInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\r\n  const tokenService = inject(TokenService);\r\n\r\n  return next(req).pipe(\r\n    catchError((error: HttpErrorResponse) => {\r\n      if (error.status === 401) {\r\n        const accessToken = tokenService.getAccessToken();\r\n        const refreshToken = tokenService.getRefreshToken();\r\n\r\n        if (accessToken && refreshToken) {\r\n          return tokenService.refreshToken({ accessToken, refreshToken }).pipe(\r\n            switchMap((newTokens: ITokens) => {\r\n              tokenService.setAccessToken(newTokens.accessToken);\r\n              tokenService.setRefreshToken(newTokens.refreshToken);\r\n\r\n              const clonedReq = req.clone({\r\n                setHeaders: {\r\n                  Authorization: `Bearer ${newTokens.accessToken}`,\r\n                },\r\n              });\r\n              return next(clonedReq);\r\n            }),\r\n            catchError(refreshError => {\r\n              tokenService.removeTokens();\r\n              return throwError(refreshError);\r\n            })\r\n          );\r\n        } else {\r\n          tokenService.removeTokens();\r\n          return throwError(error);\r\n        }\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n    })\r\n  );\r\n}"
            },
            {
                "name": "unAuthGuard",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/core/_guards/unauth.guard.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "CanActivateFn",
                "defaultValue": "(route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  return authService.isAuth().pipe(\r\n    map(isLoggedIn => {\r\n      if (isLoggedIn) {\r\n        router.navigate([RouterEnum.home]);\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    }),\r\n    catchError(() => {\r\n      return of(true);\r\n    })\r\n  );\r\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "ButtonBadgeSeverity",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonIconPosition",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"left\" | \"right\" | \"top\" | \"bottom\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonSeverity",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"info\" | \"warn\" | \"help\" | \"danger\" | \"contrast\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonSize",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"large\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "ButtonVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"outlined\"",
                "file": "src/app/shared/types/button.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "IFileUploadMode",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"basic\" | \"advanced\"",
                "file": "src/app/shared/types/fileUploader.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "InputIcons",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"user\" | \"map\" | \"clock\" | \"star\" | \"check\" | \"times\" | \"shopping-cart\"",
                "file": "src/app/shared/types/input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "InputTypes",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"text\" | \"number\" | \"email\" | \"password\" | \"tel\" | \"url\"",
                "file": "src/app/shared/types/input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Keys",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"tl\" | \"tc\" | \"tr\" | \"bl\" | \"bc\" | \"br\" | \"c\"",
                "file": "src/app/shared/types/toast.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "LabelVariant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"over\" | \"in\" | \"on\"",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Langs",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "literal type[]",
                "file": "src/app/shared/types/navbar.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "Positions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\" | \"center\"",
                "file": "src/app/shared/types/toast.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "SelectOptions",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "SelectOption[]",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 188
            },
            {
                "name": "Severity",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                "file": "src/app/shared/types/toast.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"large\" | undefined",
                "file": "src/app/shared/types/password-input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Size",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"small\" | \"large\"",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Variant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"filled\" | \"outlined\"",
                "file": "src/app/shared/types/password-input.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            },
            {
                "name": "Variant",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "\"filled\" | \"outlined\"",
                "file": "src/app/shared/types/select.types.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 192
            }
        ],
        "enumerations": [
            {
                "name": "ApiEndpoints",
                "childs": [
                    {
                        "name": "SIGN_IN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/login"
                    },
                    {
                        "name": "SIGN_UP",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/register"
                    },
                    {
                        "name": "SIGN_OUT",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "RESET_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "CHANGE_PASSWORD",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "REFRESH_TOKEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/refresh-token"
                    },
                    {
                        "name": "REVOKE_TOKEN",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/auth/revoke-token"
                    },
                    {
                        "name": "GET_USERS",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/users"
                    },
                    {
                        "name": "GET_USER",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "api/users"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/core/_models/api-endpoints.enum.ts"
            },
            {
                "name": "RouterEnum",
                "childs": [
                    {
                        "name": "home",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": ""
                    },
                    {
                        "name": "login",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "login"
                    },
                    {
                        "name": "register",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "register"
                    },
                    {
                        "name": "logout",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "logout"
                    },
                    {
                        "name": "settings",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "settings"
                    },
                    {
                        "name": "changePassword",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "change-password"
                    },
                    {
                        "name": "deleteAccount",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "deleteAccount"
                    },
                    {
                        "name": "forgetPassword",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "forget-password"
                    },
                    {
                        "name": "preferences",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "preferences"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/config/router.enum.ts"
            }
        ],
        "groupedVariables": {
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\r\n  providers: [\r\n    provideZoneChangeDetection({ eventCoalescing: true }),\r\n    provideRouter(routes),\r\n    provideHttpClient(withInterceptors([authInterceptor, refreshTokenInterceptor])),\r\n    provideAnimationsAsync(),\r\n    ɵBrowserAnimationBuilder,\r\n    providePrimeNG({\r\n      theme: {\r\n        preset: Aura,\r\n      },\r\n    }),\r\n    MessageService,\r\n  ],\r\n}"
                }
            ],
            "src/app/core/_guards/auth.guard.ts": [
                {
                    "name": "authGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_guards/auth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  return authService.isAuth().pipe(\r\n    map(isLoggedIn => {\r\n      if (isLoggedIn) {\r\n        return true;\r\n      } else {\r\n        router.navigate([RouterEnum.home]);\r\n        return false;\r\n      }\r\n    }),\r\n    catchError(() => {\r\n      router.navigate([RouterEnum.home]);\r\n      return of(false);\r\n    })\r\n  );\r\n}"
                }
            ],
            "src/app/core/_interceptors/auth.interceptor.ts": [
                {
                    "name": "authInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_interceptors/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const tokenService = inject(TokenService);\r\n\r\n  const accessToken = tokenService.getAccessToken();\r\n\r\n  if (accessToken && tokenService.validateToken(accessToken)) {\r\n    const clonedReq = req.clone({\r\n      setHeaders: {\r\n        Authorization: `Bearer ${accessToken}`,\r\n      },\r\n    });\r\n\r\n    return next(clonedReq);\r\n  } else {\r\n    return next(req);\r\n  }\r\n}"
                }
            ],
            "src/environments/environment.development.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.development.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: false,\r\n  apiURL: 'http://localhost:5238',\r\n}"
                }
            ],
            "src/environments/environment.ts": [
                {
                    "name": "environment",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/environments/environment.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  production: true,\r\n  apiURL: 'http://localhost:5238',\r\n}"
                }
            ],
            "src/app/shared/validators/equivalent.validator.ts": [
                {
                    "name": "equivalentValidator",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/shared/validators/equivalent.validator.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "(\r\n  passwdControlName: string,\r\n  secondPasswdControlName: string\r\n): ValidatorFn => {\r\n  return (control: AbstractControl): ValidationErrors | null => {\r\n    const passwdControl = control.get(passwdControlName);\r\n    const secondPasswdControl = control.get(secondPasswdControlName);\r\n\r\n    if (\r\n      secondPasswdControl?.value &&\r\n      secondPasswdControl?.value !== passwdControl?.value\r\n    ) {\r\n      secondPasswdControl.setErrors({\r\n        passwordsNotEqual: true,\r\n      });\r\n    }\r\n\r\n    return null;\r\n  };\r\n}"
                }
            ],
            "src/app/core/_guards/form-can-deactivate.guard.ts": [
                {
                    "name": "formCanDeactivateGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_guards/form-can-deactivate.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanDeactivateFn<>",
                    "defaultValue": "(\r\n  component: unknown,\r\n  currentRoute: ActivatedRouteSnapshot,\r\n  currentState: RouterStateSnapshot,\r\n  nextState: RouterStateSnapshot\r\n) => {\r\n  if (component instanceof PreferencesComponent) {\r\n    return component.activeButton\r\n      ? window.confirm('Do you really leave this page without save?')\r\n      : true;\r\n  }\r\n\r\n  if (component instanceof ChangePasswordComponent) {\r\n    return component.changePasswordForm.dirty\r\n      ? window.confirm('Do you really leave this page without save?')\r\n      : true;\r\n  }\r\n\r\n  if (component instanceof SettingsComponent) {\r\n    return component.activeButton\r\n      ? window.confirm('Do you really leave this page without save?')\r\n      : true;\r\n  }\r\n\r\n  return true;\r\n}"
                }
            ],
            "src/app/config/menu.config.ts": [
                {
                    "name": "MenuConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/config/menu.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "object",
                    "defaultValue": "{\r\n  title: 'Angular Template',\r\n  footerTitle: 'Karmelki',\r\n  authMenuItems: [\r\n    { label: 'Profile', routerLink: `/${RouterEnum.settings}` },\r\n    { label: 'Logout', command: () => {} },\r\n  ],\r\n  nonAuthMenuItems: [\r\n    { label: 'Login', routerLink: `/${RouterEnum.login}` },\r\n    { label: 'Register', routerLink: `/${RouterEnum.register}` },\r\n  ],\r\n  langs: [\r\n    { label: 'English', value: 'en' },\r\n    { label: 'Polski', value: 'pl' },\r\n  ],\r\n}"
                }
            ],
            "src/app/core/_interceptors/refresh-token.interceptor.ts": [
                {
                    "name": "refreshTokenInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\r\n  const tokenService = inject(TokenService);\r\n\r\n  return next(req).pipe(\r\n    catchError((error: HttpErrorResponse) => {\r\n      if (error.status === 401) {\r\n        const accessToken = tokenService.getAccessToken();\r\n        const refreshToken = tokenService.getRefreshToken();\r\n\r\n        if (accessToken && refreshToken) {\r\n          return tokenService.refreshToken({ accessToken, refreshToken }).pipe(\r\n            switchMap((newTokens: ITokens) => {\r\n              tokenService.setAccessToken(newTokens.accessToken);\r\n              tokenService.setRefreshToken(newTokens.refreshToken);\r\n\r\n              const clonedReq = req.clone({\r\n                setHeaders: {\r\n                  Authorization: `Bearer ${newTokens.accessToken}`,\r\n                },\r\n              });\r\n              return next(clonedReq);\r\n            }),\r\n            catchError(refreshError => {\r\n              tokenService.removeTokens();\r\n              return throwError(refreshError);\r\n            })\r\n          );\r\n        } else {\r\n          tokenService.removeTokens();\r\n          return throwError(error);\r\n        }\r\n      } else {\r\n        return throwError(error);\r\n      }\r\n    })\r\n  );\r\n}"
                }
            ],
            "src/app/core/_guards/unauth.guard.ts": [
                {
                    "name": "unAuthGuard",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/core/_guards/unauth.guard.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "CanActivateFn",
                    "defaultValue": "(route, state) => {\r\n  const authService = inject(AuthService);\r\n  const router = inject(Router);\r\n\r\n  return authService.isAuth().pipe(\r\n    map(isLoggedIn => {\r\n      if (isLoggedIn) {\r\n        router.navigate([RouterEnum.home]);\r\n        return false;\r\n      } else {\r\n        return true;\r\n      }\r\n    }),\r\n    catchError(() => {\r\n      return of(true);\r\n    })\r\n  );\r\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/core/_models/api-endpoints.enum.ts": [
                {
                    "name": "ApiEndpoints",
                    "childs": [
                        {
                            "name": "SIGN_IN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/login"
                        },
                        {
                            "name": "SIGN_UP",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/register"
                        },
                        {
                            "name": "SIGN_OUT",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "RESET_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "CHANGE_PASSWORD",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "REFRESH_TOKEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/refresh-token"
                        },
                        {
                            "name": "REVOKE_TOKEN",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/auth/revoke-token"
                        },
                        {
                            "name": "GET_USERS",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/users"
                        },
                        {
                            "name": "GET_USER",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "api/users"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/core/_models/api-endpoints.enum.ts"
                }
            ],
            "src/app/config/router.enum.ts": [
                {
                    "name": "RouterEnum",
                    "childs": [
                        {
                            "name": "home",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": ""
                        },
                        {
                            "name": "login",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "login"
                        },
                        {
                            "name": "register",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "register"
                        },
                        {
                            "name": "logout",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "logout"
                        },
                        {
                            "name": "settings",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "settings"
                        },
                        {
                            "name": "changePassword",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "change-password"
                        },
                        {
                            "name": "deleteAccount",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "deleteAccount"
                        },
                        {
                            "name": "forgetPassword",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "forget-password"
                        },
                        {
                            "name": "preferences",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "preferences"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/config/router.enum.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/shared/types/button.types.ts": [
                {
                    "name": "ButtonBadgeSeverity",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"info\" | \"success\" | \"warn\" | \"danger\" | \"contrast\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonIconPosition",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"left\" | \"right\" | \"top\" | \"bottom\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonSeverity",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"primary\" | \"secondary\" | \"success\" | \"info\" | \"warn\" | \"help\" | \"danger\" | \"contrast\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonSize",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"large\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "ButtonVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"outlined\"",
                    "file": "src/app/shared/types/button.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/fileUploader.types.ts": [
                {
                    "name": "IFileUploadMode",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"basic\" | \"advanced\"",
                    "file": "src/app/shared/types/fileUploader.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/input.types.ts": [
                {
                    "name": "InputIcons",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"user\" | \"map\" | \"clock\" | \"star\" | \"check\" | \"times\" | \"shopping-cart\"",
                    "file": "src/app/shared/types/input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "InputTypes",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"text\" | \"number\" | \"email\" | \"password\" | \"tel\" | \"url\"",
                    "file": "src/app/shared/types/input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/toast.types.ts": [
                {
                    "name": "Keys",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"tl\" | \"tc\" | \"tr\" | \"bl\" | \"bc\" | \"br\" | \"c\"",
                    "file": "src/app/shared/types/toast.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Positions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"top-left\" | \"top-center\" | \"top-right\" | \"bottom-left\" | \"bottom-center\" | \"bottom-right\" | \"center\"",
                    "file": "src/app/shared/types/toast.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Severity",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"success\" | \"info\" | \"warn\" | \"error\"",
                    "file": "src/app/shared/types/toast.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/select.types.ts": [
                {
                    "name": "LabelVariant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"over\" | \"in\" | \"on\"",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "SelectOptions",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "SelectOption[]",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                },
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"large\"",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Variant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"filled\" | \"outlined\"",
                    "file": "src/app/shared/types/select.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ],
            "src/app/shared/types/navbar.types.ts": [
                {
                    "name": "Langs",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "literal type[]",
                    "file": "src/app/shared/types/navbar.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 188
                }
            ],
            "src/app/shared/types/password-input.types.ts": [
                {
                    "name": "Size",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"small\" | \"large\" | undefined",
                    "file": "src/app/shared/types/password-input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                },
                {
                    "name": "Variant",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "\"filled\" | \"outlined\"",
                    "file": "src/app/shared/types/password-input.types.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 192
                }
            ]
        }
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/config/menu.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "MenuConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_guards/auth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_guards/form-can-deactivate.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "formCanDeactivateGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_guards/unauth.guard.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "unAuthGuard",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_interceptors/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_interceptors/refresh-token.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "refreshTokenInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ILoginDto",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/DTOs/authDto.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IRegisterDto",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/base-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IBaseResponse",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/base-response.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPagination",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/decoded-token.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IDecodedToken",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/paged-query-params.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPagedQueryParams",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/query-params.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IQueryParams",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_models/tokens.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITokens",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/auth/auth.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/httpRequestFactory/request-factory.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RequestFactoryService",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/core/_services/token/token.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "TokenService",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/login/login.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/auth/register/register.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/features/dashboard/dashboard/dashboard.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "DashboardComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/checkbox/checkbox.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CheckboxComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/confirm-modal/confirm-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ConfirmModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/editor/editor.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "EditorComponent",
                "coveragePercent": 0,
                "coverageCount": "0/17",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/file-uploader/file-uploader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FileUploaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/footer/footer.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "FooterComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/info-modal/info-modal.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoModalComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/navbar/navbar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "NavbarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/29",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/password-input/password-input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PasswordInputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/39",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/toast/toast.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToastComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/components/toggle-switch/toggle-switch.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ToggleSwitchComponent",
                "coveragePercent": 0,
                "coverageCount": "0/23",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "LoginForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswdRecoveryForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswordsForm",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "RegisterForm",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/models/form.model.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ThemeForm",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/form.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "FormService",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/services/toast.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "ToastService",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ButtonProps",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonBadgeSeverity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonIconPosition",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonSeverity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonSize",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/button.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "ButtonVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/checkbox.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "CheckboxProps",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/editor.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IEditorProps",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/editor.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ITextChangeEvent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/fileUploader.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IFileUploadProps",
                "coveragePercent": 0,
                "coverageCount": "0/11",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/fileUploader.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IUploadEvent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/fileUploader.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "IFileUploadMode",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/footer.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "FooterProps",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/input.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InputProps",
                "coveragePercent": 0,
                "coverageCount": "0/14",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "InputIcons",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "InputTypes",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/modal.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ConfirmModalProps",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/modal.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "InfoModalProps",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "MenuItem",
                "coveragePercent": 0,
                "coverageCount": "0/12",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "NavbarProps",
                "coveragePercent": 0,
                "coverageCount": "0/13",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/navbar.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Langs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/password-input.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "PasswordInputProps",
                "coveragePercent": 0,
                "coverageCount": "0/15",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/password-input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/password-input.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Variant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectOption",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SelectProps",
                "coveragePercent": 0,
                "coverageCount": "0/24",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "LabelVariant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "SelectOptions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Size",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/select.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Variant",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toast.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Keys",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toast.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Positions",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toast.types.ts",
                "type": "type alias",
                "linktype": "miscellaneous",
                "linksubtype": "typealias",
                "name": "Severity",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/types/toogleSwitch.types.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "ToggleSwitchProps",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/shared/validators/equivalent.validator.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "equivalentValidator",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.development.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/environments/environment.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "environment",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}